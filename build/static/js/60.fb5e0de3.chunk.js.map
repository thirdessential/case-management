{"version":3,"sources":["App/components/AddEditMatter/EditMatter.js"],"names":["validNameRegex","RegExp","res","contacts","optns","editMode","editRes","customData","clientId","error","relationship","AddEditMatter","React","Component","constructor","props","super","handleChange","e","persist","this","setState","st","target","name","value","selectedIndex","addFeild","list","state","relatedContacts","push","contact","billThis","id","handleDelete","newState","splice","HandleDynamicChange","checked","console","log","data","_id","test","length","openNotificationWithIcon","type","notification","message","openNotificationWithfailure","handleSubmit","event","preventDefault","destroy","matterDescription","undefined","warning","client","customFields","userId","api","post","location","then","history","goBack","catch","rate","status","editData","modal","taskOptions","handleCustom","componentDidMount","get","map","index","taskName","taskAuto","className","Group","controlId","Label","Control","as","onChange","defaultValue","task","val","taskAutomation","customFeilds","md","key","pathname","firstName","lastName","formData","onClick","practiseArea","Row","sm","openDate","closeDate","pendingDate","contactForm","InputList","option","change","delete","billing","billingType","render","title","required","rows","clientReferenceNumber","variant","centered","visible","onOk","onCancel","connect","user","token"],"mappings":"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","file":"static/js/60.fb5e0de3.chunk.js","sourcesContent":["import React, { useState, useEffect, useDispatch, useSelector} from 'react'\nimport { Form, Row , Col , Button } from \"react-bootstrap\";\nimport { message,  Modal, Card, Result, notification } from 'antd';\nimport api from '../../../resources/api'\nimport AddPerson from '../AddEditContact/AddPersonModal'\nimport DynamicFeild from '../AddEditMatter/DynamicFeilds/index'\nimport { connect } from 'react-redux'\n\nconst validNameRegex = RegExp(/^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u);\n\nlet res = {}\nlet customFields = null\nlet contacts = {}\nlet optns = null\nlet editMode = true;\nlet editRes = \"\"\nlet customData =  []\nlet clientId = 0\nlet error = {\n  relationship: [\"\"]\n}\n\nclass AddEditMatter extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      rate : \"Flat\",\n      status :\"Open\",\n      editData : {},\n      client : \"\",\n      relatedContacts : [],\n      customFields : [],\n      modal : false,\n      taskOptions: []\n    }\n\n  }\n  handleCustom(e){\n    e.persist()\n    const { id , value, name } = e.target\n    customData[id]={[name] : value}\n  \n\n  }\n  handleChange = (e) => {\n    e.persist()\n    this.setState(st=>({...st,[e.target.name]:e.target.value}))\n    if(e.target.name===\"client\"){\n      clientId = e.target.selectedIndex - 1\n    }\n  }\n   addFeild=() =>{\n      let list = this.state.relatedContacts\n      list.push({relationship : \"\", contact : \"\", billThis : \"\", id: \"\"})\n      this.setState({relatedContacts : list})\n \n  }\n   handleDelete = (e)=>{\n    e.persist()\n     const { name , id } = e.target\n     let newState = this.state\n     newState.relatedContacts.splice(id, 1)\n     this.setState(newState)\n  }\n\n  HandleDynamicChange = (e)=>{\n    e.persist()\n    let list = this.state\n    const { id , value, name , checked ,selectedIndex } = e.target\n    if(name===\"billThis\"){\n      list.relatedContacts[id][name] = checked\n    }if(name === 'contact'){\n      console.log(contacts)\n      if(selectedIndex != 0){\n        list.relatedContacts[id][name] = contacts.data.data[selectedIndex -1]._id\n      list.relatedContacts[id].id = selectedIndex\n      }\n    }else{\n    list.relatedContacts[id][name] = value\n    }\n    \n    console.log(error.relationship)\n    switch (name) {\n      case \"relationship\":\n        error.relationship[id] =\n        (!validNameRegex.test(value))\n        ? \"Realtionship must be in characters!\"\n        : (value.length > 20) \n        ? \"Relationship must be less than 20 characters long!\" \n        : \"\";\n   break;\n     \n      default:\n        break;\n    }\n    this.setState(list)\n    console.log(this.state)\n  }\n  async componentDidMount(){\n   \n    const editData = await api.get('/matter/view/'+this.props.location.state)\n    console.log(editData)\n    this.setState({editData : editData.data.data, \n      matterDescription : editData.data.data.matterDescription , \n      relatedContacts : editData.data.data.relatedContacts? editData.data.data.relatedContacts : [] })\n    this.setState({client: editData.data.data.client._id})\n\n    let taskOptions = []\n    api.get('/tasks/viewforuser/' + this.props.userId).then((res) => {\n      console.log(res)\n      res.data.data.map((value, index)=>{\n        taskOptions.push(<option value={value._id}>{value.taskName}</option>)\n      })\n      this.setState({taskOptions : taskOptions})\n      const taskAuto =<Form className=\"form-details\">\n                      <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                                <Form.Label>Task</Form.Label>\n                                <Form.Control as=\"select\" name=\"task\" onChange={this.handleChange} defaultValue={this.state.editData.task ? this.state.editData.task[0] : \"\"}>\n                                  <option>Select a task</option>\n                                  {\n                                    this.state.taskOptions.map((val)=>{\n                                      return val\n                                    })\n                                  }\n                                </Form.Control>\n                              </Form.Group>\n                        \n                      </Form>\n      this.setState({ taskAutomation : taskAuto})\n    })\n    api.get('/user/view/' + this.props.userId).then((res)=>{\n     console.log(res)\n      let customFeilds = []\n  \n      res.data.data.customFields.map((value, index)=>{\n\n          customFeilds.push(<Col md=\"6\">\n          <Form.Group key={index} controlId={index}>\n            <Form.Label>{value.name}</Form.Label>\n            <Form.Control\n              name={value.name}\n              type={value.type}\n              defaultValue={editData.data.data.customFields.length == 0 || editData.data.data.customFields[index] == undefined ? \" \" : editData.data.data.customFields[index][value.name]}\n            onChange={this.handleCustom}\n            />\n          </Form.Group>\n        </Col>)\n        console.log(editData.data.data.customFields)\n      })\n      this.setState({\n        customFields : customFeilds\n      })\n    \n      })\n   \n    if(this.props.location.pathname===\"/manage/Matter/edit\"){\n      editMode= true;\n      editRes= this.props.location.state\n    }\n    res = await api.get('/user/view/'+this.props.userId).then(\n      contacts = await api.get('contact/viewforuser/'+this.props.userId))\n    \n   \n    optns = contacts.data.data.map((value, index)=>{\n \n      return <option value={value._id} id={index}>{value.firstName + \" \" + value.lastName}</option>\n     })\n\n     const formData = <div>\n       <Form.Group controlId=\"exampleForm.ControlSelect1\">\n            <Form.Label>Client</Form.Label>\n              <Form.Control as=\"select\" name=\"client\" defaultValue={this.state.editData.client._id} onChange={this.handleChange}>\n              <option>Select a contact</option>\n\n                {optns}\n              </Form.Control>\n            </Form.Group>\n            <div className=\"form-add mb-4\">\n              <span onClick={() => this.setState({modal:true})}>Add Contact</span>\n            </div>\n        <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                <Form.Label>Practise Area</Form.Label>\n                <Form.Control as=\"select\" name=\"practiseArea\" onChange={this.handleChange} defaultValue={this.state.editData.practiseArea}>\n                      <option>Select a practice area</option>\n                      <option>Attorney</option>\n                      <option>Administrative</option>\n                      <option>Bankruptcy</option>\n                      <option>Business</option>\n                      <option>Builder's Liens</option>\n                      <option>Civil Litigation</option>\n                      <option>Commercial</option>\n                      <option>Conveyance (Purchase)</option>\n                      <option>Conveyance (Sale)</option>\n                      <option>Corporate</option>\n                      <option>Criminal</option>\n                      <option>Employment</option>\n                      <option>Estates</option>\n                      <option>Family</option>\n                      <option>Immigration</option>\n                      <option>Insurance</option>\n                      <option>Personal Injury</option>\n                      <option>Tax</option>\n                      <option>Wills</option>\n                </Form.Control>\n              </Form.Group>\n              <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                <Form.Label>Status</Form.Label>\n                <Form.Control as=\"select\" name=\"status\" onChange={this.handleChange} defaultValue={this.state.editData.status}>\n                  <option>Open</option>\n                  <option>Closed</option>\n                  <option>Pending</option>\n                </Form.Control>\n              </Form.Group>\n              <Form.Row className=\"matter-res-date\">\n                <Col sm>\n                  <Form.Group controlId=\"formGroupOpenDate\">\n                  <Form.Label>Open Date</Form.Label>\n                  <Form.Control name='openDate' type=\"Date\" defaultValue={this.state.editData.openDate} \n                  onChange={this.handleChange}/>\n                  </Form.Group>\n                </Col>\n                <Col sm>  \n                  <Form.Group controlId=\"formGroupClosing Date\">\n                  <Form.Label>Closing Date</Form.Label>\n                  <Form.Control name='closeDate' type=\"Date\" defaultValue={this.state.editData.closeDate}\n                   onChange={this.handleChange}/>\n                  </Form.Group>\n                </Col>  \n                <Col sm>\n                  <Form.Group controlId=\"formGroupPendingDate\">\n                  <Form.Label>Pending Date</Form.Label>\n                  <Form.Control name='pendingDate' type=\"Date\" defaultValue={this.state.editData.pendingDate}\n                 onChange={this.handleChange}/>\n                  </Form.Group>\n                </Col> \n              </Form.Row>\n     </div>\n     \n     const contactForm = <Form className=\"form-details\">\n     <DynamicFeild name=\"realtedContacts\"   InputList={this.state.relatedContacts}  option={optns} error={error.relationship} change={this.HandleDynamicChange}  delete={this.handleDelete} editMode={editMode}></DynamicFeild> \n\n\n       <br/>\n       <div className=\"form-add mb-4\">\n         <span onClick={this.addFeild}>Add Related Contact</span>\n       </div>\n     </Form>\n     const billing =  <Form className=\"form-details\">\n                          <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                            <Form.Label>Rate</Form.Label>\n                            <Form.Control as=\"select\" name=\"billingType\" onChange={this.handleChange} defaultValue={this.state.editData.billingType} >\n                              <option>Flat</option>\n                              <option>Hourly</option>\n                              <option>Contagious</option>\n                            </Form.Control>\n                          </Form.Group>\n                      </Form>\n     this.setState({formData : formData, contactForm : contactForm, billing : billing})\n   \n    /*\n    customFields = res.data.data.customFields.map((value, index)=>{\n      return <Form.Group key={index} controlId={index}>\n              <Form.Label>{value.name}</Form.Label>\n              <Form.Control required={value.required} \n              name={value.name} type={value.type} \n              defaultValue={this.state.editData.customFields ? this.state.editData.customFields[index][value.name] : \"\"}\n               onChange={this.handleCustom}/>\n             </Form.Group>\n    })*/\n    this.setState({optns : optns,})\n   \n    \n  }\n   openNotificationWithIcon = type => {\n    notification[type]({\n      message: 'Matter Saved'});\n  };\n    openNotificationWithfailure = type => {\n    notification[type]({\n      message: 'Failure'});\n  };\n   \n  handleSubmit = (event) => {\n    event.preventDefault();\n    notification.destroy()\n   \n\n    if ((this.state.matterDescription ===\"\" ||this.state.matterDescription ===undefined) ) {\n      return notification.warning({\n        message: \"Please add a matter description\",\n      });\n    }else  if ((this.state.client ===\"\" ||this.state.client ===undefined) ) {\n      return notification.warning({\n        message: \"Please select a contact\",\n      });\n    }else{\n     // console.log(\"all good\")\n       const data = this.state\n        data.customFields = customData\n        data.client = contacts.data.data[clientId]._id\n        data.userId = this.props.userId\n\n       if(editMode){\n        api.post('/matter/edit/'+this.props.location.state, data).then((res)=>{\n            console.log(res)\n            this.openNotificationWithIcon('success')\n            if(this.props.location!=undefined){\n              this.props.history.goBack()\n             }\n          }).catch(()=>{\n            this.openNotificationWithfailure('error')\n          })\n            /*\n             if(this.props.location!=undefined){\n               this.props.history.goBack()\n              }\n              */\n\n       }else{\n         api.post('/matter/create', data).then(res=>console.log(res)).then(()=>this.openNotificationWithIcon('success')).catch(()=>this.openNotificationWithfailure('error'))\n         \n       }\n\n       \n    }\n  }\n  \n  render(){\n    \n\n    \n  \n  const handleChange = (e) => {\n    e.persist()\n    \n    if(e.target.name===\"client\"){\n      clientId = e.target.selectedIndex - 1\n    }else\n    if(e.target.name === \"task\"){\n      if(e.target.selectedIndex != 0){\n        this.setState(st=>({...st,[e.target.name]:e.target.value}))\n      }\n    }\n    else{\n      this.setState(st=>({...st,[e.target.name]:e.target.value}))\n    }\n  }\n  \n\n    return (\n      <div className='form-width'>\n      <div className=\"form-header-container mb-4\">\n            <h3 className=\"form-header-text\">Edit Matter</h3>\n      </div>\n      <Card title=\"Matter Information\" className=\"mb-4\">\n        <Form className=\"form-details\" >\n          \n           \n            <Form.Group controlId=\"formGroupMatter\">\n              <Form.Label>Matter Description</Form.Label>\n                <Form.Control required name='matterDescription' as=\"textarea\" rows=\"3\" type=\"text\" defaultValue={this.state.editData.matterDescription}\n                 onChange={handleChange}/>\n              </Form.Group>\n              {\n                this.state.formData\n              }\n              <Form.Group controlId=\"formGroupClientRefenceNumber\">\n                <Form.Label>Client reference number</Form.Label>\n                <Form.Control name='clientReferenceNumber' type=\"number\" defaultValue={this.state.editData.clientReferenceNumber}\n                 onChange={handleChange}/>\n              </Form.Group>\n            \n       </Form>\n      </Card>\n\n      <Card title=\"Related Contacts\" className=\"mb-4\">\n          {\n            this.state.contactForm\n          }\n      </Card>\n      <Card title=\"Custom Fields\"  className=\"mb-4\">\n      <Form className=\"form-details\">\n      <p>Customise your<Button variant=\"link\" onClick={()=>this.props.history.push('/settings/customFeilds')}>Custom Fields</Button></p>\n\n      {       \n                  this.state.customFields.map((val)=>{\n                    return val\n                  })\n                }\n      </Form>\n      </Card>\n      <Card title=\"Billing Preference\"  className=\"mb-4\">\n        {this.state.billing}\n      </Card>\n\n      <Card title=\"Task Automation\"  className=\"mb-4\">\n      {\n        this.state.taskAutomation\n      }\n      </Card>\n      <Button onClick={this.handleSubmit} className=\"btn btn-success\" >Update</Button>\n      <Button onClick={()=>{this.props.history.goBack()}} >CANCEL</Button>\n     <br></br>\n      <Modal\n        centered\n        visible={this.state.modal}\n        onOk={() => this.setState({modal :false})}\n        onCancel={() => this.setState({modal :false})}\n      >\n      <AddPerson></AddPerson>\n\n      </Modal>\n      </div>\n   \n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  userId: state.user.token.user._id\n});\nexport default connect(mapStateToProps)(AddEditMatter)\n\n\n"],"sourceRoot":""}