{"version":3,"sources":["App/containers/Billings/ExcelExport.js","App/containers/Tasks/UpcomingTasks/upcomingTasks.js","App/containers/Tasks/CompletedTasks/CompletedTasks.js","App/containers/Tasks/ExcelExport.js","App/containers/Matter/VIewMatter/ExportCommunications.js","App/containers/Matter/VIewMatter/communnication.js","App/containers/Matter/VIewMatter/Task.js","App/containers/Matter/VIewMatter/ExportActivity.js","App/containers/Matter/VIewMatter/Activity.js","App/containers/Matter/VIewMatter/Bills.js","App/containers/Matter/VIewMatter/Documents.js","App/containers/Matter/VIewMatter/Calendar.js","App/containers/Matter/VIewMatter/ExportExcel.js","App/containers/Matter/VIewMatter/Notes.js","App/containers/Matter/VIewMatter/ViewMatter.js"],"names":["ExportExcel","Component","constructor","props","super","console","log","dataSource","render","this","id","className","map","value","index","key","lastSeen","status","dueDate","client","matter","issueDate","balance","table","filename","sheet","buttonText","TabPane","Tabs","UpcomingTasks","now","Date","start_of_week","end_of_week","getTime","getDay","tomorrow","setDate","getDate","yesterday","undefined","tableData","length","defaultActiveKey","tab","columns","filter","item","date","parse","getMonth","getFullYear","CompletedTask","useState","getISTDate","dateInUTC","toLocaleString","taskName","description","matterDescription","substring","addTime","logType","time","subject","from","to","timeError","matters","communication","contact","option","optns","matterkey","fromKey","toKey","user","JSON","window","localStorage","getItem","name","token","firstName","lastName","Communication","React","convertTime","serverdate","toutc","toUTCString","showModal","type","setState","secure","email","phone","handleOk","notification","destroy","error","message","state","data","body","disable","editEmail","editPhone","fromId","toId","userId","api","post","then","res","componentDidMount","success","catch","err","ReactDOM","findDOMNode","messageForm","reset","billable","nonBillable","qty","rate","invoice","setTimeout","handleSecure","editSecure","getHours","getMinutes","_id","get","emailAddress","number","text","sms","mobile","content","smsres","handleCancel","loading","emailData","phoneData","completeData","val","contacts","temp","matterDesc","push","handleChange","e","persist","touched","target","selectedIndex","newData","timeValue","indexOf","sHours","split","sMinutes","sSecs","isNaN","parseInt","handleEdit","record","handleDelete","setTableData","title","dataIndex","_","variant","onClick","onConfirm","okText","cancelText","danger","size","spinning","doc","jsPDF","setFontSize","td","startY","head","autoTable","save","bodyStyle","style","visible","onOk","onCancel","footer","disabled","Form","ref","form","Row","Col","Group","Label","Control","as","placeholder","onChange","controlId","rows","defaultValue","required","connect","response","Tasks","exportPDF","openNotificationWithFailure","openNotificationWithSucces","editMode","Data","priority","newState","handleView","edit","delete","history","sortDirections","sorter","a","b","handelAction","cancel","Check","EditHandler","deleteHandler","valid","warning","confirmLoading","matterId","handelNonAction","newcolumns","selected","options","CompletedData","upcomingData","newdata","invoiceStatus","activity","Activity","setTimer","hours","Math","floor","minutes","seconds","timeModal","expenseModal","disableExpense","disabletime","editTime","EditExpense","editmode","billed","timeData","expenseData","today","setHours","setMinutes","setSeconds","timedata","thisWeek","thisMonth","thisYear","handleDublicate","filters","onFilter","includes","handleCustomSorting","From","To","customSort","padding","display","marginBottom","width","height","afterClose","Timer","label","defaultChecked","billing","handelBills","draftBills","unpaidBills","paidBills","invoiceId","parseFloat","toFixed","splice","columnsforDraft","unpaidColumns","paidColumns","handleRecordPayment","handleBills","Option","Select","Documents","docs","setDocs","useSelector","documents","setTemplateTable","setTemplateModal","document","category","setTemplateData","Disable","setDisable","viewUpload","setViewUpload","Loading","setLoading","CatagoryData","setCatagoryData","CatagoryTable","setCatagoryTable","cataoryModal","setcataoryModal","uploadData","setUploadData","modalFor","setModalFor","setMatters","Category","setCategory","setValue","dataSrc","setDataSrc","showNameInput","setShowNameInput","columnsForDocuments","SearchOutlined","paddingLeft","paddingTop","filteredData","toLowerCase","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","toString","receivedDate","lastEdit","editHandler","downloadHandler","icon","DownloadOutlined","handleInput","files","getMatterById","getDocuments","tempDocs","template","updated_at","created_at","__v","image","customFields","Email","address","website","company","handleSubmit","docFormData","FormData","set","headers","open","docId","formData","newUploadData","columnsForCatagory","editCategory","deleteCategory","getCategory","tempCatagory","AddCategory","EditCategory","layout","labelCol","span","wrapperCol","useEffect","menu","Item","ButtonForDocument","overlay","trigger","preventDefault","DownOutlined","ButtonForCatagory","ButtonForTemplate","operations","setoperations","tabBarExtraContent","htmlType","fields","rules","showSearch","optionFilterProp","filterOption","input","children","CatagoryForm","CalendarContainer","SchedulerRef","useRef","recurrenceRef","setOptions","useDispatch","startTime","endTime","setData","listEvent","setListEvent","fetchEventData","setdata","newTableData","allday","repeat","Subject","StartTime","EndTime","Location","location","Description","TimeForReminder","timeForReminder","Matter","Notification","Allday","Repeat","DateTimeChange","element","itemData","setInit","args","sdd","smm","syyyy","shours","smins","edd","emm","eyyyy","ehours","emins","onClickButton2","eventdata","current","openEditor","Id","actionComplete","requestType","openNotificationWithfailure","changedRecords","cal","showQuickInfo","popupOpen","eventWindow","recurrenceEditor","eventSettings","editorTemplate","pr","setRecurrenceRef","services","Day","Week","WorkWeek","Month","Agenda","currentView","eventlist","p","notes","Notes","setVisible","setdisable","settableData","seteditMode","setrecord","editModal","seteditModal","formRef","fetchNotes","notess","columnsNotes","extra","unit","orientation","marginLeft","CompanyView","desc","setdesc","Active","setActive","total","settotal","Client","setClient","setAmount","setContact","setAct","setAddress","setfirstName","setID","setEmail","Number","setNumber","BillAmount","setBillAmount","fetchData","billamount","amnt","relatedContacts","cntct","mail","Num","class","adrs","street","city","zipCode","country","emailType","phoneType","fNAme","IDx","sm","activeKey","flex","fontSize","Calendar","Task","Bills"],"mappings":"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","file":"static/js/30.5d9f15f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\n\nexport class ExportExcel extends Component {\n  constructor(props) {\n    super(props);\n    console.log('data in excel', props.dataSource);\n  }\n  \n  render() {\n    console.log(this.props)\n    return (\n      <div>\n        <table id=\"matter\" className=\"d-none\">\n          <thead>\n            <tr>\n              <th>S.No</th>\n              <th>Last Seen</th>\n              <th>Status</th>\n              <th>Due Date</th>\n              <th>ID</th>\n              <th>Client</th>\n              <th>Matter</th>\n              <th>Issue Date</th>\n              <th>Balance</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {this.props.dataSource.map((value, index) => {\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{value.lastSeen}</td>\n                  <td>{value.status}</td>\n                  <th>{value.dueDate}</th>\n                  <th>{ value.id }</th>\n                  <th>{value.client}</th>\n                  <th>{value.matter}</th>\n                  <th>{value.issueDate}</th>\n                  <th>{value.balance}</th>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <ReactHTMLTableToExcel\n          className=\"btn btn-outline-primary btn-sm excel-button\"\n          table=\"matter\"\n          filename=\"Bills\"\n          sheet=\"Sheet\"\n          buttonText=\"Export to Excel\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExportExcel;\n","import { Tabs, Table } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { TabPane } = Tabs;\r\n\r\nconst UpcomingTasks = (props) => {\r\n  var now = new Date();\r\n // var start_of_week = new Date(now.setDate(now.getDate() - now.getDay()));\r\n  var start_of_week= now\r\n  var end_of_week = new Date(\r\n    now.getTime() + (6 - now.getDay()) * 24 * 60 * 60 * 1000\r\n  );\r\n  const tomorrow = new Date(now);\r\n  tomorrow.setDate(tomorrow.getDate() + 1);\r\n  const yesterday = new Date()\r\n  yesterday.setDate(yesterday.getDate() - 1);\r\n  console.log( \" tommorow :\" + tomorrow )\r\n  console.log(  \" today : \" + now)\r\n  if (props.tableData !== undefined && props.tableData.length !== 0) {\r\n    return (\r\n      <Tabs defaultActiveKey=\"1\">\r\n        <TabPane tab=\"All\" key=\"1\">\r\n          <Table className=\"table-responsive\" dataSource={props.tableData} columns={props.columns} />\r\n        </TabPane>\r\n        <TabPane tab=\"Due Today\" key=\"3\">\r\n          <Table\r\n          className=\"table-responsive\"\r\n            dataSource={props.tableData.filter((item) => {\r\n              var date = new Date(Date.parse(item.dueDate));\r\n              return (\r\n                date.getDate() === now.getDate() &&\r\n                date.getMonth() === now.getMonth() &&\r\n                date.getFullYear() === now.getFullYear()\r\n              );\r\n            })}\r\n            columns={props.columns}\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Due this Week\" key=\"2\">\r\n          <Table\r\n          className=\"table-responsive\"\r\n            dataSource={props.tableData.filter((item) => {\r\n              var date = new Date(Date.parse(item.dueDate));\r\n              return date < end_of_week && date > start_of_week || (date.getDate() === now.getDate() &&\r\n              date.getMonth() === now.getMonth() &&\r\n              date.getFullYear() === now.getFullYear());\r\n            })}\r\n            columns={props.columns}\r\n          />\r\n        </TabPane>\r\n\r\n        <TabPane tab=\"Due Tomorow\" key=\"4\">\r\n          <Table\r\n          className=\"table-responsive\"\r\n            dataSource={props.tableData.filter((item) => {\r\n              var date = new Date(Date.parse(item.dueDate));\r\n              return (\r\n                date.getDate() === tomorrow.getDate() &&\r\n                date.getMonth() === tomorrow.getMonth() &&\r\n                date.getFullYear() === tomorrow.getFullYear()\r\n              );\r\n            })}\r\n            columns={props.columns}\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Overdue\" key=\"5\">\r\n          <Table\r\n            className=\"table-responsive\"\r\n            dataSource={props.tableData.filter((item) => {\r\n              var date = new Date(Date.parse(item.dueDate));\r\n              return date <= yesterday\r\n            })}\r\n            columns={props.columns}\r\n          />\r\n        </TabPane>\r\n      </Tabs>\r\n    );\r\n  }\r\n  return <div></div>;\r\n};\r\n\r\nexport default UpcomingTasks;\r\n","import React, {useState, useEffect} from 'react';\r\n//import Content from './Content/Content'\r\nimport { Table } from 'antd';\r\nimport api from '../../../../resources/api';\r\nfunction CompletedTask(props) {\r\n\r\n  const [state, setState] = useState([])\r\n /*\r\n  useEffect(() => {\r\n    api.get('/tasks/showall')\r\n    .then((res)=> {\r\n      console.log(res.data.data) \r\n      const newdata = res.data.data.filter(function( obj ) {\r\n          return obj.status == true;\r\n        });\r\n      setState([...state, ...newdata])\r\n    })\r\n  }, []);\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <Table className=\"table-responsive\" columns={props.columns} dataSource={props.tableData} />\r\n    </div>\r\n  );\r\n}\r\nexport default CompletedTask;\r\n","import React, { Component } from 'react';\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\n\n\nexport class ExportExcel extends Component {\n  constructor(props) {\n    super(props);\n    console.log('data in excel', props.dataSource);\n  }\n  getISTDate(dateInUTC) {\n    var localDate = new Date(dateInUTC);\n    return localDate.toLocaleString();\n  }\n  render() {\n    console.log(this.props)\n    return (\n      <div>\n        <table id=\"matter\" className=\"d-none\">\n          <thead>\n            <tr>\n              <th>S.No</th>\n              <th>Task Name</th>\n              <th>Description</th>\n              <th>Matter</th>\n              <th>Due Date</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {this.props.dataSource.map((value, index) => {\n              if(value.matter){\n                return (\n                  <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td>{value.taskName}</td>\n                    <td>{value.description}</td>\n                    <td>{value.matter.matterDescription  ? value.matter.matterDescription  : value.matter}</td>\n                    <td>{value.dueDate.substring(0,10)}</td>\n                  </tr>\n                );\n              }\n            })}\n          </tbody>\n        </table>\n\n        <ReactHTMLTableToExcel\n          className=\"btn btn-outline-primary btn-sm excel-button\"\n          table=\"matter\"\n          filename=\"Task\"\n          sheet=\"Sheet\"\n          buttonText=\"Export to Excel\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExportExcel;\n","import React, { Component } from 'react';\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\n\nexport class ExportExcel extends Component {\n  constructor(props) {\n    super(props);\n    console.log('data in excel', props.dataSource);\n  }\n\n  render() {\n    console.log(this.props)\n    return (\n      <div>\n        <table id=\"matter\" className=\"d-none\">\n          <thead>\n            <tr>\n              <th>S.No</th>\n              <th>Hours</th>\n              <th>type</th>\n              <th>Time</th>\n              <th>Date</th>\n              <th>Subject</th>\n              <th>Matter</th>\n              <th>from</th>\n              <th>to</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {this.props.dataSource.map((value, index) => {\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{value.addTime}</td>\n                  <td>{value.logType}</td>\n                  <td>{value.time}</td>\n                  <td>{value.date}</td>\n                  <td>{ value.subject }</td>\n                  <td>{value.matter}</td>\n                  <td>{value.from}</td>\n                  <td>{value.to}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <ReactHTMLTableToExcel\n          className=\"btn btn-outline-primary btn-sm excel-button\"\n          table=\"matter\"\n          filename=\"Communications\"\n          sheet=\"Sheet\"\n          buttonText=\"Export to Excel\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExportExcel;\n","  import React from 'react'\n  import { Table , Button, Modal , Card, notification, Space, Popconfirm, Spin } from 'antd'\n  import { useSelector, connect } from 'react-redux';\n  import jsPDF from \"jspdf\";\n  import \"jspdf-autotable\";\n  import api from '../../../../resources/api'\n  import { Form, Col, Row } from 'react-bootstrap'\n  import ReactDOM from 'react-dom'\n  import ExportExcel from './ExportCommunications'\n  \n  \n  let timeError = \"\" ;\n  let matters = {};\n  let communication = {};\n  let contact = {}\n  let option = null\n  let optns = null\n  let matterkey = null\n  let fromKey = null\n  let toKey = null\n  const user = JSON.parse(window.localStorage.getItem('Case.user'))\n  const name = user.token.user.firstName + \" \" + user.token.user.lastName;\n  console.log(user.token.user)\n  \n  class Communication extends React.Component{\n      constructor(props){\n          super(props)\n          this.state = {\n              phone : false,\n              email : false,\n              secure : false,\n              tableData : [],\n              data : {\n                  subject : \"\",\n                  body : \"\",\n                  to : \"\",\n                  from : user.token.user._id\n              },\n              loading : true,\n              emailData : [],\n              phoneData : [],\n              completeData : [],\n              tableData : [],\n              editEmail : false,\n              editPhone : false,\n              editSecure : false,\n              disable : false\n          \n          }\n      }\n      convertTime = (serverdate) => {\n        var date = new Date(serverdate);\n        // convert to utc time\n        var toutc = date.toUTCString();\n        //convert to local time\n        var locdat = new Date(toutc + ' UTC');\n        return locdat;\n      };\n      componentDidMount() {\n       \n       api.get('/matter/viewforuser/'+ this.props.userId).then((res)=>{\n         matters = res\n              option = res.data.data.map((val, index)=>{\n                   return <option value = {val._id}>{val.matterDescription}</option>\n               })\n           }).then(()=>{\n               console.log(option)\n               this.setState({option : option})\n           })\n  \n        api.get('/contact/viewforuser/'+this.props.userId).then((res)=>{\n          contact = res\n            optns = res.data.data.map((value, index)=>{\n    \n                return <option id={index}>{value.firstName + \" \" + value.lastName}</option>\n               })\n         }).then(()=>{this.setState({contacts : optns})})\n      \n         api.get('/communication/viewformatter/' + this.props.userId + '/' + this.props.id).then((res) => {\n          communication = res.data.data;\n         console.log(communication)\n  \n          let emailData = [];\n          let phoneData = [];\n          let completeData = [];\n          \n          res.data.data.map((val, index) => {\n          \n            const temp = {\n              key: index,\n              logType: val.logType,\n              type: val.logType,\n              id: val._id,\n              addTime : val.addTime ? val.addTime : \"-\",\n              time: val.time ? val.time : '',\n              matterDesc: val.matter ? val.matter.matterDescription : '-',\n              matter : val.matter ? val.matter._id : \"\",\n              from: val.from ? val.from.firstName + \" \" + val.from.lastName  : '-',\n              fromId : val.from ? val.from._id : \"\",\n              to: val.to ? val.to.firstName + \" \" + val.to.lastName  : '-',\n              toId : val.to ? val.to._id : \"\",\n              subject: val.subject ? val.subject : '-',\n              body: val.body,\n              date: val.date ? val.date.substring(0,10) : \"-\"      \n            };\n            if (val.logType === 'email' || val.logType === \"secure\") {\n              emailData.push(temp);\n            }\n            if ( val.logType === \"secure\") {\n              temp.from = name\n              temp.type = \"secure\"\n              temp.logType = \"email\"\n              emailData.push(temp);\n            }\n            if (val.logType === 'phone') {\n              phoneData.push(temp);\n            }\n            \n            completeData.push(temp);\n          });\n          this.setState({\n            completeData: completeData,\n            phoneData: phoneData,\n            emailData: emailData,\n            tableData: completeData,\n            loading : false\n          });\n        });\n        /*\n        const time = window.localStorage.getItem('timer');\n        let hours = Math.floor(time / 3600);\n        let minutes = Math.floor(time / 60);\n        if (minutes >= 59) {\n          minutes = minutes % 60;\n        }\n    \n        //   const Seconds = time % 60;\n        const data = this.state.data;\n        data.time = hours + ':' + minutes;\n        this.setState({ data: data, touched: true });\n        console.log(this.state);\n        */\n  \n      }\n      showModal = (type) => {\n        if(type===\"secure\"){\n          this.setState({\n              secure : true,\n            });\n          }else\n          if(type===\"email\"){\n              this.setState({\n                  email : true,\n                });\n          }else\n          if(type===\"phone\"){\n              this.setState({\n                  phone : true,\n                });\n          }\n        \n        };\n      \n        handleOk = type => {    \n          notification.destroy()\n          if (timeError !== '') {\n            notification.error({ message: 'Invalid time,  Please enter time in the format : HH:MM:SS' });\n          }else\n          if(this.state.data.subject == \"\"){\n              notification.error({message : \"Please add a subject\"})\n          }else\n          if(this.state.data.body == \"\"){\n              notification.error({message : \"Please add a body\"})\n          }else{\n            this.setState({\n              disable : true\n            })\n             \n              if(this.state.editEmail || this.state.editPhone){\n  \n                let data = this.state.data\n                console.log(data)\n                \n                if(fromKey == null){\n                  data.from = data.fromId\n                }\n                if(toKey == null){\n                  data.to = data.toId\n                }\n              if(type === \"email\"){\n                data.logType = \"email\"\n                this.setState({email : false})\n              }else\n              if(type === \"phone\"){\n                data.logType = \"phone\"\n                this.setState({phone : false})\n              }\n              data.userId = this.props.userId;\n              console.log(data)\n              api\n                .post('/communication/edit/'+ this.state.data.id, data)\n                .then((res) => {\n                  console.log(res)\n                  this.componentDidMount()            \n                  this.setState({\n                    disable : false\n                    \n                  })\n                  notification.success({ message: 'Log Edited !' });\n                })\n                .catch((err) => {\n                  notification.error({ message: 'Failed' });\n                })\n                .then(() => {\n                  ReactDOM.findDOMNode(this.messageForm).reset()\n                  matterkey = null\n                  fromKey = null\n                  toKey = null\n                  \n                  this.setState({\n                    editPhone : false,\n                    editEmail: false,\n                    disable : false,\n                    data: {\n                      billable: true,\n                      nonBillable: false,\n                      date: '',\n  \n                      qty: '1.0',\n                      rate: '',\n                      invoice: 'Unbilled',\n                    },\n                  });\n                  \n                 \n                  setTimeout(() => {\n                    //window.location.reload();\n                  }, 1500)\n                });\n    \n  \n              }else{\n                let data = this.state.data\n              if(type === \"email\"){\n                data.logType = \"email\"\n                this.setState({email : false})\n              }else\n              if(type === \"phone\"){\n                data.logType = \"phone\"\n                this.setState({phone : false})\n              }\n              data.userId = this.props.userId;\n              console.log(data)\n              api\n                .post('/communication/create', data)\n                .then((res) => {\n                  console.log(res)\n                  this.setState({\n                    disable : false\n                  })\n                  this.componentDidMount()\n                  notification.success({ message: 'Log Added !' });\n                })\n                .catch((err) => {\n                  notification.error({ message: 'Failed' });\n                }).then(()=>{\n                  \n                  ReactDOM.findDOMNode(this.messageForm).reset()\n                })\n               \n    \n              }\n          }   \n        };\n  \n        handleSecure = () => {    \n          notification.destroy()\n          if(this.state.data.to == \"\"){\n            notification.error({message : \"Please add a contact to send message\"})\n          }else\n          if(this.state.data.subject == \"\"){\n              notification.error({message : \"Please add a subject\"})\n          }else\n          if(this.state.data.body == \"\"){\n              notification.error({message : \"Please add a body\"})\n          }else{\n            this.setState({\n              disable : true\n            })\n             \n              if(this.state.editSecure){\n  \n                let data = this.state.data\n                data.logType = \"secure\"\n                data.userId = this.props.userId;\n              console.log(data)\n              api\n                .post('/communication/edit/'+ this.state.data.id, data)\n                .then((res) => {\n                  console.log(res)\n                  this.componentDidMount()            \n                  this.setState({\n                    disable : false\n                    \n                  })\n                  notification.success({ message: 'Log Edited !' });\n                })\n                .catch((err) => {\n                  notification.error({ message: 'Failed' });\n                })\n                .then(() => {\n                  ReactDOM.findDOMNode(this.messageForm).reset()\n                  \n                  this.setState({\n                    editSecure : false,\n                    secure: false,\n                    disable : false,\n                    data: {\n                      billable: true,\n                      nonBillable: false,\n                      date: '',\n                      to : \"\",\n                      qty: '1.0',\n                      rate: '',\n                      invoice: 'Unbilled',\n                    },\n                  });\n                  \n                 \n                  setTimeout(() => {\n                    //window.location.reload();\n                  }, 1500)\n                });\n    \n  \n              }else{\n                let data = this.state.data\n                data.logType = \"secure\"\n                data.userId = this.props.userId;\n                data.time = new Date().getHours() + \":\" + new Date().getMinutes()\n                data.from = user.token.user._id\n                console.log(data)\n  \n                api.get(`/contact/view/${data.to}`).then((res)=>{\n                  console.log(res)\n                  let emailAddress = res.data.data.emailAddress.length != 0 ? res.data.data.emailAddress[0].emailAddress : \"\"\n                  let number = res.data.data.phone.length != 0 ? res.data.data.phone[0].phone : \"\"\n                  console.log(data)\n                  let email = {\n                    to: emailAddress,\n                    subject : data.subject,\n                    text : data.body,\n                    date  : new Date()\n  \n                  }\n                  let sms = {\n                    mobile : number,\n                    content : data.body\n                  }\n                  console.log(email)\n                  console.log(sms)\n                  if(number !== \"\"){\n                    api.post(`/communication/sendsms`, sms ).then((smsres)=>{\n                      console.log(smsres)\n                      notification.success({\n                        message : \"SMS Sent\"\n                      })\n                    \n                    }).catch((err)=>{\n                      console.log(err)\n                      notification.error({message : \"Failed to send the sms\"})\n                    })\n                  }\n  \n                  \n                  if(emailAddress !== \"\"){\n                    api.post(`/communication/sendemail`, email ).then((email)=>{\n                      console.log(email)\n                      notification.success({\n                        message : \"Email Sent\"\n                      })\n                      api\n                      .post('/communication/create', data)\n                      .then((res) => {\n                        console.log(res)              \n                        this.componentDidMount()\n                        notification.success({ message: 'Log Added !' });\n                      })\n                      .catch((err) => {\n                        notification.error({ message: 'Failed' });\n                      }).then(()=>{\n                        this.setState({\n                          disable : false,\n                          secure : false,\n                          editSecure : false\n                        })\n                        ReactDOM.findDOMNode(this.messageForm).reset()\n                      })\n                    }).catch((err)=>{\n                      console.log(err)\n                      notification.error({message : \"Failed to send the email\"})\n                    })\n                  }\n                             \n                })\n               /* \n                  */\n    \n              }\n          }   \n        };\n      \n        handleCancel = type => {\n         // ReactDOM.findDOMNode(this.messageForm).reset()\n          matterkey = null\n          fromKey = null\n          toKey = null\n          if(type===\"secure\"){\n            this.setState({\n                secure : false,\n                editSecure : false,\n                disable : false,\n                data : {\n                  subject : \"\",\n                  body : \"\",\n                  to: \"\",\n                  from : name\n              },\n         \n              });\n              console.log(this.state)\n        }else\n          if(type===\"email\"){\n              this.setState({\n                  email : false,\n                  phone : false,\n                  disable : false,\n                  editEmail: false,\n                  editSecure :false,\n                  secure : false,\n                  data : {\n                    subject : \"\",\n                    body : \"\",\n                    to : \"\",\n                    from : name\n                },\n           \n                });\n                console.log(this.state)\n          }else\n          if(type===\"phone\"){\n              this.setState({\n                  phone : false,\n                  email : false,\n                  editPhone: false,\n                  disable : false,\n                  data : {\n                    subject : \"\",\n                    body : \"\",\n                    to : \"\",\n                    from : name\n                },\n                });\n                console.log(this.state)\n          \n          }\n          \n          setTimeout(() => {\n          //  window.location.reload();\n          }, 500);\n          \n         \n        \n        };\n  \n      render(){\n        const handleChange = (e) => {\n          e.persist();\n          this.setState({ touched: false });\n          const { name, id, value, selectedIndex } = e.target;\n          let newData = this.state.data;\n  \n          if (name === 'matter') {\n  \n            if (selectedIndex >= 1) {\n              matterkey = \"\"\n             // console.log(matters.data.data[selectedIndex - 1]._id)\n              newData[name] = value;\n            //  console.log(\"inside matter > 1 \")\n            } else {\n              newData[name] = '';\n            //  console.log(\"inside matte.....r\")\n            }\n  \n          }else\n          if (name === 'to' || name === 'from') {\n            console.log(matters)\n            if (selectedIndex >= 1) {\n              name === 'to' ? toKey = \"\" : fromKey = \"\"\n              newData[name] = contact.data.data[selectedIndex - 1]._id;\n            } else {\n              newData[name] = '';\n            }\n  \n          } else \n           if (name === 'addTime') {\n            timeError = '';\n            var timeValue = value;\n            if (timeValue == '' || timeValue.indexOf(':') < 0) {\n              timeError = 'Inavlid Time';\n              console.log(timeError);\n            } else {\n              var sHours = timeValue.split(':')[0];\n              var sMinutes = timeValue.split(':')[1];\n              var sSecs = timeValue.split(':')[2];\n              console.log(sSecs)\n              if (sHours == '' || isNaN(sHours) /*|| parseInt(sHours)>23 */) {\n                timeError = 'Inavlid Time';\n                console.log(timeError);\n              } else if (parseInt(sHours) == 0) sHours = '00';\n             // else if (sHours < 10) sHours = '0' + sHours;\n    \n              if (sMinutes == '' || isNaN(sMinutes) || parseInt(sMinutes) > 59) {\n                timeError = 'Inavlid Time';\n                console.log(timeError);\n              } else if (parseInt(sMinutes) == 0) sMinutes = '00';\n             // else if (sMinutes < 10) sMinutes = '0' + sMinutes;\n    \n              if (sSecs == '' || isNaN(sSecs) /*|| parseInt(sHours)>23 */) {\n                timeError = 'Inavlid Time';\n                console.log(timeError);\n              } else if (parseInt(sSecs) == 0) sSecs = '00';\n             // else if (sSecs < 10) sSecs = '0' + sSecs;\n              timeValue = sHours + ':' + sMinutes +':' + sSecs;\n            }\n            newData[name] = timeValue;\n            this.setState({ data: newData });\n          } \n          else \n          {\n              console.log(\"inside last\")\n              newData[name] = value;\n              this.setState({ data: newData });\n            }\n      \n          console.log(this.state);\n        };\n          const handleEdit = record => {\n            /*\n              if(record.type===\"secure\"){\n                this.setState({\n                  editSecure : true,\n                    data : record ,\n                  });\n              }else\n              */\n             console.log(record)\n              if(record.logType===\"email\"){\n                if(record.type === \"secure\"){\n                  this.setState({\n                    editSecure : true\n                    });\n                }\n                this.setState({\n                  editEmail : true,\n                    data : record ,\n                  });\n              }else\n              if(record.logType===\"phone\"){\n                this.setState({\n                  editPhone : true,\n                    data : record  \n                  });\n              }\n              console.log(record)\n                  \n            }\n              \n              const handleDelete = record => {\n              \n                api.get('/communication/delete/'+record.id).then((res)=>{\n                  this.componentDidMount()\n                  notification.success({message : \"Log Deleted !\"})\n                  setTimeout(()=>{\n                    //window.location.reload()\n                  },1500)\n                }).catch((err)=>{\n      \n                  notification.error({message : \"Failed to delete\"})\n                })\n                \n              }\n          const setTableData = (type)=>{\n              if(type===\"email\"){\n                this.setState({\n                  tableData: this.state.emailData,\n                });\n             }else\n             if(type===\"phone\"){\n              this.setState({\n                tableData: this.state.phoneData,\n              });\n              }else\n              if(type===\"all\"){\n                this.setState({\n                  tableData: this.state.completeData,\n                });\n              }\n            }\n          const columns = [\n              {\n                  title: 'Hours',\n                  dataIndex: 'addTime',\n                  key: 'addTime',\n                },\n              {\n                title: 'Type',\n                dataIndex: 'logType',\n                key: 'logType',\n              },\n              {\n                title: 'Time',\n                dataIndex: 'time',\n                key: 'time',\n              },\n              {\n                title: 'Date',\n                dataIndex: 'date',\n                key: 'date',\n              },\n              {\n                title: 'Subject',\n                dataIndex: 'subject',\n                key: 'subject',\n              },\n              {\n                  title: 'Matter',\n                  dataIndex: 'matterDesc',\n                  key: 'matterDesc',\n                },\n              {\n                title: 'From',\n                dataIndex: 'from',\n                key: 'from',\n              },\n                {\n                  title: 'To',\n                  dataIndex: 'to',\n                  key: 'to',\n                },\n              \n                {\n                  title:'Edit',\n                  dataIndex: \"edit\",\n                  key: \"_id\",\n                  render:(_,record)=>{\n                      return (\n                          <Button variant='danger' onClick={()=>handleEdit(record)}>\n                              Edit\n                          </Button>\n                      )\n                  }\n              },\n                \n                {\n                    title:'Delete',\n                    dataIndex: \"delete\",\n                    key: \"_id\",\n                    render:(_,record)=>{\n                        return (\n                          <Popconfirm\n                            title=\"Are you sure delete this Log?\"\n                            onConfirm={()=>handleDelete(record)}\n                            okText=\"Yes\"\n                            cancelText=\"No\"\n                          >\n                            <Button danger>\n                                Delete\n                            </Button>\n                          </Popconfirm>\n                            \n                        )\n                    }\n                },\n            ];\n            const exportPDF = () => {\n              const unit = \"pt\";\n              const size = \"A4\"; // Use A1, A2, A3 or A4\n              const orientation = \"portrait\"; // portrait or landscape\n          \n              const marginLeft = 40;\n              const doc = new jsPDF(orientation, unit, size);\n          \n              doc.setFontSize(15);\n          \n              const title = \"communication\";\n              const headers = [[\"Hours\", \"Type\",\"Time\",\"Date\",\"Subject\",\"Matter\",\"From\", \"To\"] ];\n             \n              let data = []\n              \n            \n              this.state.tableData.map((val, index)=>{\n                const td = [\n                  val.addTime,\n                  val.logType , \n                  val.time ,\n                  val.Date,\n                   val.subject, \n                   val.matter, \n                   val.from, \n                   val.to]\n                data.push(td)\n              })\n            \n          \n              let content = {\n                startY: 50,\n                head: headers,\n                body: data\n              };\n          \n              doc.text(title, marginLeft, 40);\n              doc.autoTable(content);\n              doc.save(\"communications.pdf\")\n            }\n          return <Spin size = \"large\" spinning={this.state.loading}>\n            <div className='p-2 '>\n            <div className=\"d-flex mb-2 title-component-header\">\n                <div className=\"title-header-name\">\n                  <h5>Communication</h5>\n                </div>\n                <div className=\"d-flex extra-iteam-div\">\n                  <button\n                      className=\"btn  btn-outline-primary   btn-sm\"\n                      onClick={exportPDF}\n                  >\n                      Export to PDF\n                  </button>\n                  \n                  <ExportExcel dataSource={this.state.tableData || []} />\n                  <button\n                      className=\"btn  btn-outline-primary   btn-sm\"\n                      onClick={()=>this.showModal(\"secure\")}\n                  >\n                    New secure message\n                  </button>\n                  <button\n                      className=\"btn  btn-outline-primary   btn-sm\"\n                      onClick={()=>this.showModal(\"email\")}\n                  >\n                      New Email Log\n                  </button>\n                  \n                  <button\n                      className=\"btn  btn-outline-primary   btn-sm\"\n                      onClick={()=>this.showModal(\"phone\")}\n                  >\n                      New Phone Log\n                  </button>\n                </div>\n            </div>\n              \n              <Card bodyStyle={{\"padding\": \"14px 10px 0px 10px\"}}>\n                  <div style={{\"display\": \"flex\", \"flex-wrap\": \"wrap\", \"justify-content\": \"space-between\" }}>\n                    <div className=\"mb-2\">\n                    <Button  onClick={()=>setTableData(\"all\")}>All</Button>\n                    <Button onClick={()=>setTableData(\"email\")}>Email</Button>\n                    <Button onClick={()=>setTableData(\"phone\")}>Phone</Button>\n                    </div>\n                  </div>\n              </Card>\n              <Card bodyStyle={{\"padding\": \"0px\"}} className=\"overflow-auto\">                \n                <Table className=\"table-responsive\"  columns={columns} dataSource={this.state.tableData}  />\n              </Card>\n              <Modal\n                  title={this.state.secure ? \"Edit Secure message\" : \"New Secure Message\"}\n                  visible={this.state.secure}\n                  onOk={this.handleSecure}\n                  onCancel={()=>this.handleCancel(\"secure\")}\n                  footer={[\n                    <Button  onClick={()=>this.handleCancel(\"secure\")}>\n                      Cancel\n                    </Button>,\n                    <Button type=\"primary\" disabled = {this.state.disable} onClick={this.handleSecure}>\n                      {this.state.editSecure ? \"Update Log\" : \"Send\"}\n                    </Button>,\n                  ]}\n                  >\n                    {           \n          \n                        <Form  \n                        id='myForm'\n                        className=\"form\"\n                        ref={ form => this.messageForm = form }>\n                         <Row>\n                             \n                             <Col>\n                             <Form.Group>\n                         <Form.Label>Matter</Form.Label>\n                                <Form.Control \n                                    as=\"select\"\n                                    name=\"matter\" \n                                    placeholder=\"Matter\"\n                                    onChange={handleChange}>\n                                <option>Select a matter</option>\n                                {this.state.option}\n                                </Form.Control>\n                         </Form.Group>\n                             </Col>\n                         </Row>\n                       \n                        <Row>\n                            <Col >\n                            <Form.Group>\n                                 <Form.Label>From</Form.Label>\n                                 <Form.Control \n                                     as=\"select\"\n                                     name=\"from\" \n                                     placeholder=\"Select a contact\"\n                                     onChange={handleChange}>\n                                <option>{name}</option>    \n                               \n                                 </Form.Control>\n                                 </Form.Group>\n                            </Col>\n                            \n                            <Col>\n                            <Form.Group >\n                                 <Form.Label>To</Form.Label>\n                                 <Form.Control \n                                     as=\"select\"\n                                     name=\"to\" \n                                     placeholder=\"Select a contact\"\n                                     onChange={handleChange}>\n                                     <option>Select a contact</option>\n                                     {this.state.contacts}\n                                 </Form.Control>\n                                 </Form.Group>\n                            </Col>\n                        </Row>\n                         \n                       \n                        <Form.Group controlId=\"subject\">\n                                 <Form.Label>Subject</Form.Label>\n                                 <Form.Control \n                                 name=\"subject\" \n                                 rows=\"3\"\n                                 placeholder=\"subject\"\n                                 onChange={handleChange} />\n                             </Form.Group>  \n                     \n                        \n                             <Form.Group controlId=\"body\">\n                                 <Form.Label>Body</Form.Label>\n                                 <Form.Control \n                                 name=\"body\" \n                                 as=\"textarea\" \n                                 rows=\"3\"\n                                 placeholder=\"body\"\n                                 onChange={handleChange} />\n                             </Form.Group>\n                        \n                     \n                    </Form>    \n                     \n                    }\n              </Modal>\n              \n              <Modal\n                  title={this.state.editEmail ? \"Edit email log\" : \"Add a email log\"}\n                  visible={this.state.editEmail}\n                  onOk={()=>this.handleOk(\"email\")}\n                  onCancel={()=>this.handleCancel(\"email\")}\n                  footer={[\n                    <Button  onClick={()=>this.handleCancel(\"email\")}>\n                      Cancel\n                    </Button>,\n                    <Button type=\"primary\" disabled = {this.state.disable} onClick={()=>this.handleOk(\"email\")}>\n                      {this.state.editEmail ? \"Edit Log\" : \"Save Log\"}\n                    </Button>,\n                  ]}\n                  >\n                    {\n                        this.state.editEmail ?\n                        <Form \n                        id='myForm'\n                        className=\"form\"\n                        ref={ form => this.messageForm = form }>\n                         <Row>\n                             \n                             <Col>\n                             <Form.Group>\n                         <Form.Label>Matter</Form.Label>\n                                <Form.Control \n                                    as=\"select\"\n                                    name=\"matter\" \n                                    defaultValue = {this.state.data.matter}\n                                    onChange={handleChange}>\n                                <option>Select a matter</option>\n                                {this.state.option}\n                                </Form.Control>\n                         </Form.Group>\n                             </Col>\n                         </Row>\n                       \n                        <Row>\n                            <Col >\n                            <Form.Group>\n                                 <Form.Label>From</Form.Label>\n                                 <Form.Control \n                                     as=\"select\"\n                                     name=\"from\" \n                                     defaultValue = {this.state.data.from}\n                                     onChange={handleChange}>\n                                     <option>Select a contact</option>    \n                                     {\n                                  this.state.editSecure ? <option>{name}</option>:  this.state.contacts\n                                     } \n                                 </Form.Control>\n                                 </Form.Group>\n                            </Col>\n                            \n                            <Col>\n                            <Form.Group >\n                                 <Form.Label>To</Form.Label>\n                                 <Form.Control \n                                     as=\"select\"\n                                     name=\"to\" \n                                     defaultValue = {this.state.data.to}\n                                     onChange={handleChange}>\n                                     <option>Select a contact</option>\n                                     {this.state.contacts}\n                                 </Form.Control>\n                                 </Form.Group>\n                            </Col>\n                        </Row>\n                         <Row>\n                             <Col>\n                             <Form.Group controlId=\"date\">\n                                <Form.Label>Time</Form.Label>\n                                <Form.Control \n                                required\n                                type=\"time\" \n                                name=\"time\" \n                                defaultValue = {this.state.data.time}\n                                onChange={handleChange}/>\n                            </Form.Group>\n                             </Col>\n                             <Col>\n                             <Form.Group controlId=\"date\">\n                                <Form.Label>Date</Form.Label>\n                                <Form.Control \n                                required\n                                type=\"date\" \n                                name=\"date\" \n                                defaultValue = {this.state.data.date} \n                                onChange={handleChange}/>\n                            </Form.Group>\n                             </Col>\n                 \n                         </Row>\n                       \n                        <Form.Group controlId=\"subject\">\n                                 <Form.Label>Subject</Form.Label>\n                                 <Form.Control \n                                 name=\"subject\" \n                                 rows=\"3\"\n                                 defaultValue = {this.state.data.subject}\n                                 onChange={handleChange} />\n                             </Form.Group>  \n                     \n                        \n                             <Form.Group controlId=\"body\">\n                                 <Form.Label>Body</Form.Label>\n                                 <Form.Control \n                                 name=\"body\" \n                                 as=\"textarea\" \n                                 rows=\"3\"\n                                 defaultValue = {this.state.data.body}\n                                 onChange={handleChange} />\n                             </Form.Group>\n                        \n                     \n                       </Form>    \n                    \n                        :\n                        null\n                    }\n              </Modal>\n              <Modal\n                  title={this.state.editEmail ? \"Edit email log\" : \"Add a email log\"}\n                  visible={this.state.email}\n                  onOk={()=>this.handleOk(\"email\")}\n                  onCancel={()=>this.handleCancel(\"email\")}\n                  footer={[\n                    <Button  onClick={()=>this.handleCancel(\"email\")}>\n                      Cancel\n                    </Button>,\n                    <Button type=\"primary\" disabled = {this.state.disable} onClick={()=>this.handleOk(\"email\")}>\n                      {this.state.editEmail ? \"Update Log\" : \"Save Log\"}\n                    </Button>,\n                  ]}\n                  >\n                    {           \n          \n                        <Form  \n                        id='myForm'\n                        className=\"form\"\n                        ref={ form => this.messageForm = form }>\n                         <Row>\n                             \n                             <Col>\n                             <Form.Group>\n                               <Form.Label>Matter</Form.Label>\n                                <Form.Control \n                                    as=\"select\"\n                                    name=\"matter\" \n                                    placeholder=\"Matter\"\n                                    onChange={handleChange}>\n                                <option>Select a matter</option>\n                                {this.state.option}\n                                </Form.Control>\n                         </Form.Group>\n                             </Col>\n                         </Row>\n                       \n                        <Row>\n                            <Col >\n                            <Form.Group>\n                                 <Form.Label>From</Form.Label>\n                                 <Form.Control \n                                     as=\"select\"\n                                     name=\"from\" \n                                     placeholder=\"Select a contact\"\n                                     onChange={handleChange}>\n                                <option>Select a contact</option>\n                                {\n                                  this.state.contacts\n                                } \n                         \n                              \n                                 </Form.Control>\n                                 </Form.Group>\n                            </Col>\n                            \n                            <Col>\n                            <Form.Group >\n                                 <Form.Label>To</Form.Label>\n                                 <Form.Control \n                                     as=\"select\"\n                                     name=\"to\" \n                                     placeholder=\"Select a contact\"\n                                     onChange={handleChange}>\n                                     <option>Select a contact</option>\n                                     {this.state.contacts}\n                                 </Form.Control>\n                                 </Form.Group>\n                            </Col>\n                        </Row>\n                         <Row>\n                             <Col>\n                             <Form.Group controlId=\"date\">\n                                <Form.Label>Time</Form.Label>\n                                <Form.Control \n                                required\n                                type=\"time\" \n                                name=\"time\" \n                                placeholder=\"Time\" \n                                onChange={handleChange}/>\n                            </Form.Group>\n                             </Col>\n                             <Col>\n                             <Form.Group controlId=\"date\">\n                                <Form.Label>Date</Form.Label>\n                                <Form.Control \n                                required\n                                type=\"date\" \n                                name=\"date\" \n                                placeholder=\"Date\" \n                                onChange={handleChange}/>\n                            </Form.Group>\n                             </Col>\n                 \n                         </Row>\n                       \n                        <Form.Group controlId=\"subject\">\n                                 <Form.Label>Subject</Form.Label>\n                                 <Form.Control \n                                 name=\"subject\" \n                                 rows=\"3\"\n                                 placeholder=\"subject\"\n                                 onChange={handleChange} />\n                             </Form.Group>  \n                     \n                        \n                             <Form.Group controlId=\"body\">\n                                 <Form.Label>Body</Form.Label>\n                                 <Form.Control \n                                 name=\"body\" \n                                 as=\"textarea\" \n                                 rows=\"3\"\n                                 placeholder=\"body\"\n                                 onChange={handleChange} />\n                             </Form.Group>\n                        \n                     \n                    </Form>    \n                     \n                    }\n              </Modal>\n              <Modal\n                  title={this.state.editPhone ? \"Edit phone log\" : \"Add a phone log\"}\n                  visible={this.state.editPhone}\n                  onOk={()=>this.handleOk(\"phone\")}\n                  onCancel={()=>this.handleCancel(\"phone\")}\n                  footer={[\n                    <Button  onClick={()=>this.handleCancel(\"phone\")}>\n                      Cancel\n                    </Button>,\n                    <Button type=\"primary\" disabled = {this.state.disable} onClick={()=>this.handleOk(\"phone\")}>\n                      {this.state.editPhone ? \"Edit Log\" : \"Save Log\"}\n                    </Button>,\n                  ]}\n                  >\n                  {\n                  \n                    <Form \n                    id='myForm'\n                    className=\"form\"\n                    ref={ form => this.messageForm = form }>\n                     <Row>\n                         <Col>\n                         <Form.Group controlId=\"duration\">\n                            <Form.Label>Duration</Form.Label>\n                            <Form.Control \n                            type=\"text\" \n                            name=\"addTime\" \n                            defaultValue = {this.state.data.addTime}\n                            onChange={handleChange}/>\n                        </Form.Group>\n                         </Col>\n                         <Col>\n                         <Form.Group>\n                     <Form.Label>Matter</Form.Label>\n                            <Form.Control \n                                as=\"select\"\n                                name=\"matter\" \n                                defaultValue = {this.state.data.matter}\n                                onChange={handleChange}>\n                            <option>Select a matter</option>\n                            {this.state.option}\n                            </Form.Control>\n                     </Form.Group>\n                         </Col>\n                     </Row>\n                   \n                    <Row>\n                        <Col >\n                        <Form.Group>\n                             <Form.Label>From</Form.Label>\n                             <Form.Control \n                                 as=\"select\"\n                                 name=\"from\" \n                                 defaultValue = {this.state.data.from}\n                                 onChange={handleChange}>\n                                 <option>Select a contact</option> \n                             {this.state.contacts}\n                             </Form.Control>\n                             </Form.Group>\n                        </Col>\n                        \n                        <Col>\n                        <Form.Group >\n                             <Form.Label>To</Form.Label>\n                             <Form.Control \n                                 as=\"select\"\n                                 name=\"to\" \n                                 defaultValue = {this.state.data.to}\n                                 onChange={handleChange}>\n                                 <option>Select a contact</option>\n                                 {this.state.contacts}\n                             </Form.Control>\n                             </Form.Group>\n                        </Col>\n                    </Row>\n                     <Row>\n                         <Col>\n                         <Form.Group controlId=\"date\">\n                            <Form.Label>Time</Form.Label>\n                            <Form.Control \n                            required\n                            type=\"time\" \n                            name=\"time\" \n                            defaultValue = {this.state.data.time}\n                            onChange={handleChange}/>\n                        </Form.Group>\n                         </Col>\n                         <Col>\n                         <Form.Group controlId=\"date\">\n                            <Form.Label>Date</Form.Label>\n                            <Form.Control \n                            required\n                            type=\"date\" \n                            name=\"date\" \n                            defaultValue = {this.state.data.date} \n                            onChange={handleChange}/>\n                        </Form.Group>\n                         </Col>\n             \n                     </Row>\n                   \n                    <Form.Group controlId=\"subject\">\n                             <Form.Label>Subject</Form.Label>\n                             <Form.Control \n                             name=\"subject\" \n                             rows=\"3\"\n                             defaultValue = {this.state.data.subject}\n                             onChange={handleChange} />\n                         </Form.Group>  \n                 \n                    \n                         <Form.Group controlId=\"body\">\n                             <Form.Label>Body</Form.Label>\n                             <Form.Control \n                             name=\"body\" \n                             as=\"textarea\" \n                             rows=\"3\"\n                             defaultValue = {this.state.data.body}\n                             onChange={handleChange} />\n                         </Form.Group>\n                    \n                 \n                    </Form>    \n                \n                 \n                  }\n                    \n              </Modal>\n              <Modal\n                  title={this.state.editPhone ? \"Edit phone log\" : \"Add a phone log\"}\n                  visible={this.state.phone}\n                  onOk={()=>this.handleOk(\"phone\")}\n                  onCancel={()=>this.handleCancel(\"phone\")}\n                  footer={[\n                    <Button  onClick={()=>this.handleCancel(\"phone\")}>\n                      Cancel\n                    </Button>,\n                    <Button type=\"primary\" disabled = {this.state.disable} onClick={()=>this.handleOk(\"phone\")}>\n                      {this.state.editPhone ? \"Update Log\" : \"Save Log\"}\n                    </Button>,\n                  ]}\n                  >\n                  {\n                   \n                    <Form \n                    id='myForm'\n                               className=\"form\"\n                               ref={ form => this.messageForm = form }>\n                     <Row>\n                         <Col>\n                         <Form.Group controlId=\"duration\">\n                            <Form.Label>Duration</Form.Label>\n                            <Form.Control \n                            type=\"text\" \n                            name=\"addTime\" \n                            placeholder=\"hh:mm:ss\" \n                            onChange={handleChange}/>\n                        </Form.Group>\n                         </Col>\n                         <Col>\n                         <Form.Group>\n                     <Form.Label>Matter</Form.Label>\n                            <Form.Control \n                                as=\"select\"\n                                name=\"matter\" \n                                placeholder=\"Matter\"\n                                onChange={handleChange}>\n                            <option>Select a matter</option>\n                            {this.state.option}\n                            </Form.Control>\n                     </Form.Group>\n                         </Col>\n                     </Row>\n                   \n                    <Row>\n                        <Col >\n                        <Form.Group>\n                             <Form.Label>From</Form.Label>\n                             <Form.Control \n                                 as=\"select\"\n                                 name=\"from\" \n                                 placeholder=\"Select a contact\"\n                                 onChange={handleChange}>\n                            <option>Select a contact</option>     \n                           {this.state.contacts}\n                             </Form.Control>\n                             </Form.Group>\n                        </Col>\n                        \n                        <Col>\n                        <Form.Group >\n                             <Form.Label>To</Form.Label>\n                             <Form.Control \n                                 as=\"select\"\n                                 name=\"to\" \n                                 placeholder=\"Select a contact\"\n                                 onChange={handleChange}>\n                                 <option>Select a contact</option>\n                                 {this.state.contacts}\n                             </Form.Control>\n                             </Form.Group>\n                        </Col>\n                    </Row>\n                     <Row>\n                         <Col>\n                         <Form.Group controlId=\"date\">\n                            <Form.Label>Time</Form.Label>\n                            <Form.Control \n                            required\n                            type=\"time\" \n                            name=\"time\" \n                            placeholder=\"Time\" \n                            onChange={handleChange}/>\n                        </Form.Group>\n                         </Col>\n                         <Col>\n                         <Form.Group controlId=\"date\">\n                            <Form.Label>Date</Form.Label>\n                            <Form.Control \n                            required\n                            type=\"date\" \n                            name=\"date\" \n                            placeholder=\"Date\" \n                            onChange={handleChange}/>\n                        </Form.Group>\n                         </Col>\n             \n                     </Row>\n                   \n                    <Form.Group controlId=\"subject\">\n                             <Form.Label>Subject</Form.Label>\n                             <Form.Control \n                             name=\"subject\" \n                             rows=\"3\"\n                             placeholder=\"subject\"\n                             onChange={handleChange} />\n                         </Form.Group>  \n                 \n                    \n                         <Form.Group controlId=\"body\">\n                             <Form.Label>Body</Form.Label>\n                             <Form.Control \n                             name=\"body\" \n                             as=\"textarea\" \n                             rows=\"3\"\n                             placeholder=\"body\"\n                             onChange={handleChange} />\n                         </Form.Group>\n                    \n                 \n                </Form>    \n                  }\n                    \n              </Modal>\n          </div>\n          \n          </Spin>\n          }\n  }\n  \n  const mapStateToProps = (state) => ({\n    userId: state.user.token.user._id,\n  });\n  \n  export default connect(mapStateToProps)(Communication);\n  ","  import { Tabs } from 'antd';\n  import React, { useEffect } from 'react';\n  import UpcomingTasks from '../../Tasks/UpcomingTasks/upcomingTasks';\n  import CompletedTask from '../../Tasks/CompletedTasks/CompletedTasks';\n  import api from '../../../../resources/api';\n  import { Button, Modal, notification, Popconfirm, message, Space, Spin } from 'antd';\n  import { Form } from 'react-bootstrap';\n  import { connect } from 'react-redux';\n  import jsPDF from 'jspdf';\n  import { Input, Select } from 'antd';\n  import ExportExcel from '../../Tasks/ExcelExport'\n  import ReactDOM from 'react-dom'\n  import { InfoCircleOutlined, UserOutlined } from '@ant-design/icons';\n  \n  \n  import 'jspdf-autotable';\n  let res = {};\n  let response = {};\n  let ListData = null;\n  let options = null;\n  \n  \n  \n  class Tasks extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        visible: false,\n        confirmLoading: false,\n        loading: false,\n        Data: { priority: 'Normal', matter: \"\" },\n        editMode: false,\n        res: '',\n        selected: null,\n        status: false,\n        disable : false,\n        spinning : true,\n        options : [],\n        index: 0\n      };\n    }\n    exportPDF = () => {\n      const unit = 'pt';\n      const size = 'A4'; // Use A1, A2, A3 or A4\n      const orientation = 'portrait'; // portrait or landscape\n      const marginLeft = 40;\n      const doc = new jsPDF(orientation, unit, size);\n      doc.setFontSize(15);\n      const title = 'Tasks';\n      const headers = [\n        ['S.No', 'Task Name', 'Description', 'Matter', 'Due Date'],\n      ];\n      let data = [];\n      let count = 0\n      this.state.tableData.map((val, index) => {\n          const td = [\n            index,\n            val.taskName,\n            val.description,\n            val.matter,\n            val.dueDate.substring(0,10),\n          ];\n          data.push(td);\n       \n      });\n      let content = {\n        startY: 50,\n        head: headers,\n        body: data,\n      };\n      doc.text(title, marginLeft, 40);\n      doc.autoTable(content);\n      doc.save('Tasks.pdf');\n    };\n  \n    cancel(e) {\n      console.log(e);\n      message.error('Canceled');\n    }\n    showModal = () => {\n      this.setState({\n        visible: true,\n      });\n    };\n    openNotificationWithFailure = (type) => {\n      notification[type]({\n        message: 'Failure',\n      });\n    };\n    openNotificationWithSucces = (type) => {\n      notification[type]({\n        message: 'Task Saved',\n      });\n    };\n  \n  \n    handleCancel = () => {\n      ReactDOM.findDOMNode(this.messageForm).reset()\n  \n      this.setState({\n        visible: false,\n        editMode : false,\n        Data: { priority: 'Normal', matter: \"\" },\n      });\n    };\n  \n    handleChange = (e) => {\n      e.persist();\n      let newState = this.state;\n      if (e.target.id === \"matter\" ) {\n      \n        if( e.target.selectedIndex > 0){\n          newState.index = e.target.selectedIndex \n          newState.Data[e.target.id] = e.target.value;\n        }\n        \n      } else {\n        newState.Data[e.target.id] = e.target.value;\n      }\n      this.setState(newState);\n      console.log(this.state);\n    };\n  \n    \n  \n   \n    getISTDate(dateInUTC) {\n      var localDate = new Date(dateInUTC);\n      return localDate.toLocaleString();\n    }\n    handleView = (record) => {\n  \n      delete record.edit\n      delete record.delete\n    \n      this.props.history.push('/tasks/view/list', record)\n    };\n    async componentDidMount() {\n      \n      let tableData = [];\n      let CompletedData = []\n      let upcomingData = []\n      let options = []\n      api\n        .get('/matter/viewforuser/' + this.props.userId)\n        .then((res) =>{\n          response = res.data.data\n          console.log(response);\n          response.map((value, index) => {\n          options.push( <option>{value.matterDescription}</option>)\n     \n        } );\n         \n      });\n      \n      await api.get('/tasks/fetchformatter/' + this.props.id).then((res) => {\n        console.log(res)\n        console.log(this.props.userId)\n        res.data.data.map((value, index)=>{\n          const newdata = value\n          newdata.matter = newdata.matter ? newdata.matter.matterDescription : \"nil\"\n          newdata.matterId = newdata.matter? newdata.matter._id : \"\"\n          newdata.key = index \n          newdata.dueDate = newdata.dueDate ? newdata.dueDate.substring(0,10)  : \"-\"\n          if(value.status == false){\n            \n            upcomingData.push(newdata)\n            tableData.push(newdata)\n          }\n          if(value.status == true){\n  \n            CompletedData.push(newdata)\n          }\n         \n          \n        })\n        this.setState({ \n           CompletedData, \n           tableData,\n           options ,\n           upcomingData,\n          spinning: false\n         });\n        // res.data.data.map((item, index) => {\n        //   tableData = [\n        //     ...tableData,\n        //     {\n        //       ...item,\n        //       key: item._id,\n        //     },\n        //   ];\n        // });\n  /*\n        ListData = res.data.data.map((value, index) => {\n          return (\n            <tr>\n              <th scope=\"row\">{value.dueDate}</th>\n              <td>{value.description}</td>\n              <td>{value.taskName}</td>\n              <td>{value.matter.matterDescription}</td>\n              <td>\n                <Button onClick={() => this.EditHandler(value, index)}>\n                  Edit\n                </Button>\n              </td>\n              <td>\n                <Popconfirm\n                  title=\"Are you sure delete this task?\"\n                  onConfirm={() => this.deleteHandler(value, index)}\n                  onCancel={this.cancel}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                >\n                  <Button danger>Delete</Button>\n                </Popconfirm>\n              </td>\n            </tr>\n          );\n        });*/\n      });\n      \n  \n    }\n  \n    columns = [\n      {\n        title: 'Task Name',\n        dataIndex: 'taskName',\n        key: '1',\n      },\n      {\n        title: 'Description',\n        dataIndex: 'description',\n        key: '2',\n      },\n      /*\n      {\n        title: 'Matter',\n        dataIndex: 'matterDescription',\n        key: '3',\n        render: (_, record) => {\n          // console.log(record);\n          return record.matter;\n        },\n      },\n      */\n      {\n        title: 'Due Date',\n        dataIndex: 'dueDate',\n        key: '3',\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a, b) => a.dueDate.length - b.dueDate.length,\n        \n      },\n      {\n        title: 'Action',\n        dataIndex: 'status',\n        key: '7',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Mark as Complete\"\n              onConfirm={() => this.handelAction(record._id)}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Form.Check type=\"checkbox\"  />\n            </Popconfirm>\n          );\n        },\n      },\n      {\n        title: 'Edit',\n        dataIndex: 'edit',\n        key: '6',\n        render: (_, record) => {\n          return (\n            <Button onClick={() => this.EditHandler(record)}>Edit</Button>\n          );\n        },\n      },\n      {\n        title: 'Delete',\n        dataIndex: 'delete',\n        key: '7',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Are you sure delete this task?\"\n              onConfirm={() => this.deleteHandler(record._id)}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button danger>Delete</Button>\n            </Popconfirm>\n          );\n        },\n      },\n    ];\n    deleteHandler(_id) {\n      api.get('tasks/delete/' + _id).then((res)=>{\n        console.log(res)\n        notification.success({message : \"Task Deleted\"})\n        this.componentDidMount()\n      })\n     \n    }\n    EditHandler(_id) {\n      this.setState({ editMode: true });\n      this.setState({ Data: _id });\n      console.log(this.state.Data)\n      this.setState({ selected: _id });\n    }\n    handleOk = (e) => {\n      e.persist();\n      notification.destroy();\n      let valid = true\n      console.log(this.state.Data.matter)\n      if(this.state.Data.taskName === '' || this.state.Data.taskName === undefined ){\n        valid = false\n        notification.warning({\n          message: 'Please provide a Task Name',\n        });\n      }else\n      if(this.state.Data.description === '' ||this.state.Data.description === undefined  ){\n        valid = false\n        notification.warning({\n          message: 'Please provide a description',\n        });\n      }else\n      if( this.state.Data.dueDate === '' || this.state.Data.dueDate === undefined  ){\n        valid = false\n        notification.warning({\n            message: 'Please select a due date',\n          });\n      }else\n      if( this.state.Data.matter === \"\" || this.state.Data.matter === undefined ){\n        valid = false\n        notification.warning({\n          message: 'Please select a matter',\n        });\n        \n      }else\n      if(valid){\n        this.setState({\n          confirmLoading: true,\n          disable : true\n        });\n        const data = this.state.Data;\n        data.userId = this.props.userId;\n        if(this.state.index != 0){\n          data.matter = response[this.state.index - 1]\n        }else{\n          data.matter = data.matterId\n        }\n        if (this.state.editMode) {\n          api\n            .post('tasks/edit/' + data._id, data)\n            .then((res) => {\n              console.log(res)\n              this.componentDidMount()\n              notification.success({message : \"Task Edited\"})\n            }\n            )\n            .catch(() => {\n              this.openNotificationWithFailure('error');\n            }).then(()=>{\n              this.setState({\n                visible: false,\n                editMode : false,\n                disable : false,\n                index : 0,\n                Data: { priority: 'Normal', matter: \"\" },\n                confirmLoading: false,\n              });\n              ReactDOM.findDOMNode(this.messageForm).reset()\n            })\n        } else {\n          api\n            .post('/tasks/create', data)\n            .then((res) => {\n              console.log(res)\n              this.openNotificationWithSucces('success')\n              \n              this.componentDidMount()\n            })\n            .catch(() => {\n              this.openNotificationWithFailure('error');\n            }).then(()=>{\n              this.setState({\n                visible: false,\n                editMode : false,\n                disable : false,\n                index : 0,\n                Data: { priority: 'Normal', matter: \"\" },\n                confirmLoading: false,\n              });\n              ReactDOM.findDOMNode(this.messageForm).reset()\n            })\n        }\n        \n        \n      }\n        \n    };\n  \n    handelAction = (_id) =>{\n      this.setState({\n        status : true\n      })\n      const data = this.state.status;\n      console.log(data)\n      api.get('/tasks/updatetask/'+_id, data)\n      .then((res) => {\n        this.componentDidMount()\n        notification.success({message : \"Marked as completed\"})\n        console.log(res)\n      })\n      .catch((err) => {\n          console.log(err); \n        });\n     setTimeout(()=>{\n      //window.location.reload()\n     },600)\n    }\n    handelNonAction = (record) =>{\n      const data = record\n      data.status = false\n      console.log(data)\n      api.get('/tasks/setfalse/' + record._id, data)\n      .then((res) => {\n        console.log(res)\n        this.componentDidMount()\n        notification.success({message : \"Unmarked as completed\"})\n      })\n      .catch((err) => {\n          console.log(err); \n        });\n    }\n  \n  \n    newcolumns = [\n      {\n        title: 'Task Name',\n        dataIndex: 'taskName',\n        key: '1',\n      },\n      {\n        title: 'Description',\n        dataIndex: 'description',\n        key: '2',\n      },\n      // {\n      //   title: 'Matter',\n      //   dataIndex: 'matterDescription',\n      //   key: '3',\n      //   render: (_, record) => {\n      //     // console.log(record);\n      //     return record.matter;\n      //   },\n      // },\n      {\n        title: 'Due Date',\n        dataIndex: 'dueDate',\n        key: '3',\n        sortDirections: ['descend', 'ascend'],\n        sorter: (a, b) => a.dueDate.length - b.dueDate.length,\n        \n      },\n      {\n        title: 'Action',\n        dataIndex: 'status',\n        key: '7',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Mark as Incomplete\"\n              onConfirm={() => this.handelNonAction(record)}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Form.Check type=\"checkbox\"  />\n            </Popconfirm>\n          );\n        },\n      },\n      {\n        title: 'Edit',\n        dataIndex: 'edit',\n        key: '6',\n        render: (_, record) => {\n          return (\n            <Button onClick={() => this.EditHandler(record)}>Edit</Button>\n          );\n        },\n      },\n      {\n        title: 'Delete',\n        dataIndex: 'delete',\n        key: '7',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Are you sure delete this task?\"\n              onConfirm={() => this.deleteHandler(record._id)}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button danger>Delete</Button>\n            </Popconfirm>\n          );\n        },\n      },\n    ];\n    \n    render() {\n      console.log(this.state.tableData)\n      const { TabPane } = Tabs;\n      const callback = (key) =>{\n        console.log(key)\n        \n        if(key == 1){\n          console.log(\"Key == 1\")\n          this.setState({\n            tableData : this.state.upcomingData,\n        \n          })\n          console.log(this.state.tableData)\n        }else\n        if(key == 2){\n          console.log(\"Key == 2\")\n          this.setState({\n            tableData : this.state.CompletedData,\n        \n          })\n          console.log(this.state.tableData)\n        }\n        \n        \n      }\n  \n      return (\n        <Spin size=\"large\" spinning={this.state.spinning} >\n          <div>\n            <div className=\"d-flex mb-2 title-component-header\">\n              <div className=\"title-header-name\">\n                <h5>Task</h5>\n              </div>\n              <div className=\"d-flex extra-iteam-div\">\n                  <button\n                      className=\"btn  btn-outline-primary   btn-sm\"\n                      onClick={this.exportPDF}\n                  >\n                      Export to Pdf\n                  </button>\n                  <ExportExcel dataSource={this.state.tableData || []} />\n                  <button\n                      className=\"btn  btn-outline-primary   btn-sm\"\n                      onClick={this.showModal}\n                  >\n                      ADD TASK\n                  </button>\n              </div> \n            </div>\n          <Tabs\n            defaultActiveKey=\"1\"\n            onChange={callback}\n            className=\"card p-4 overflow-auto\"\n          >\n            <TabPane tab=\"Upcoming Tasks\" key=\"1\">\n              <UpcomingTasks\n                columns={this.columns}\n                tableData={this.state.upcomingData}\n              />\n            </TabPane>\n            <TabPane tab=\"Completed Tasks\" key=\"2\">\n              <CompletedTask\n                columns={this.newcolumns}\n                tableData={this.state.CompletedData}\n              />\n            </TabPane>\n      \n          </Tabs>\n          <Modal\n            title=\"Create New Task\"\n            visible={this.state.visible}\n            confirmLoading={this.state.confirmLoading}\n            onCancel={this.handleCancel}\n            onOk={this.handleOk}\n            footer={[\n              <Button  onClick={this.handleCancel}>\n                Cancel\n              </Button>,\n              <Button type=\"primary\" disabled = {this.state.disable} onClick={this.handleOk}>\n                Create Task\n              </Button>,\n            ]}\n          >\n         <Form \n         className=\"form-details\" \n         id='myForm'\n         className=\"form\"\n         ref={ form => this.messageForm = form }\n         >\n          <Form.Group controlId=\"taskName\">\n            <Form.Label>Task Name</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Task Name\"\n              defaultValue={this.state.name}\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n  \n          <Form.Group controlId=\"dueDate\">\n            <Form.Label>Due Date</Form.Label>\n            <Form.Control\n              required\n              type=\"date\"\n              placeholder=\"Due Date\"\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n  \n          <Form.Group controlId=\"description\">\n            <Form.Label>Description</Form.Label>\n            <Form.Control\n              required\n              as=\"textarea\"\n              rows=\"3\"\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n  \n        {/*\n          <Form.Group controlId=\"taskName\">\n            <Form.Label>Assignee</Form.Label>\n            <div>\n              <Input addonBefore={selectBefore} size=\"large\" suffix={<UserOutlined className=\"site-form-item-icon\" />}  placeholder=\"Type a name...\" />\n            </div>\n          </Form.Group>\n        */\n        }\n  \n          <Form.Group controlId=\"priority\">\n            <Form.Label>Priority</Form.Label>\n            <Form.Control\n              as=\"select\"\n              defaultValue=\"Normal\"\n              required\n              onChange={this.handleChange}\n            >\n              <option>Low</option>\n              <option>Normal</option>\n              <option>High</option>\n            </Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"matter\">\n            <Form.Label>Matter</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              onChange={this.handleChange}\n              name=\"matter\"\n            >\n              <option>Select a matter</option>\n              {\n              this.state.options.map((val)=>{\n                  return val\n                })\n                }\n            </Form.Control>\n          </Form.Group>\n          <br />\n          {\n            /*\n              <Form.Group controlId=\"formBasicCheckbox\">\n            <Form.Check type=\"checkbox\" label=\"Notify me when the task is completed\" />\n          </Form.Group>\n          <br />\n          <Form.Group controlId=\"formBasicCheckbox\">\n            <Form.Check type=\"checkbox\" label=\"Notify assignee via email\" />\n          </Form.Group>\n          <br />\n            */\n  \n          }\n         \n        </Form>\n     \n          </Modal>\n          <Modal\n            title=\"Edit task\"\n            visible={this.state.editMode}\n            confirmLoading={this.state.confirmLoading}\n            onCancel={this.handleCancel}\n            onOk={this.handleOk}\n            footer={[\n              <Button  onClick={this.handleCancel}>\n                Cancel\n              </Button>,\n              <Button type=\"primary\" disabled = {this.state.disable} onClick={this.handleOk}>\n                Update Task\n              </Button>,\n            ]}\n          >\n            <Form \n             id='myForm'\n             className=\"form\"\n             ref={ form => this.messageForm = form }\n            className=\"form-details\">\n                    <Form.Group controlId=\"taskName\">\n                      <Form.Label>Task Name</Form.Label>\n                      <Form.Control\n                        required\n                        type=\"text\"\n                        defaultValue={this.state.Data.taskName}\n                        onChange={this.handleChange}\n                      />\n                    </Form.Group>\n  \n                    <Form.Group controlId=\"dueDate\">\n                      <Form.Label>Due Date</Form.Label>\n                      <Form.Control\n                        type=\"date\"\n                        defaultValue={this.state.Data.dueDate ? this.state.Data.dueDate.substring(0,10) : \"\"}\n                        onChange={this.handleChange}\n                      />\n                    </Form.Group>\n  \n                    <Form.Group controlId=\"description\">\n                      <Form.Label>Description</Form.Label>\n                      <Form.Control\n                        required\n                        defaultValue={this.state.Data.description}\n                        as=\"textarea\"\n                        rows=\"3\"\n                        onChange={this.handleChange}\n                      />\n                    </Form.Group>\n                    <Form.Group controlId=\"matter\">\n                              <Form.Label>Matter</Form.Label>\n                              <Form.Control\n                                required\n                                as=\"select\"\n                                value={this.state.Data.matter}\n                                onChange={this.handleChange}\n                                name=\"matter\"\n                              >\n                                <option>Select a matter</option>\n                                {this.state.options.map((val)=>{\n                                return val\n                              })\n                              }\n                              </Form.Control>\n                            </Form.Group>\n  \n                  {\n                    /*\n                      <Form.Group controlId=\"taskName\">\n                      <Form.Label>Assignee</Form.Label>\n                      <div>\n                        <Input addonBefore={selectBefore} size=\"large\" suffix={<UserOutlined className=\"site-form-item-icon\" />}  placeholder=\"Type a name...\" />\n                      </div>\n                    </Form.Group>\n                    */\n                  }\n  \n                    <Form.Group controlId=\"priority\">\n                      <Form.Label>Priority</Form.Label>\n                      <Form.Control\n                        as=\"select\"\n                      \n                        required\n                        defaultValue={this.state.Data.priority}\n                        onChange={this.handleChange}\n                      >\n                        <option>Low</option>\n                        <option>Normal</option>\n                        <option>High</option>\n                      </Form.Control>\n                    </Form.Group>\n                    \n                    <br />\n                    {\n                      /* \n                      <Form.Group controlId=\"formBasicCheckbox\">\n                      <Form.Check type=\"checkbox\" label=\"Notify me when the task is completed\" />\n                    </Form.Group>\n                    <br />\n                    <Form.Group controlId=\"formBasicCheckbox\">\n                      <Form.Check type=\"checkbox\" label=\"Notify assignee via email\" />\n                    </Form.Group>\n                    <br />\n                      */\n                    }\n                  </Form>\n      \n          </Modal>\n        </div>\n      \n        </Spin>\n        );\n    }\n  }\n  \n  const mapStateToProps = (state) => ({\n    userId: state.user.token.user._id,\n  });\n  export default connect(mapStateToProps)(Tasks);\n  ","import React, { Component } from 'react';\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\n\nexport class ExportExcel extends Component {\n  constructor(props) {\n    super(props);\n    console.log('data in excel', props.dataSource);\n  }\n\n  render() {\n    console.log(this.props)\n    return (\n      <div>\n        <table id=\"matter\" className=\"d-none\">\n          <thead>\n            <tr>\n              <th>S.No</th>\n              <th>Qty</th>\n              <th>Description</th>\n              <th>Billable</th>\n              <th>Rate</th>\n              <th>Date</th>\n              <th>Invoice Status</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {this.props.dataSource.map((value, index) => {\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{value.qty}</td>\n                  <td>{value.description}</td>\n                  <th>{value.billable}</th>\n                  <th>{ value.rate }</th>\n                  <th>{value.date}</th>\n                  <th>{value.invoiceStatus}</th>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <ReactHTMLTableToExcel\n          className=\"btn btn-outline-primary btn-sm excel-button\"\n          table=\"matter\"\n          filename=\"Acitivity\"\n          sheet=\"Sheet\"\n          buttonText=\"Export to Excel\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExportExcel;\n","  import React from 'react';\n  import {\n    Table,\n    Button,\n    Modal,\n    Card,\n    notification,\n    Space,\n    Popconfirm,\n    Spin\n  } from 'antd';\n  import { useSelector, connect } from 'react-redux';\n  import ExportExcel from './ExportActivity'\n  import jsPDF from 'jspdf';\n  import 'jspdf-autotable';\n  import { Form, Col, Row } from 'react-bootstrap';\n  import api from '../../../../resources/api';\n  import ReactDOM from 'react-dom'\n  import Timer from '../../../components/Timer/index.js'\n\n  let matters = {};\n  let activity = {};\n  let timeError = '';\n  let option = null\n  class Activity extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        expenseModal: false,\n        timeModal: false,\n        data: {\n          billable: false,\n          qty: '1.0',\n          date: '',\n          rate: '',\n          invoice: 'Unbilled',\n          time: '',\n          matter : \"\",\n          billed : false\n        },\n        loading : true,\n        timeData: [],\n        expenseData: [],\n        completeData: [],\n        tableData: [],\n        editTime: false,\n        EditExpense : false,\n        record: '',\n        touched: true,\n        disabletime : false,\n        disableExpense : false,\n        today :[]\n      };\n    }\n    convertTime = (serverdate) => {\n      var date = new Date(serverdate);\n      // convert to utc time\n      var toutc = date.toUTCString();\n      //convert to local time\n      var locdat = new Date(toutc + ' UTC');\n      return locdat;\n    };\n    \n    setTimer = () => {\n  \n      const time = window.localStorage.getItem('timer');\n      let hours = Math.floor(time / 3600);\n      let minutes = Math.floor(time / 60);\n      let seconds = time % 60\n     \n      if (minutes >= 59) {\n        minutes = minutes % 60;\n      }\n      if (seconds < 10) {\n        seconds = \"0\"+seconds\n      }\n  \n      //   const Seconds = time % 60;\n      const data = this.state.data;\n      data.time = hours + ':' + minutes + ':' + seconds\n      this.setState({ data: data });\n  }\n    componentDidMount() {\n      \n      api.get('/matter/viewforuser/' + this.props.userId).then((res) => {\n        matters = res;\n        option = res.data.data.map((val, index)=>{\n          return <option key={index} value={val.matterDescription}>{val.matterDescription}</option>\n      })\n      }).then(()=>{\n        this.setState({option : option})\n    })\n    api.get('/activity/viewformatter/'+this.props.userId+'/'+ this.props.id).then((res) => {\n      activity = res.data.data;\n        var now = new Date();\n  \n        var end_of_week = new Date(\n          now.getTime() + (6 - now.getDay()) * 24 * 60 * 60 * 1000\n        );\n        end_of_week.setHours(23);\n        end_of_week.setMinutes(59);\n        end_of_week.setSeconds(59);\n  \n       // var start_of_week = new Date(now.setDate(now.getDate() - now.getDay()));\n  \n        let timedata = [];\n        let expenseData = [];\n        let completeData = [];\n        let today = [];\n        let thisWeek = [];\n        let thisMonth = [];\n        let thisYear = [];\n        res.data.data.map((val, index) => {\n          const date = this.convertTime(val.date);\n          let temp = {\n            key: index,\n            type: val.type,\n            id: val._id,\n            qty : val.type === 'time' ? val.time : val.qty,\n            time: val.time ? val.time : '',\n            matter: val.matter ? val.matter : '-',\n            description: val.description ? val.description : '-',\n            rate: val.rate,\n            billable: val.billable ? 'Yes' : 'No',\n            date: val.date.substring(0, 10),\n            invoiceStatus: val.billed ? \"Billed\" : 'Unbilled',\n            //  invoiceStatus :  val.invoiceStatus?  val.invoiceStatus : \"-\" ,\n          };\n          console.log(now)\n          console.log(date)\n          console.log(\"sepeaaot\")\n          if (val.type === 'time') {\n  \n            timedata.push(temp);\n          }\n          if (val.type === 'expense') {\n     \n            expenseData.push(temp);\n          }\n          if (\n            date.getDate() == now.getDate() &&\n            date.getMonth() == now.getMonth() &&\n            date.getFullYear() == now.getFullYear()\n          ) {\n            \n            today.push(temp);\n          }\n          if (date >= now && date <= end_of_week) {\n            // between now and end of week\n            thisWeek.push(temp);\n          }\n          if (\n            date.getFullYear() == now.getFullYear() &&\n            date.getMonth() == now.getMonth()\n          ) {\n            thisMonth.push(temp);\n          }\n          if (date.getFullYear() == now.getFullYear()) {\n            thisYear.push(temp);\n          }\n          completeData.push(temp);\n        });\n        console.log(today)\n        this.setState({\n          completeData: completeData,\n          expenseData: expenseData,\n          timeData: timedata,\n          tableData: completeData,\n          thisWeek: thisWeek,\n          thisMonth: thisMonth,\n          thisYear: thisYear,\n          today: today,\n          loading : false\n        });\n      });\n      \n      this.setTimer()\n    \n    }\n    showModal = (type) => {\n      if (type === 'time') {\n        this.setState({\n          timeModal: true,\n        });\n      } else if (type === 'expense') {\n        this.setState({\n          expenseModal: true,\n        });\n      }\n    };\n  \n    handleOk = (type) => {\n   \n      notification.destroy();\n      if (timeError !== '') {\n        notification.error({ message: 'Invalid time,  Please enter time in the format : HH:MM:SS' });\n      } else if (this.state.data.date === '') {\n        notification.error({ message: 'Please select a Date' });\n      } else if (this.state.data.rate === '') {\n        notification.error({ message: 'Please provide rate' });\n      } else {\n        this.setState({\n          disableExpense : true,\n          disabletime : true\n        })\n        if (this.state.editTime || this.state.EditExpense) {\n          if (type === 'time') {\n            let data = this.state.data;\n            data.type = 'time';\n            data.userId = this.props.userId;\n            api\n              .post('/activity/edit/' + this.state.data.id, data)\n              .then((res) => {\n                this.componentDidMount()\n                this.setState({\n                  disableExpense : false,\n                  disabletime : false,\n                  editTime: false,\n                  EditExpense : false,\n                })\n                notification.success({ message: 'Time entry Edited !' });\n              })\n              .catch((err) => {\n                notification.error({ message: 'Failed' });\n              })\n              .then(() => {\n              \n                ReactDOM.findDOMNode(this.messageForm).reset()\n                this.setState({\n                  timeModal: false,\n                  editmode: false,\n                  data: {\n                    billable: false,\n                    nonBillable: false,\n                    date: '',\n                    qty: '1.0',\n                    rate: '',\n                    invoice: 'Unbilled',\n                  },\n                });\n                console.log(this.state.data)\n                setTimeout(() => {\n                  //window.location.reload();\n                }, 1500);\n              });\n          } else if (type === 'expense') {\n            let data = this.state.data;\n            data.type = 'expense';\n            data.userId = this.props.userId;\n            api\n              .post('/activity/edit/' + this.state.data.id, data)\n              .then((res) => {\n                this.componentDidMount()\n                this.setState({\n                  disableExpense : false,\n                  disabletime : false\n                })\n                notification.success({ message: 'Expense Edited!' });\n              })\n              .catch((err) => {\n                notification.error({ message: 'Failed' });\n              })\n              .then(() => {\n                ReactDOM.findDOMNode(this.messageForm).reset()\n  \n                this.setState({\n                  expenseModal: false,\n                  EditExpense : false,\n                  editmode: false,\n                  data: {\n                    billable: false,\n                    nonBillable: false,\n                    matter : \"\",\n                    date: '',\n                    rate: '',\n                    qty: '1.0',\n                    invoice: 'Unbilled',\n                  },\n                });\n                setTimeout(() => {\n                 // window.location.reload();\n                }, 1500);\n              });\n          }\n        } else {\n          if (type === 'time') {\n            let data = this.state.data;\n            data.type = 'time';\n            data.userId = this.props.userId;\n            api\n              .post('/activity/create', data)\n              .then((res) => {\n                this.componentDidMount()\n                this.setState({\n                  disableExpense : false,\n                  disabletime : false\n                })\n                notification.success({ message: 'Time entry Added !' });\n              })\n              .catch((err) => {\n                notification.error({ message: 'Failed' });\n              })\n              .then(() => {\n                ReactDOM.findDOMNode(this.messageForm).reset()\n                this.setState({\n                  timeModal: false,\n                  editmode: false,\n                  data: {\n                    billable: false,\n                    nonBillable: false,\n                    matter : \"\",\n                    date: '',\n                    qty: '1.0',\n                    rate: '',\n                    invoice: 'Unbilled',\n                  },\n                });\n                setTimeout(() => {\n                  //window.location.reload();\n                }, 1500);\n              });\n          } else if (type === 'expense') {\n            let data = this.state.data;\n            data.type = 'expense';\n            data.userId = this.props.userId;\n            api\n              .post('/activity/create', data)\n              .then((res) => {\n                this.componentDidMount()\n                this.setState({\n                  disableExpense : false,\n                  disabletime : false\n                })\n                notification.success({ message: 'Expense Added !' });\n              })\n              .catch((err) => {\n                notification.error({ message: 'Failed' });\n              })\n              .then(() => {\n                ReactDOM.findDOMNode(this.messageForm).reset()\n                this.setState({\n                  expenseModal: false,\n                  editmode: false,\n                  data: {\n                    billable: false,\n                    nonBillable: false,\n                    date: '',\n                    matter : \"\",\n                    qty: '1.0',\n                    rate: '',\n                    invoice: 'Unbilled',\n                  },\n                });\n                setTimeout(() => {\n                  //window.location.reload();\n                }, 1500);\n              });\n          }\n        }\n      }\n    };\n  \n    handleCancel = (type) => {\n      ReactDOM.findDOMNode(this.messageForm).reset()\n      console.log(\"Handle Cancel\")\n      let newState = this.state\n      newState.data = {\n        billable: false,\n        nonBillable: false,\n        matter : {},\n        date: '',\n        qty: '1.0',\n        rate: '',\n        invoice: 'Unbilled',\n      }\n      this.setState(newState)\n  \n  \n      if (type === 'time') {\n        this.setState({\n          timeModal: false,\n          editTime : false,\n         \n        });\n  \n      } else if (type === 'expense') {\n        this.setState({\n          expenseModal: false,\n          EditExpense: false, \n        });\n        \n      }\n      console.log(this.state.data)\n      this.setTimer()\n      \n    };\n  \n    render() {\n      const handleEdit = (record) => {\n       // ReactDOM.findDOMNode(this.messageForm).reset()\n        let newState = this.state\n        newState.data = record\n        this.setState(newState)\n        if (record.type === 'time') {\n          this.setState({\n            editTime: true,\n     \n          });\n        } else if (record.type === 'expense') {\n          this.setState({\n            EditExpense: true,\n  \n          });\n        }\n        console.log(this.state.data)\n      };\n  \n      const handleDelete = (record) => {\n        api\n          .get('/activity/delete/' + record.id)\n          .then((res) => {\n            this.componentDidMount()\n            notification.success({ message: 'Activity Deleted !' });\n            setTimeout(() => {\n              //window.location.reload();\n            }, 1500);\n          })\n          .catch((err) => {\n            notification.error({ message: 'Failed to delete' });\n          });\n      };\n  \n      const handleDublicate = (record) => {\n  \n        if (record.type === 'time') {\n          record.type = 'time';\n          record.userId = this.props.userId;\n          record.billable = record.billable === \"Yes\" ? true : false\n         \n        } else if (record.type === 'expense') {\n          record.type = 'expense';\n          record.userId = this.props.userId;\n          record.billable = record.billable === \"Yes\" ? true : false       \n        }\n        console.log(record)\n        api\n        .post('/activity/create', record)\n        .then((res) => {\n          this.componentDidMount()\n          this.setState({\n            disableExpense : false,\n            disabletime : false\n          })\n          notification.success({ message: 'Acitivity duplicated !' });\n        })\n        .catch((err) => {\n          notification.error({ message: 'Failed' });\n        })\n        .then(() => {\n      //    ReactDOM.findDOMNode(this.messageForm).reset()\n          this.setState({\n            timeModal: false,\n            editmode: false,\n            data: {\n              billable: false,\n              nonBillable: false,\n              date: '',\n              qty: '1.0',\n              rate: '',\n              invoice: 'Unbilled',\n            },\n          });\n          setTimeout(() => {\n            //window.location.reload();\n          }, 1500);\n        });\n      }\n      const handleReset = ( form ) =>{\n        this.messageForm = form\n      }\n      const columns = [\n        {\n          title: 'Type',\n          dataIndex: 'type',\n          key: 'type',\n        },\n        {\n          title: 'Qty',\n          dataIndex: 'qty',\n          key: 'qty',\n          sortDirections: ['descend', 'ascend'],\n          sorter: (a, b) => a.qty > b.qty,\n        },\n        {\n          title: 'Description',\n          dataIndex: 'description',\n          key: 'description',\n        },\n        {\n          title: 'Rate',\n          dataIndex: 'rate',\n          key: 'rate',\n          sortDirections: ['descend', 'ascend'],\n          sorter: (a, b) => a.rate > b.rate,\n        },\n        {\n          title: 'Billable',\n          dataIndex: 'billable',\n          key: 'billable',\n          filters: [\n            { text: 'Yes', value: 'Yes' },\n            { text: 'No', value: 'No' },\n          ],\n          onFilter: (value, record) => record.billable.includes(value),\n        },\n        {\n          title: 'Date',\n          dataIndex: 'date',\n          key: 'date',\n          sortDirections: ['descend', 'ascend'],\n          sorter: (a, b) => a.date > b.date,\n        },\n        {\n          title: 'Invoice Status',\n          dataIndex: 'invoiceStatus',\n          key: 'invoiceStatus',\n        },\n        {\n          title: 'Edit',\n          dataIndex: 'edit',\n          key: '_id',\n          render: (_, record) => {\n            return (\n              <Button variant=\"danger\" onClick={() => handleEdit(record)}>\n                Edit\n              </Button>\n            );\n          },\n        },\n        {\n          title: 'Duplicate',\n          dataIndex: 'Dublicate',\n          key: '_id',\n          render: (_, record) => {\n            return (\n              <Button onClick={() => handleDublicate(record)}>\n                Duplicate\n              </Button>\n            );\n          },\n        },\n  \n        {\n          title: 'Delete',\n          dataIndex: 'delete',\n          key: '_id',\n          render: (_, record) => {\n            return (\n              <Popconfirm\n                title=\"Are you sure delete this Activity?\"\n                onConfirm={() => handleDelete(record)}\n                okText=\"Yes\"\n                cancelText=\"No\"\n              >\n                <Button danger>Delete</Button>\n              </Popconfirm>\n            );\n          },\n        },\n      ];\n      const exportPDF = () => {\n        const unit = 'pt';\n        const size = 'A4'; // Use A1, A2, A3 or A4\n        const orientation = 'portrait'; // portrait or landscape\n  \n        const marginLeft = 40;\n        const doc = new jsPDF(orientation, unit, size);\n  \n        doc.setFontSize(15);\n  \n        const title = 'Activity';\n        const headers = [\n          [\n            'type',\n            'Qty',\n            'Description',\n            'Billable',\n            'Rate',\n            'Date',\n            'Invoice Status',\n          ],\n        ];\n  \n        let data = [];\n  \n        this.state.tableData.map((val, index) => {\n          const td = [\n            val.type,\n            val.qty,\n            val.description,\n            val.billable,\n            val.rate,\n            val.date,\n            val.invoiceStatus,\n          ];\n          data.push(td);\n        });\n  \n        let content = {\n          startY: 50,\n          head: headers,\n          body: data,\n        };\n  \n        doc.text(title, marginLeft, 40);\n        doc.autoTable(content);\n        doc.save('Activity.pdf');\n      };\n      const handleSorting = (e) => {\n        e.persist();\n        const { value } = e.target;\n  \n        if (value === 'This Week') {\n          this.setState({ tableData: this.state.thisWeek });\n        } else if (value === 'Today') {\n          this.setState({ tableData: this.state.today });\n        } else if (value === 'This month') {\n          this.setState({ tableData: this.state.thisMonth });\n        } else if (value === 'This year') {\n          this.setState({ tableData: this.state.thisYear });\n        } else if (value === 'Sort') {\n          this.setState({ tableData: this.state.completeData });\n        }\n      };\n      const handleCustomSorting = (e) => {\n        e.persist();\n        const { value, name } = e.target;\n        let data = this.state;\n        data[name] = value;\n        this.setState(data);\n      \n        if (this.state.From != undefined && this.state.To != undefined) {\n  \n          let customSort = [];\n          activity.map((val, index) => {\n        \n            const temp = {\n              type: val.type,\n              id: val._id,\n              qty: val.qty,\n              time: val.time ? val.time : '',\n              matter: val.matter ? val.matter : '-',\n              description: val.description ? val.description : '-',\n              rate: val.rate,\n              billable: val.billable ? 'Yes' : 'No',\n              date: val.date.substring(0, 10),\n              invoiceStatus: val.invoiceStatus ? val.invoiceStatus : '-',\n            };\n            if (val.date >= this.state.From && val.date <= this.state.To)\n              customSort.push(temp);\n          });\n          this.setState({ tableData: customSort });\n        }\n      };\n      const handleChange = (e) => {\n        e.persist();\n        this.setState({ touched: false });\n        const { name, id, value, selectedIndex } = e.target;\n        let newData = this.state.data;\n        if (name === 'matter') {\n          if (selectedIndex >= 1) {\n            newData[name] = matters.data.data[selectedIndex - 1];\n          } else {\n            newData[name] = '';\n          }\n        } else if (name === 'time') {\n          timeError = '';\n          var timeValue = value;\n          if (timeValue == '' || timeValue.indexOf(':') < 0) {\n            timeError = 'Inavlid Time';\n            console.log(timeError);\n          } else {\n            var sHours = timeValue.split(':')[0];\n            var sMinutes = timeValue.split(':')[1];\n            var sSecs = timeValue.split(':')[2];\n            console.log(sSecs)\n            if (sHours == '' || isNaN(sHours) /*|| parseInt(sHours)>23 */) {\n              timeError = 'Inavlid Time';\n              console.log(timeError);\n            } else if (parseInt(sHours) == 0) sHours = '00';\n           // else if (parseInt(sHours) < 10) {\n  //            sHours = '0' + sHours};\n  \n            if (sMinutes == '' || isNaN(sMinutes) || parseInt(sMinutes) > 59) {\n              timeError = 'Inavlid Time';\n              console.log(timeError);\n            } else if (parseInt(sMinutes) == 0) sMinutes = '00';\n           // else if (parseInt(sMinutes) < 10) sMinutes = '0' + sMinutes;\n  \n            if (sSecs == '' || isNaN(sSecs) /*|| parseInt(sHours)>23 */) {\n              timeError = 'Inavlid Time';\n              console.log(timeError);\n            } else if (parseInt(sSecs) == 0) sSecs = '00';\n           // else if (sSecs < 10) sSecs = '0' + sSecs;\n            timeValue = sHours + ':' + sMinutes +':' + sSecs;\n          }\n          newData[name] = timeValue;\n          this.setState({ data: newData });\n        } else if (name === 'nonBillable' || name === 'billable') {\n          newData.billable = !newData.billable;\n        } else {\n          newData[name] = value;\n          this.setState({ data: newData });\n        }\n  \n        console.log(this.state);\n      };\n      const setTableData = (type) => {\n        if (type === 'time') {\n          this.setState({\n            tableData: this.state.timeData,\n          });\n        } else if (type === 'expense') {\n          this.setState({\n            tableData: this.state.expenseData,\n          });\n        } else if (type === 'all') {\n          this.setState({\n            tableData: this.state.completeData,\n          });\n        }\n      };\n      return (\n        <Spin size = \"large\" spinning={this.state.loading}>\n          <div>\n          <div className=\"d-flex mb-2 title-component-header\">\n              <div className=\"title-header-name\">\n                <h5>Activities</h5>\n              </div>\n              <div className=\"d-flex extra-iteam-div\">\n                  <button\n                      className=\"btn  btn-outline-primary   btn-sm\"\n                      onClick={exportPDF}\n                  >\n                      Export to Pdf\n                  </button>\n                  <ExportExcel dataSource={this.state.tableData || []} />\n                  <button\n                      className=\" btn  btn-outline-primary   btn-sm\"\n                      onClick={() => this.showModal('time')}\n                  >\n                      New Time Entry\n                  </button>\n                  <button\n                      className=\"btn  btn-outline-primary   btn-sm\"\n                      onClick={() => this.showModal('expense')}\n                  >\n                      New Expense Entry\n                  </button>\n              </div> \n            </div>\n  \n          <Card\n            bodyStyle={{ padding: '14px 10px 0px 10px' }}\n          >\n            <div\n              style={{\n                display: 'flex',\n                'flex-wrap': 'wrap',\n                'justify-content': 'space-between',\n              }}\n            >\n              <div className=\"mb-2\" style={{\"margin-top\": \"1rem\"}}>\n                <Button onClick={() => setTableData('all')}>All</Button>\n                <Button onClick={() => setTableData('time')}>Time</Button>\n                <Button onClick={() => setTableData('expense')}>Expense</Button>\n              </div>\n              <Form className=\"pt-0\">\n                <Form.Row className=\"ml-1 date-activity-res\">\n                  <Form.Group controlId=\"From\" className=\"mr-2\"  style={{ \"display\": \"flex\", \"flex-direction\": \"column\"}}>\n                    <Form.Label style={{ marginBottom : \"0px\" }}>From</Form.Label>\n                    <Form.Control\n                      size=\"sm\"\n                      type=\"date\"\n                      name=\"From\"\n                      onChange={handleCustomSorting}\n                      style={{ width: '175px' }}\n                    />\n                  </Form.Group>\n                  \n                  <Form.Group controlId=\"To\" style={{ \"display\": \"flex\", \"flex-direction\": \"column\"}}>\n                    <Form.Label style={{ marginBottom : \"0px\" }}>To</Form.Label>\n                    <Form.Control\n                      size=\"sm\"\n                      type=\"date\"\n                      name=\"To\"\n                      onChange={handleCustomSorting}\n                      style={{ width: '175px' }}\n                    />\n                  </Form.Group>\n                  <Form.Group controlId=\"sorting\" className=\"short-activity-botton\">\n                    <Form.Control\n                      size=\"sm\"\n                      as=\"select\"\n                      name=\"sorting\"\n                      onChange={handleSorting}\n                      style={{ height: 'fit-content', padding: '4px' }}\n                    >\n                      <option>Sort</option>\n                      <option>Today</option>\n                      <option>This Week</option>\n                      <option>This month</option>\n                      <option>This year</option>\n                    </Form.Control>\n                  </Form.Group>\n                </Form.Row>\n              </Form>\n            </div>\n          </Card>\n          <Card bodyStyle={{ padding: '0px' }} className=\"overflow-auto\">\n            <Table className=\"table-responsive\" columns={columns} dataSource={this.state.tableData} />\n          </Card>\n  \n          <Modal\n            title=\"New Time Entry\"\n            visible={this.state.timeModal}\n            onOk={() => this.handleOk('time')}\n            onCancel={() => this.handleCancel('time')}\n            afterClose={() => this.handleCancel('time')}\n            footer={[\n              <Button  onClick={() => this.handleCancel('time')}>\n                Cancel\n              </Button>,\n              <Button type=\"primary\" \n              disabled = {this.state.disabletime} \n              onClick={() => this.handleOk('time')}>\n                Add Entry\n              </Button>,\n            ]}\n          >\n                <Form \n                id='myForm'\n                className=\"form\"\n                ref={ form => this.messageForm = form } >\n                  <Row>\n                      <Col>\n                          <Form.Group controlId=\"duration\">\n                              <Form.Label>Duration</Form.Label>\n                                <Form.Control \n                                  type=\"text\" \n                                  name=\"time\" \n                                  placeholder=\"hh:mm:ss\" \n                                  defaultValue = {this.state.data.time}\n                                  onChange={handleChange}/>\n                          </Form.Group>\n                      </Col>\n                      <Col className = \"activityTimer\">\n                          <Timer setTimer = {this.setTimer} ></Timer>\n                      </Col>\n                  </Row>\n                  \n                  <Row>\n                      <Col>\n                      <Form.Group controlId=\"matter\">\n                          <Form.Label>Matter</Form.Label>\n                          <Form.Control \n                              as=\"select\"\n                              name=\"matter\" \n                              placeholder=\"Matter\"\n                              onChange={handleChange}>\n                          <option>Select a matter</option>\n                          {this.state.option}\n                          </Form.Control>\n                      </Form.Group>\n                      </Col>\n                      <Col>\n                      <Form.Group controlId=\"rate\">\n                          <Form.Label>Rate</Form.Label>\n                          <Form.Control \n                          required\n                          type=\"number\" \n                          name=\"rate\" \n                          placeholder=\"0.0 /h\"\n                          onChange={handleChange} />\n                      </Form.Group>\n                      </Col>\n  \n                  </Row>\n                \n                      \n                  <Row>\n                      <Col>\n                      <Form.Group controlId=\"Description\">\n                          <Form.Label>Description</Form.Label>\n                          <Form.Control \n                          name=\"description\" \n                          as=\"textarea\" \n                          rows=\"3\"\n                          placeholder=\"Description\"\n                          onChange={handleChange} />\n                      </Form.Group>\n                      </Col>\n  \n                  </Row>\n                \n                  <Row>\n                      <Col>\n                      <Form.Group controlId=\"date\">\n                          <Form.Label>Date</Form.Label>\n                          <Form.Control \n                          required\n                          type=\"date\" \n                          name=\"date\" \n                          placeholder=\"Date\" \n                          onChange={handleChange}/>\n                      </Form.Group>\n                      </Col>\n                      {\n                          /* \n                          <Col>\n                      <Form.Group controlId=\"invoiceStatus\">\n                          <Form.Label>Invoice Status</Form.Label>\n                          <Form.Control \n                              as=\"select\"\n                              name=\"invoiceStatus\"\n                              onChange={handleChange} >\n                          <option>Unbilled</option>\n                          <option>Billed</option>\n                          </Form.Control>\n                      </Form.Group>\n                      </Col>\n                          */\n                      }\n                  </Row>\n                      \n                      <Row>\n                          <Col>\n                          <Form.Check \n                        type=\"checkbox\"\n                        id=\"billable\"\n                        name=\"billable\"\n                        label=\"Billable\"\n                      \n                        onChange={handleChange}\n                    /><br></br>\n                          </Col>\n                      </Row>\n              \n                      {\n                          /*\n                          <Form.Check \n                        type=\"checkbox\"\n                        id=\"nonBillable\"\n                        name=\"nonBillable\"\n                        label=\"Non-billable\"\n                        defaultChecked = {!this.props.record.billable}\n                        onChange={handleChange}\n                    />\n                          */\n                      }\n              </Form>\n  \n          </Modal>\n          <Modal\n            title=\"Edit Time Entry\"\n            visible={this.state.editTime}\n            onOk={() => this.handleOk('time')}\n            onCancel={() => this.handleCancel('time')}\n            afterClose={() => this.handleCancel('time')}\n            footer={[\n              <Button  onClick={() => this.handleCancel('time')}>\n                Cancel\n              </Button>,\n              <Button type=\"primary\" disabled = {this.state.disabletime} onClick={() => this.handleOk('time')}>\n                Update Entry\n              </Button>,\n            ]}\n          >\n            <Form \n            id='myForm'\n            className=\"form\"\n            ref={ form => this.messageForm = form }>\n              <Row>\n                  <Col>\n                  <Form.Group controlId=\"duration\">\n                      <Form.Label>Duration</Form.Label>\n                      <Form.Control \n                      type=\"text\" \n                      name=\"time\" \n                      defaultValue = {this.state.data.time}\n                      onChange={handleChange}/>\n                  </Form.Group>\n                  </Col>\n                  <Col className = \"activityTimer\" >\n                      <Timer setTimer = {this.setTimer} ></Timer>\n                  </Col>\n              </Row>\n              \n              <Row>\n                  <Col>\n                      <Form.Group controlId=\"matter\">\n                                      <Form.Label>Matter</Form.Label>\n                                      <Form.Control \n                                          as=\"select\"\n                                          name=\"matter\" \n                                          value = {this.state.data.matter ? this.state.data.matter.matterDescription : \"\"}\n  \n                                          onChange={handleChange}>\n                                      <option>Select a matter</option>\n                                      {this.state.option}\n                                      </Form.Control>\n                                  </Form.Group>\n                  </Col>\n                  <Col>\n                  <Form.Group controlId=\"rate\">\n                      <Form.Label>Rate</Form.Label>\n                      <Form.Control \n                      required\n                      type=\"number\" \n                      name=\"rate\" \n                      defaultValue = {this.state.data.rate}\n                      onChange={handleChange} />\n                  </Form.Group>\n                  </Col>\n  \n              </Row>\n              \n                  \n              <Row>\n                  <Col>\n                  <Form.Group controlId=\"Description\">\n                      <Form.Label>Description</Form.Label>\n                      <Form.Control \n                      name=\"description\" \n                      as=\"textarea\" \n                      rows=\"3\"\n                      defaultValue = {this.state.data.description}\n                      onChange={handleChange} />\n                  </Form.Group>\n                  </Col>\n  \n              </Row>\n              \n              <Row>\n                  \n                  <Col>\n                  <Form.Group controlId=\"date\">\n                      <Form.Label>Date</Form.Label>\n                      <Form.Control \n                      required\n                      type=\"date\" \n                      name=\"date\" \n                      defaultValue = {this.state.data.date}\n                      onChange={handleChange}/>\n                  </Form.Group>\n                  </Col>\n                  \n                  \n              </Row>\n                  \n                  <Row>\n                      <Col>\n                      <Form.Check \n                      type=\"checkbox\"\n                      id=\"billable\"\n                      name=\"billable\"\n                      label=\"Billable\"\n                      defaultChecked = {this.state.data.billable===\"Yes\"? true : false}\n                      onChange={handleChange}\n                  /><br></br>\n                      </Col>\n                  </Row>\n          </Form>\n  \n            \n          </Modal>\n          <Modal\n            title=\"New Expense\"\n            visible={this.state.expenseModal}\n            onOk={() => this.handleOk('expense')}\n            onCancel={() => this.handleCancel('expense')}\n            afterClose={() => this.handleCancel('expense')}\n            footer={[\n              <Button  onClick={() => this.handleCancel('expense')}>\n                Cancel\n              </Button>,\n              <Button type=\"primary\" disabled = {this.state.disableExpense} onClick={() => this.handleOk('expense')}>\n                Add Entry\n              </Button>\n            ]}\n          >\n              <Form \n                id='myForm'\n                className=\"form\"\n                ref={ form => this.messageForm = form } >\n                  <Row>\n                      <Col>\n                          <Form.Group controlId=\"quantity\">\n                              <Form.Label>Quantity</Form.Label>\n                              <Form.Control \n                              type=\"number\" \n                              name=\"qty\" \n                              placeholder=\"1.0\"\n                              onChange={handleChange}/>\n                          </Form.Group>\n                      </Col>\n                      <Col>\n                          <Form.Group controlId=\"matter\">\n                              <Form.Label>Matter</Form.Label>\n                              <Form.Control \n                                  as=\"select\"\n                                  name=\"matter\" \n                                  placeholder=\"Matter\"\n                                  onChange={handleChange}>\n                              <option>Select a matter</option>\n                              {this.state.option}\n                              </Form.Control>\n                          </Form.Group>\n                      </Col>\n                  </Row>\n                  <Row>\n                      <Col>\n                          <Form.Group controlId=\"Description\">\n                              <Form.Label>Description</Form.Label>\n                              <Form.Control \n                              name=\"description\" \n                              as=\"textarea\" \n                              rows=\"3\"\n                              placeholder=\"Description\"\n                              onChange={handleChange} />\n                          </Form.Group>\n                      </Col>\n                  </Row>\n                  \n                  <Row>\n                      <Col>\n                          <Form.Group controlId=\"rate\">\n                              <Form.Label>Rate</Form.Label>\n                              <Form.Control \n                              required\n                              type=\"number\" \n                              name=\"rate\" \n                              placeholder=\"0.0 /h\"\n                              onChange={handleChange} />\n                          </Form.Group>\n                      </Col>\n                      <Col>\n                          <Form.Group controlId=\"date\">\n                              <Form.Label>Date</Form.Label>\n                              <Form.Control \n                              required\n                              type=\"date\" \n                              name=\"date\" \n                              placeholder=\"Date\" \n                              onChange={handleChange}/>\n                          </Form.Group>\n                      </Col>\n                  </Row>\n                  \n                      {\n                          /*\n                              <Form.Group controlId=\"invoiceStatus\">\n                      <Form.Label>Invoice Status</Form.Label>\n                      <Form.Control \n                          as=\"select\"\n                          name=\"invoiceStatus\"\n                          onChange={handleChange} >\n                      <option>Unbilled</option>\n                      <option>Billed</option>\n                      </Form.Control>\n                  </Form.Group>\n                          */\n                      }\n                \n                  \n                \n                  <Form.Check \n                        type=\"checkbox\"\n                        id=\"billable\"\n                        name=\"billable\"\n                        label=\"Billable\"\n                        onChange={handleChange}\n                    /><br></br>\n              \n                      {\n                          /*\n                          <Form.Check \n                        type=\"checkbox\"\n                        id=\"nonBillable\"\n                        name=\"nonBillable\"\n                        label=\"Non-billable\"\n                        defaultChecked = {!this.props.record.billable}\n                        onChange={handleChange}\n                    />\n                          */\n                      }\n                    \n  \n            </Form>\n  \n          </Modal>\n          <Modal\n            title=\"Edit Expense\"\n            visible={this.state.EditExpense}\n            onOk={() => this.handleOk('expense')}\n            onCancel={() => this.handleCancel('expense')}\n            afterClose={() => this.handleCancel('expense')}\n            footer={[\n              <Button  onClick={() => this.handleCancel('expense')}>\n                Cancel\n              </Button>,\n              <Button type=\"primary\" disabled = {this.state.disableExpense} onClick={() => this.handleOk('expense')}>\n                Update Entry\n              </Button>,\n            ]}\n          >\n            <Form  id='myForm'\n            className=\"form\"\n            ref={ form => this.messageForm = form }>\n          <Row>\n              <Col>\n                  <Form.Group controlId=\"quantity\">\n                      <Form.Label>Quantity</Form.Label>\n                      <Form.Control \n                      type=\"number\" \n                      name=\"qty\" \n                      defaultValue = {this.state.data.qty}\n                      onChange={handleChange}/>\n                  </Form.Group>\n              </Col>\n              <Col>\n              <Form.Group controlId=\"matter\">\n                                      <Form.Label>Matter</Form.Label>\n                                      <Form.Control \n                                          as=\"select\"\n                                          name=\"matter\" \n                                          value = {this.state.data.matter ? this.state.data.matter.matterDescription : \"\"}\n                                          onChange={handleChange}>\n                                      <option>Select a matter</option>\n                                      {this.state.option}\n                                      </Form.Control>\n                                  </Form.Group>\n              </Col>\n      </Row>\n      <Row>\n          <Col>\n          <Form.Group controlId=\"Description\">\n                  <Form.Label>Description</Form.Label>\n                  <Form.Control \n                  name=\"description\" \n                  as=\"textarea\" \n                  rows=\"3\"\n                  defaultValue = {this.state.data.description}\n                  onChange={handleChange} />\n              </Form.Group>\n          </Col>\n      </Row>\n      <Row>\n          <Col>\n              <Form.Group controlId=\"date\">\n                  <Form.Label>Date</Form.Label>\n                  <Form.Control \n                  required\n                  type=\"date\" \n                  name=\"date\" \n                  defaultValue = {this.state.data.date}\n                  onChange={handleChange}/>\n              </Form.Group>\n          </Col>\n          <Col>\n              <Form.Group controlId=\"rate\">\n                  <Form.Label>Rate</Form.Label>\n                  <Form.Control \n                  required\n                  type=\"number\" \n                  name=\"rate\" \n                  defaultValue = {this.state.data.rate}\n                  onChange={handleChange} />\n              </Form.Group>\n          </Col>\n      </Row>\n             <Form.Check \n                 type=\"checkbox\"\n                 id=\"billable\"\n                 name=\"billable\"\n                 label=\"Billable\"\n                 defaultChecked = {this.state.data.billable===\"Yes\"? true : false}\n                 onChange={handleChange}\n             /><br></br>\n      \n            \n            \n      \n      </Form>\n      \n          </Modal>\n        </div>\n     \n        </Spin>\n         );\n    }\n  }\n  \n  const mapStateToProps = (state) => ({\n    userId: state.user.token.user._id,\n  });\n  \n  export default connect(mapStateToProps)(Activity);\n  ","import React from 'react';\nimport { Tabs, Card, Table, Button, Popconfirm, message, notification, Spin } from 'antd';\nimport { Form } from 'react-bootstrap';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport api from '../../../../resources/api';\nimport { connect } from 'react-redux'\nimport ExportExcel from '../../Billings/ExcelExport'\nconst { TabPane } = Tabs;\n\nclass billing extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      tableData : [],\n      draftBills : [],\n      unpaidBills : [],\n      paidBills : [],\n      status : false,\n      loading : true\n    }\n  }\n  handelBills = (type) => {\n    if (type === 'record') {\n      this.props.history.push('/manage/billing/record');\n    }\n  };\n\n  cancel(e) {\n    message.error('Canceled');\n  }\n\n  \n\n  componentDidMount(){\n   \n    api.get('/billing/bill/viewforuser/' + this.props.userId + '/' + this.props.matterId).then((res)=>{\n      console.log(res.data.data)\n      let tableData = []\n      let paidBills = []\n      let unpaidBills = []\n      let draftBills = []\n      res.data.data.map((value , index)=>{\n     \n    //    const issueDate = today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear()\n        const temp = {\n          key : index ,\n          _id : value._id,\n          lastSeen : value.lastSeen ? value.lastSeen.substring(0,10) : \"-\",\n          status : value.status,\n          dueDate : value.dueDate.substring(0,10),\n          id : value.invoiceId ? value.invoiceId : '-' ,\n          client : value.client ? value.client.firstName + \" \" + value.client.lastName : \"-\",\n          matter : value.matter ? value.matter.matterDescription : \"-\",\n          issueDate : value.issueDate.substring(0,10) ,\n          balance : parseFloat(value.balance).toFixed('2')\n        }\n        if(value.status==\"Paid\"){\n          paidBills.push(temp)\n        }\n        if(value.status==\"Unpaid\"){\n          unpaidBills.push(temp)\n        }\n        if(value.status==\"draft\"){\n          draftBills.push(temp)\n        }\n        tableData.push(temp)\n      })\n      this.setState({\n        tableData :  tableData,\n         paidBills : paidBills ,\n          unpaidBills : unpaidBills,\n           draftBills: draftBills,\n            loading : false})\n    })\n  }\n\n  render() {\n    const callback = () => {};\n    const handelAction = (record, type) => {\n      const data = record\n      delete data.matter\n      delete data.client\n      if(type === \"fromDraft\"){\n        data.status = \"Unpaid\"\n        \n      }else\n      if(type === \"fromUnpaid\"){\n        data.status = \"Paid\"\n      }\n      api.post('/billing/bill/edit/'+record._id , data).then((res)=>{\n        console.log(res)\n        if(type==\"fromDraft\"){\n          const newState = this.state\n          newState.draftBills.splice(record.key, 1)\n          newState.unpaidBills.push(res.data.data)\n        }\n        if(type==\"fromUnpaid\"){\n          const newState = this.state\n          newState.unpaidBills.splice(record.key, 1)\n          newState.paidBills.push(res.data.data)\n        }\n\n        notification.success({message : \"Success\"})\n        setTimeout(()=>{\n        //  window.location.reload()\n          this.componentDidMount()\n        },1000)\n\n      }).catch((err)=>{\n        console.log(err)\n        notification.error(\"Failed\")\n      })\n      \n    }\n    const handleDelete = (record) => {\n      api\n        .get('/billing/bill/delete/' + record._id)\n        .then((res) => {\n          console.log(res)\n          this.componentDidMount()\n          notification.success({ message: 'Bills Deleted !' });\n          setTimeout(() => {\n            //window.location.reload();\n          }, 1500);\n        })\n        .catch((err) => {\n          notification.error({ message: 'Failed to delete' });\n        });\n    };\n\n    const columnsforDraft = [\n      {\n        title: 'Action',\n        dataIndex: 'action',\n        key: 'action',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Approve this draft bill\"\n              onConfirm={() => handelAction(record, \"fromDraft\")}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Form.Check type=\"checkbox\"  />\n            </Popconfirm>\n          );\n        },\n      },\n      {\n        title: 'Last Seen',\n        dataIndex: 'lastSeen',\n        key: 'lastSeen',\n      },\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n      },\n      {\n        title: 'Due Date',\n        dataIndex: 'dueDate',\n        key: 'dueDate',\n      },\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n      },\n      {\n        title: 'Client',\n        dataIndex: 'client',\n        key: 'client',\n      },\n      {\n        title: 'Matter',\n        dataIndex: 'matter',\n        key: 'matter',\n      },\n      {\n        title: 'Issue Date',\n        dataIndex: 'issueDate',\n        key: 'issueDate',\n      },\n      {\n        title: 'Balance',\n        dataIndex: 'balance',\n        key: 'balance',\n      },\n      {\n        title: 'Delete',\n        dataIndex: 'Delete',\n        key: 'Delete',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Are you sure you want to delete this bill ?\"\n              onConfirm={() => handleDelete(record)}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button danger>\n                Delete\n              </Button>\n            </Popconfirm>\n          );\n        },\n      }\n    ];\n\n    const unpaidColumns= [\n      {\n        title: 'Action',\n        dataIndex: 'action',\n        key: 'action',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Mark as Paid\"\n              onConfirm={() => handelAction(record, \"fromUnpaid\")}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Form.Check type=\"checkbox\"  />\n            </Popconfirm>\n          );\n        },\n      },\n     \n      {\n        title: 'Last Seen',\n        dataIndex: 'lastSeen',\n        key: 'lastSeen',\n      },\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n      },\n      {\n        title: 'Due Date',\n        dataIndex: 'dueDate',\n        key: 'dueDate',\n      },\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n      },\n      {\n        title: 'Client',\n        dataIndex: 'client',\n        key: 'client',\n      },\n      {\n        title: 'Matter',\n        dataIndex: 'matter',\n        key: 'matter',\n      },\n      {\n        title: 'Issue Date',\n        dataIndex: 'issueDate',\n        key: 'issueDate',\n      },\n      {\n        title: 'Balance',\n        dataIndex: 'balance',\n        key: 'balance',\n      },\n      {\n        title: 'Delete',\n        dataIndex: 'Delete',\n        key: 'Delete',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Are you sure you want to delete this bill ?\"\n              onConfirm={() => handleDelete(record)}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button danger>\n                Delete\n              </Button>\n            </Popconfirm>\n          );\n        },\n      }\n     \n    ];\n    const paidColumns= [\n      \n      {\n        title: 'Last Seen',\n        dataIndex: 'lastSeen',\n        key: 'lastSeen',\n      },\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n      },\n      {\n        title: 'Due Date',\n        dataIndex: 'dueDate',\n        key: 'dueDate',\n      },\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n      },\n      {\n        title: 'Client',\n        dataIndex: 'client',\n        key: 'client',\n      },\n      {\n        title: 'Matter',\n        dataIndex: 'matter',\n        key: 'matter',\n      },\n      {\n        title: 'Issue Date',\n        dataIndex: 'issueDate',\n        key: 'issueDate',\n      },\n      {\n        title: 'Balance',\n        dataIndex: 'balance',\n        key: 'balance',\n      },\n      {\n        title: 'Delete',\n        dataIndex: 'Delete',\n        key: 'Delete',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Are you sure you want to delete this bill ?\"\n              onConfirm={() => handleDelete(record)}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button danger>\n                Delete\n              </Button>\n            </Popconfirm>\n          );\n        },\n      }\n     \n    ];\n\n\n    const exportPDF = () => {\n      const unit = 'pt';\n      const size = 'A4'; // Use A1, A2, A3 or A4\n      const orientation = 'portrait'; // portrait or landscape\n\n      const marginLeft = 40;\n      const doc = new jsPDF(orientation, unit, size);\n\n      doc.setFontSize(15);\n\n      const title = 'Bills';\n      const headers = [\n        [\n          'Last Seen',\n          'Status',\n          'Due Date',\n          'ID',\n          'Client',\n          'Matter',\n          'Issue Date',\n          'Balance',\n        ],\n      ];\n    \n      let data = []\n            this.state.tableData.map((val, index)=>{\n              const td= [val.lastSeen, val.status , val.dueDate , val.id ,val.client , val.matter , val.issueDate , val.balance]\n              data.push(td)\n            })\n     \n\n      let content = {\n        startY: 50,\n        head: headers,\n        body: data,\n      };\n\n      doc.text(title, marginLeft, 40);\n      doc.autoTable(content);\n      doc.save('Bill.pdf');\n    };\n\n    return (\n      <Spin size= \"large\" spinning = {this.state.loading}>\n        <div className=\"p-2 \">\n          <div className=\"d-flex mb-2 title-component-header\">\n              <div className=\"title-header-name\">\n                <h5>Billing</h5>\n              </div>\n              <div className=\"d-flex extra-iteam-div\">\n                <button\n                    className=\"btn  btn-outline-primary   btn-sm\"\n                    onClick={exportPDF}\n                >\n                    Export to Pdf\n                </button>\n                <ExportExcel dataSource={this.state.tableData || []} />\n                <button\n                    className=\"btn  btn-outline-primary   btn-sm\"\n                    onClick={this.props.handleRecordPayment}\n                >\n                    Record Payment\n                </button>\n                <button\n                    className=\"btn  btn-outline-primary   btn-sm\"\n                    onClick={this.props.handleBills}\n                >\n                    New Bills\n                </button>\n            </div> \n            </div>\n        <Card\n        >\n          <Tabs defaultActiveKey=\"4\" onChange={callback}>\n         \n            <TabPane tab=\"Draft\" key=\"1\">\n              <Table className=\"table-responsive\" dataSource={this.state.draftBills} columns={columnsforDraft} />\n            </TabPane>\n          \n           <TabPane tab=\"All\" key=\"4\">\n              <Table className=\"table-responsive\" dataSource={this.state.tableData} columns={paidColumns} />\n            </TabPane>\n            <TabPane tab=\"Unpaid\" key=\"3\">\n              <Table className=\"table-responsive\" dataSource={this.state.unpaidBills} columns={unpaidColumns} />\n            </TabPane>\n            <TabPane tab=\"Paid\" key=\"2\">\n              <Table className=\"table-responsive\" dataSource={this.state.paidBills} columns={paidColumns} />\n            </TabPane>\n          </Tabs>\n        </Card>\n      </div>\n    \n      </Spin>\n      );\n  }\n}\n\nconst mapStateToProps = state => ({\n  userId: state.user.token.user._id\n});\n\nexport default connect(mapStateToProps)(billing)","import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  Button,\n  Table,\n  notification,\n  Modal,\n  Input,\n  Form,\n  Select,\n  Popconfirm,\n  Spin,\n  Tabs,\n  Menu,\n  Dropdown,\n  Space\n} from 'antd';\nimport { DownOutlined , FolderTwoTone, DownloadOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport { SearchOutlined } from '@ant-design/icons';\nimport Highlighter from 'react-highlight-words';\nimport api from '../../../../resources/api';\nimport { findLast } from 'lodash';\nconst { Option } = Select;\nconst { TabPane } = Tabs;\n\n//matters={props.location.state.matters}\n// userId={props.location.state.userId}\n// matterId={props.location.state.id}\n\nconst Documents = (props) => {\n  \n  const [docs, setDocs] = useState([]);\n  const userId = useSelector((state) => state.user.token.user._id);\n\n  const [FolderModal, setFolderModal] = useState(false)\n  const [FolderTable, setFolderTable] = useState([])\n  const [FolderData, setFolderData] = useState({\n    name : \"\",\n    userId : \"\",\n    documents : []\n  })\n  const [TemplateTable, setTemplateTable] = useState([])\n  const [TemplateModal, setTemplateModal] = useState(false)\n  const [TemplateData, setTemplateData] = useState({\n      name : \"\",\n      userId : userId,\n      document : \"\",\n      category : \"\"\n  })\n  const [Disable, setDisable] = useState(false)\n  const [viewUpload, setViewUpload] = useState(false);\n  const [tabFor, settabFor] = useState(\"Document\")\n  const [Loading, setLoading] = useState(true)\n\n  const [CatagoryData, setCatagoryData] = useState({\n    name : '',\n    userId : userId\n  })\n  const [tempDocxModal, settempDocxModal] = useState(false)\n  const [tempDocx, settempDocx] = useState({\n    document: '',\n    _id: '',\n    name: '',\n    matter: '',\n    contact: '',\n    category: '',\n    userId : userId\n  });\n  const [CatagoryTable, setCatagoryTable] = useState([])\n  const [cataoryModal, setcataoryModal] = useState(false)\n  const [uploadData, setUploadData] = useState({\n    document: '',\n    _id: '',\n    name: '',\n    matter: '',\n    contact: '',\n    category: '',\n  });\n  const [modalFor, setModalFor] = useState('Upload');\n  const [matters, setMatters] = useState([]);\n  const [Category, setCategory] = useState([])\n  const [value, setValue] = useState('');\n  const [dataSrc, setDataSrc] = useState([]);\n  const [showNameInput, setShowNameInput] = useState(false);\n  const [foldervalue, setfolderValue] = useState('');\n  const [folderdataSrc, setfolderDataSrc] = useState([]);\n  const [showfolderNameInput, setShowfolderNameInput] = useState(false);\n  //funtions for document\n  const FilterByNameInput = (\n    <div>\n      <SearchOutlined\n      style={{\"vertical-align\": \"revert\"}}\n        onClick={() => {\n          var dump =\n            showNameInput === false\n              ? setShowNameInput(true)\n              : setShowNameInput(false);\n        }}\n      />\n      <span style={{paddingLeft : \"8px\"}}> Name </span>\n\n      {showNameInput && (\n        <div style={{paddingTop : \"10px\"}}>\n          <input\n            placeholder=\"Search\"\n            value={value}\n            onChange={(e) => {\n              let filteredData;\n              setValue(e.target.value);\n              if (e.target.value.length !== 0 || e.target.value === '') {\n                filteredData = docs.filter((item) =>\n                  item.name\n                    .toLowerCase()\n                    .includes(e.target.value.toLowerCase())\n                );\n                setDataSrc(filteredData);\n              } else {\n                setDataSrc(docs);\n              }\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n  const columnsForDocuments = [\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      key: '0',\n    },\n    \n    {\n      title: FilterByNameInput,\n      dataIndex: 'name',\n      key: '1',\n      render: (text) => (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0}}\n          searchWords={[value]}\n          autoEscape\n          textToHighlight={text ? text.toString() : ''}\n        />\n      ),\n    },\n    {\n      title: 'Matter',\n      dataIndex: 'matter',\n      key: '2',\n    },\n    {\n      title: 'Category',\n      dataIndex: 'category',\n      key: '3',\n    },\n    {\n      title: 'Received Date',\n      dataIndex: 'receivedDate',\n      key: '4',\n      sortDirections: ['descend', 'ascend'],\n      sorter: (a, b) => a.receivedDate > b.receivedDate,\n    },\n    {\n      title: 'Last Edit',\n      dataIndex: 'lastEdit',\n      key: '5',\n      sortDirections: ['descend', 'ascend'],\n      sorter: (a, b) => a.lastEdit > b.lastEdit,\n    },\n\n    {\n      title: 'Edit',\n      dataIndex: 'edit',\n      key: '6',\n      render: (_, record) => {\n        return (\n          <Button\n            className=\"btn-outline-info \"\n            onClick={() => {\n              editHandler(record._id);\n            }}\n          >\n            Edit\n          </Button>\n        );\n      },\n    },\n    {\n      title: 'Delete',\n      dataIndex: 'delete',\n      key: '7',\n      render: (_, record) => {\n        return (\n          <Popconfirm\n                    title=\"Are you sure delete this Document?\"\n                    onConfirm={()=>deleteHandler(record._id)}\n                    onCancel={()=>{}}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button\n                      className=\" btn-outline-danger \"\n                    >\n                      Delete\n                    </Button>\n                  </Popconfirm>\n          \n        );\n      },\n    },\n    {\n      title: 'Download',\n      dataIndex: 'download',\n      key: '8',\n      render: (_, record) => {\n        return (\n          <Button\n            className=\"btn-outline-primary \"\n            onClick={() => {\n              downloadHandler(record);\n            }}\n            icon={<DownloadOutlined />}\n          >\n            Download\n          </Button>\n        );\n      },\n    },\n  ];\n  const handleInput = (item) => (e) => {\n\n    console.log(item)\n    console.log(e)\n    if (item === 'document') {\n      e.persist()\n      setUploadData({ ...uploadData, document: e.target.files[0] });\n     \n    } else\n    if(item === \"category\"){\n      uploadData[`${item}`] = e;\n      setUploadData({ ...uploadData });\n    }\n    else {\n      if (item === 'matter') {\n        if(modalFor === \"Upload\"){\n          console.log(\"from the uploads\")\n          uploadData[`${item}`] = e;\n          setUploadData({ ...uploadData });\n          getMatterById(e);\n        }else{\n          console.log(\"from the edits\")\n          api.get(`/matter/view/${e}`).then((res) => {\n            uploadData[`${item}`] = res.data.data ;\n            setUploadData({ ...uploadData });\n            getMatterById(e);\n            });\n        }\n      } else {\n        uploadData[`${item}`] = e.target.value;\n        setUploadData({ ...uploadData });\n      }\n    }\n    console.log(uploadData)\n    \n  };\n\n  const handleViaTemplate = (item) => (e) => {\n    console.log(item)\n    console.log(e)\n    if(item === \"category\" || item ===\"document\"){\n      tempDocx[`${item}`] = e;\n      settempDocx({ ...tempDocx });\n    }else\n    if(item === \"category\" || item ===\"document\"){\n      tempDocx[`${item}`] = e;\n      settempDocx({ ...tempDocx });\n    }\n    else {\n      if (item === 'matter') {\n        if(modalFor === \"Upload\"){\n          console.log(\"from the uploads\")\n          tempDocx[`${item}`] = e;\n          settempDocx({ ...tempDocx });\n          getMatterById(e);\n        }else{\n          console.log(\"from the edits\")\n          api.get(`/matter/view/${e}`).then((res) => {\n            tempDocx[`${item}`] = res.data.data ;\n            settempDocx({ ...tempDocx });\n            getMatterById(e);\n            });\n        }\n      } else {\n        tempDocx[`${item}`] = e.target.value;\n        settempDocx({ ...tempDocx });\n      }\n    }\n    console.log(tempDocx)\n  };\n\n  const getDocuments = async () => {\n    let tempDocs = [];\n    let template = []\n    await api.get(`/document/viewformatter/${props.userId}/${props.matterId}`)\n    .then((res) => {\n      console.log(res.data.data)\n      res.data.data.map((item, index) => {\n        if(item.matter == undefined){\n          const data = {\n            _id : item._id,\n            key : index,\n            document : item.document,\n            category : item.category,\n            name : item.name,\n          }\n          template.push(data)\n        }\n        else\n        if(item.type != \"folder\"){\n          tempDocs = [\n            ...tempDocs,\n            {\n              ...item,\n              type : \"File\",\n              key: item._id,\n              matter: item.matter !== null ? item.matter.matterDescription : '-',\n              receivedDate: getISTDate(item.receivedDate),\n              lastEdit: getISTDate(item.lastEdit),\n            },\n          ];\n        }\n      });\n    });\n    setDocs(tempDocs);\n    setTemplateTable(template)\n    setLoading(false)\n    tempDocs = [];\n    await api.get(`/matter/viewforuser/${userId}`).then((res) => {\n      res.data.data.map((item) => {\n        tempDocs = [\n          ...tempDocs,\n          {\n            ...item,\n            key: item._id,\n            client:\n              item.client === null\n                ? {\n                    _id: '',\n                    updated_at: '',\n                    created_at: '-',\n                    userId: '-',\n                    title: '-',\n                    lastName: '-',\n                    firstName: '',\n                    __v: 0,\n                    image: '',\n                    customFields: [\n                      {\n                        Email: '-',\n                      },\n                    ],\n                    address: [],\n                    website: [],\n                    phone: [],\n                    emailAddress: [],\n                    company: ['-'],\n                  }\n                : item.client,\n          },\n        ];\n      });\n    });\n    setMatters(tempDocs);\n  };\n\n  const handleSubmit = async () => {\n    \n    if(uploadData.category === ''){\n      notification.warning({\n        message : \"Please provide a category.\"\n      })\n    }else\n    if(uploadData.contact === ''){\n      notification.warning({\n        message : \"Please provide a contact.\"\n      })\n    }else\n    if(uploadData.document === '' ){\n      notification.warning({\n        message : \"Please provide a document.\"\n      })\n    }else\n    if(uploadData.matter === '' ){\n      notification.warning({\n        message : \"Please provide a matter.\"\n      })\n    }else\n    if(uploadData.name === ''){\n      notification.warning({\n        message : \"Please provide a name.\"\n      })\n    }\n    else{\n      setDisable(true)\n      var docFormData = new FormData();\n      docFormData.set('document', uploadData.document);\n      docFormData.set('name', uploadData.name);\n      docFormData.set('matter', uploadData.matter);\n      docFormData.set('contact', uploadData.contact);\n      docFormData.set('category', uploadData.category);\n      docFormData.set('userId', userId);\n      console.log(docFormData)\n    api\n      .post('/document/upload/934894383948u43', docFormData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      })\n      .then(function (response) {\n        notification.success({ message: 'Document Uploaded.' });\n        getDocuments();\n      })\n      .catch(function (response) {\n        notification.error({ message: 'Document Upload Failed.' });\n      });\n    setTimeout(() => {\n      setViewUpload(false);\n      setDisable(false)\n    }, 600);\n    }\n    \n  };\n  \n\n  const downloadHandler = async (record) => {\n    window.open(record.document);\n  };\n\n  const deleteHandler = async (docId) => {\n    await api\n      .get(`/document/delete/${docId}`)\n      .then((res) => {\n        console.log(res)\n        notification.success({ message: 'Document Deleted SuccessFully.' });\n        getDocuments();\n      })\n      .catch((res) => {\n        notification.error({ message: 'Document Deletion Failed.' });\n      });\n  };\n\n  const editHandler = async (docId) => {   \n      setModalFor('Edit');\n      setViewUpload(true);\n      await api.get(`/document/view/${docId}`).then((response) => {\n        setUploadData(response.data.data);\n        console.log(uploadData)\n      });\n  };\n\n   const handleEdit = async () => {\n        if(uploadData.category === ''){\n          notification.warning({\n            message : \"Please provide a category.\"\n          })\n        }else\n        if(uploadData.contact === ''){\n          notification.warning({\n            message : \"Please provide a contact.\"\n          })\n        }else\n        if(uploadData.document === '' ){\n          notification.warning({\n            message : \"Please provide a document.\"\n          })\n        }else\n        if(uploadData.matter === '' ){\n          notification.warning({\n            message : \"Please provide a matter.\"\n          })\n        }else\n        if(uploadData.name === ''){\n          notification.warning({\n            message : \"Please provide a name.\"\n          })\n        }\n        else{\n        setDisable(true)\n        var formData = new FormData();\n        formData.set('document', uploadData.document);\n        formData.set('userId', userId);\n        api\n          .post(`/document/edit/${uploadData._id}`, formData,{\n            headers: { 'Content-Type': 'multipart/form-data' },\n          }).then(res=>{\n            console.log(res)\n          })\n          const newUploadData = {\n            _id: uploadData._id,\n            name: uploadData.name,\n            matter: uploadData.matter,\n            contact: uploadData.contact,\n            category: uploadData.category,\n          }\n        await api\n          .post(`/document/edit/${uploadData._id}`, newUploadData)\n          .then(function (response) {\n            \n            console.log(response)\n            notification.success({ message: 'Document edited.' });\n            \n            getDocuments();\n          })\n          .catch(function (response) {\n             console.log(response)\n            notification.error({ message: 'Document Upload Failed.' });\n          });\n        setTimeout(() => {\n          setDisable(false)\n          setViewUpload(false);\n        }, 600);\n      }\n  };\n\n \n  //funtions for category\n  const columnsForCatagory = [\n    \n    {\n      title: 'Category Name',\n      dataIndex: 'name',\n      key: '1',\n    },\n    \n\n    {\n      title: 'Edit',\n      dataIndex: 'edit',\n      key: '6',\n      render: (_, record) => {\n        return (\n          <Button\n            className=\"btn-outline-info \"\n            onClick={() => {\n              editCategory(record);\n            }}\n          >\n            Edit\n          </Button>\n        );\n      },\n    },\n    {\n      title: 'Delete',\n      dataIndex: 'delete',\n      key: '7',\n      render: (_, record) => {\n        return (\n          <Popconfirm\n                    title=\"Are you sure delete this Catagory?\"\n                    onConfirm={()=>deleteCategory(record._id)}\n                    onCancel={()=>{}}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button\n                      className=\" btn-outline-danger \"\n                    >\n                      Delete\n                    </Button>\n                  </Popconfirm>\n          \n        );\n      },\n    },\n    \n  ];\n  \n  const handleCategory = (item) => (e) => {\n    console.log(\"chnage\")\n    console.log(item)\n    console.log(e)\n  \n        CatagoryData[`${item}`] = e.target.value;\n        setCatagoryData({ ...CatagoryData });\n  \n    console.log(CatagoryData)\n  };\n\n  const deleteCategory = async (docId) => {\n    await api\n      .get(`/document/category/delete/${docId}`)\n      .then((res) => {\n        notification.success({ message: 'Catagory Deleted SuccessFully.' });\n        getCategory();\n      })\n      .catch((res) => {\n        notification.error({ message: 'Catagory Deletion Failed.' });\n      });\n  };\n  \n  const editCategory =  (record) => {\n    \n    setModalFor('Edit');\n    setcataoryModal(true)\n    setCatagoryData(record)\n\n};\n  \n  \n\n  const getCategory = ( ) =>{\n    let tempCatagory = [];\n    api.get(`/document/category/viewforuser/${userId}`).then((res) => {\n      setCategory(res.data.data)\n      console.log(res)\n      res.data.data.map((item, index) => {\n        const data = {\n          name : item.name,\n          key : index,\n          _id : item._id,\n          userId :userId\n        }\n        tempCatagory.push(data)\n      });\n      setCatagoryTable(tempCatagory);\n    });\n  \n   \n    //setLoading(false)\n  }\n  const AddCategory = ( ) =>{\n    if(CatagoryData.name === ''){\n      notification.warning({\n        message : \"Please provide a name.\"\n      })\n    }\n    else{\n      setDisable(true)\n      console.log(CatagoryData)\n    api\n      .post('/document/category/create/' , CatagoryData)\n      .then(function (response) {\n        console.log(response)\n        getCategory()\n        notification.success({ message: 'Category created.' });\n\n        //getDocuments();\n      })\n      .catch(function (response) {\n        notification.error({ message: 'Failed.' });\n      });\n    setTimeout(() => {\n      setcataoryModal(false)\n      setDisable(false)\n    }, 600);\n    }\n    \n  }\n  const EditCategory = ( ) =>{\n    if(CatagoryData.name === ''){\n      notification.warning({\n        message : \"Please provide a name.\"\n      })\n    }\n    else{\n      setDisable(true)\n      console.log(CatagoryData)\n    api\n      .post('/document/category/edit/' + CatagoryData._id , CatagoryData)\n      .then(function (response) {\n        console.log(response)\n        getCategory()\n        notification.success({ message: 'Category Edited.' });\n\n        //getDocuments();\n      })\n      .catch(function (response) {\n        notification.error({ message: 'Failed.' });\n      });\n    setTimeout(() => {\n      setcataoryModal(false)\n      setDisable(false)\n      console.log(CatagoryTable)\n    }, 600);\n    }\n    \n  }\n\n  const CatagoryForm = () => (\n    <Modal\n      title={` ${modalFor} Catagory`}\n      visible={cataoryModal}\n      onCancel={() => setcataoryModal(false)}\n      footer={[\n        <Button key=\"back\" onClick={() => setcataoryModal(false)}>\n          Cancel\n        </Button>,\n        <Button\n          key=\"submit\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          disabled={Disable}\n          onClick={modalFor === 'Upload' ? AddCategory : EditCategory}\n        >\n          Submit\n        </Button>,\n      ]}\n    >\n      <Form\n        {...layout}\n        name=\"basic\"\n        fields={[\n          {\n            name: ['name'],\n            value: CatagoryData.name,\n          },\n          \n        ]}\n      >\n        <Form.Item\n          key=\"name\"\n          label=\"Name\"\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input name!',\n            },\n          ]}\n        >\n          <Input onChange={handleCategory('name')} value={CatagoryData.name} />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n\n  //common funtions\n  const layout = {\n    labelCol: {\n      span: 8,\n    },\n    wrapperCol: {\n      span: 16,\n    },\n  };\n  \n  \n  \n  const getISTDate = (dateInUTC) => {\n    var localDate = new Date(dateInUTC);\n    return localDate.toLocaleString();\n  };\n  const getMatterById = async (matterId) => {\n    await api.get(`/matter/view/${matterId}`).then((res) => {\n      let data = res.data.data.client !== null ? res.data.data.client._id : '-';\n      setUploadData({ ...uploadData, contact: data });\n    });\n  };\n  \n  \n  \n\n  useEffect(() => {\n    getDocuments();\n    getCategory()\n  }, []);\n\n  const uploadForm = () => (\n    <Modal\n      title={` ${modalFor} Document`}\n      visible={viewUpload}\n      onCancel={() => setViewUpload(false)}\n      footer={[\n        <Button key=\"back\" onClick={() => setViewUpload(false)}>\n          Cancel\n        </Button>,\n        <Button\n          key=\"submit\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          disabled={Disable}\n          onClick={modalFor === 'Upload' ? handleSubmit : handleEdit}\n        >\n          Submit\n        </Button>,\n      ]}\n    >\n      <Form\n        {...layout}\n        name=\"basic\"\n        fields={[\n          {\n            name: ['name'],\n            value: uploadData.name,\n          },\n          {\n            name: ['category'],\n            value: uploadData.category,\n          },\n          {\n            name: ['matter'],\n            value:\n              modalFor === 'Edit' ? uploadData.matter._id : uploadData.matter,\n          }, //todo\n          {\n  \n            name: ['document'],\n           // value: uploadData.document,\n          }\n        ]}\n      >\n        <Form.Item\n          key=\"name\"\n          label=\"Name\"\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input name!',\n            },\n          ]}\n        >\n          <Input onChange={handleInput('name')} value={uploadData.name} />\n        </Form.Item>\n\n        <Form.Item\n          key=\"matter\"\n          label=\"Matter\"\n          name=\"matter\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input matter',\n            },\n          ]}\n        >\n          <Select\n            showSearch\n            style={{ width: 200 }}\n            placeholder=\"Select a Matter\"\n            optionFilterProp=\"children\"\n            onChange={handleInput('matter')}\n            filterOption={(input, option) =>\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {matters.map((item, index) => (\n              <Option key={index} value={item._id}>\n                {item.matterDescription}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item\n          key=\"category\"\n          label=\"Category\"\n          name=\"category\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input category',\n            },\n          ]}\n        >\n          <Select\n            showSearch\n            style={{ width: 200 }}\n            placeholder=\"Select a Catagory\"\n            optionFilterProp=\"children\"\n            onChange={handleInput('category')}\n            filterOption={(input, option) =>\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {Category.map((item, index) => (\n              <Option key={index} value={item.name}>\n                {item.name}\n              </Option>\n            ))}\n          </Select>\n        \n        </Form.Item>\n      \n          <Form.Item\n            key=\"document\"\n            label=\"Document\"\n            name=\"document\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your File!',\n              },\n            ]}\n          >\n            <Input\n              type=\"file\"\n              onChange={handleInput('document')}\n             // value={uploadData.document}\n            />\n          </Form.Item>\n      </Form>\n    </Modal>\n  );\n  \n  \n\n \n  \n  \n  const menu = (\n    <Menu>\n      <Menu.Item \n        onClick={() => {\n          setUploadData({\n            document: '',\n            _id: '',\n            name: '',\n            matter: '',\n            category: '',\n          }); //todo\n\n          setViewUpload(true);\n          setModalFor('Upload');\n        }}\n        key=\"0\">\n        <span>Upload File</span>\n      </Menu.Item>\n\n    </Menu>\n  );\n  \n  const ButtonForDocument = (\n    <div className=\"d-flex justify-content-center\">\n      <Dropdown overlay={menu} trigger={['click']}>\n        <Button className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n          Upload <DownOutlined />\n        </Button>\n      </Dropdown>\n    </div>\n  \n  );\n  const ButtonForCatagory = (\n    <div className=\"d-flex justify-content-center\">\n           <Button\n            onClick={()=>setcataoryModal(true)}\n          >\n            Add Category\n          </Button>\n      </div>\n  \n  );\n  const ButtonForTemplate = (\n    <div className=\"d-flex justify-content-center\">\n          <Button\n            onClick={() => {\n              setTemplateData({\n                document: '',\n                name :'',\n                userId : userId,\n                category: '',\n              }); //todo\n\n              setTemplateModal(true);\n              setModalFor('Upload');\n            }}\n          >\n            Upload \n          </Button>\n      </div>\n  \n  );\n  \n  const [operations, setoperations] = useState(ButtonForDocument)\n  const callback = ( key ) => {\n    console.log(key);\n    if(key == 1){\n      setoperations(ButtonForDocument)\n    }else if(key == 2){\n      setoperations(ButtonForCatagory)\n    }if(key == 3){\n      setoperations(ButtonForTemplate)\n    }\n  }\n  return (\n    <Spin size = \"large\" spinning={Loading}>\n      \n      <Tabs\n          defaultActiveKey=\"1\"\n          tabBarExtraContent={operations}\n          onChange={callback}\n          className=\"card p-4 overflow-auto\"\n        >\n          <TabPane tab=\"Document\" key=\"1\">\n            {\n              uploadForm()\n            }\n  \n\n            <Table \n            className=\"table-responsive\"\n            dataSource={\n              dataSrc.length === 0 && value === '' ? docs : dataSrc\n            }\n            columns={columnsForDocuments} />\n          </TabPane>\n          <TabPane tab=\"Category\" key=\"2\">\n            {CatagoryForm()}\n           <Table className=\"table-responsive\" dataSource={CatagoryTable} columns={columnsForCatagory} />\n          </TabPane>\n      </Tabs>\n     \n \n    </Spin>\n     );\n};\n\nexport default Documents;\n","import React , {useEffect,useRef,forwardRef, useState} from 'react'\nimport { \n    ScheduleComponent, \n    Day, Week, WorkWeek, \n    Month, Agenda, Inject , ViewDirective,ViewsDirective\n} from '@syncfusion/ej2-react-schedule';\n\nimport { DateTimePickerComponent } from \"@syncfusion/ej2-react-calendars\";\nimport { DropDownListComponent } from \"@syncfusion/ej2-react-dropdowns\";\nimport { EventSettingsModel } from \"@syncfusion/ej2-react-schedule\";\nimport api from '../../../../resources/api'\nimport {notification, Button, Card, message} from 'antd'\n\nimport \"@syncfusion/ej2-base/styles/material.css\";\nimport \"@syncfusion/ej2-buttons/styles/material.css\";\nimport \"@syncfusion/ej2-calendars/styles/material.css\";\nimport \"@syncfusion/ej2-dropdowns/styles/material.css\";\nimport \"@syncfusion/ej2-inputs/styles/material.css\";\nimport \"@syncfusion/ej2-lists/styles/material.css\";\nimport \"@syncfusion/ej2-navigations/styles/material.css\";\nimport \"@syncfusion/ej2-popups/styles/material.css\";\nimport \"@syncfusion/ej2-splitbuttons/styles/material.css\";\nimport \"@syncfusion/ej2-react-schedule/styles/material.css\";\nimport EditorTemplate from '../../../components/EventEditor/v2';\nimport { extend } from '@syncfusion/ej2-base';\nimport { useDispatch, useSelector, connectAdvanced } from 'react-redux';\nimport {  L10n, Internationalization } from '@syncfusion/ej2-base';\n\nconst Add = <Button type=\"link\">Add</Button>\n\nconst fields = {\n    id: 'Id',\n    subject: { name: 'Title' },\n    isAllDay: { name: 'IsAllDay' },\n    startTime: { name: 'StartTime' },\n    endTime: { name: 'EndTime' },\n}\n\n\n\n\nconst CalendarContainer = props => {\n    \n    //Refs\n    const SchedulerRef = useRef()\n    const recurrenceRef = useRef()\n    let res = {}\n    let response = {}\n    const [options, setOptions] = useState([])\n    //State\n    const dispatch = useDispatch()\n    const userId = useSelector(state=>state.user.token.user._id)\n    const [ID, setID] = useState(\"\")\n    let startTime = \"\"\n    let endTime = \"\"\n    const [ state, setState ] = useState({tableData : []})\n    const [ data, setData ] = useState({email : false, notification : false, startTime : \"\", title: \"\"})\n    const [listEvent, setListEvent] = useState([])\n\n    async function fetchEventData(){\n        console.log(props.matterId)\n        res =  await api.get('/calendar/fetchformatter/' + props.matterId)\n        console.log(res)\n        response =  await api.get('matter/viewforuser/'+ userId)\n        setListEvent(res.data.data)\n        setOptions(response.data.data)\n        setdata()\n      }\n    useEffect(()=>{\n      fetchEventData()\n    },[])\n    const setdata = () =>{\n        let newTableData = []\n        res.data.data.map(async(value, index)=>{\n            let matter = \"\"\n            if(value.matter != undefined){\n                matter = value.matter.matterDescription\n            }\n            let allday = false\n            if(value.type === \"allday\"){\n                allday= true\n            }\n            let repeat = false\n            if(value.type === \"repeat\"){\n                repeat= true\n            }\n            const tableData={\n                id: value._id,\n                Subject : value.title,\n                StartTime : value.startTime,\n                EndTime : value.endTime,\n                Location : value.location,\n                Description : value.description,\n                TimeForReminder : value.timeForReminder,\n                Matter : matter,\n                Email : value.email,\n                Notification : value.notification,\n                Allday : allday,\n                Repeat : repeat\n\n            }\n \n            newTableData.push(tableData)\n        })\n        setState({tableData : newTableData })\n\n    }\n\n    function onPopupOpen(args) {\n        if (args.type === 'Editor') {\n            SchedulerRef.current.eventWindow.recurrenceEditor = recurrenceRef.current;\n        }\n        /*\n        if (args.type == \"QuickInfo\") {\n            var dialogObj = args.element.ej2_instances[0];\n            dialogObj.hide();\n            var currentAction = args.target.classList.contains(\"e-work-cells\") ? \"Add\" : \"Save\";\n            SchedulerRef.openEditor(args.data, currentAction);\n        }\n        */\n    }\n    const handleChange = (e) =>{\n        e.persist()\n\n        const { value, id } = e.target\n        let newdata  = data\n        if(id === \"allday\" || id===\"repeat\"){\n            if(value===\"on\"){\n                newdata.type = id\n            }\n        }else if(id === \"email\" || id===\"notification\"){\n            newdata[id]= !newdata[id]\n        }\n        else{\n        newdata[id] = value\n        setData(newdata)\n        }\n        console.log(data)\n    }\n\n    const DateTimeChange = (e) =>{\n        const { value, id} = e.element\n        let newData  = data\n        if(id===\"startTime\" ){\n            startTime = value\n        }\n        if(id===\"endTime\" ){\n            endTime = value\n        }\n        if(id===\"matter\" && e.itemData!=null){\n            newData[id]=options[e.itemData.value]._id\n        }else{\n        newData[id] = value\n        setData(newData)\n        }\n        console.log(data)\n    }\n    const openNotificationWithIcon=(type) =>{\n        notification[type]({\n          message: 'Success',\n          });\n      };\n    const openNotificationWithfailure = type => {\n        notification[type]({\n          message: 'Failure'});\n      };\n    const handleSubmit = (e) =>{\n        console.log(e.requestType)\n        if(e.requestType===\"eventRemoved\"){\n            const id = e.data[0].id\n            api.get('/calendar/delete/'+id).then(()=>{\n                fetchEventData()\n                openNotificationWithIcon('success')\n            }\n           ).catch(()=>openNotificationWithfailure('error'))\n            setTimeout(()=>{\n                //window.location.reload()\n                \n            },1500)\n        }\n        if(e.requestType===\"eventChanged\"){\n\n            let eventdata = data\n            let id = e.changedRecords[0].id\n            /*\n            if(e.data.id == undefined){\n               id = e.data[0].id\n            }\n            */\n            eventdata.userId = userId \n            eventdata.startTime = startTime\n            eventdata.endTime = endTime\n           \n            api.post('/calendar/update/'+ id , eventdata )\n            .then((res)=>{\n                fetchEventData()\n                notification.success({message : \"Event Edited\"})\n            }).catch((err)=>{\n                console.log(err)\n                notification.error({message : \"Failed\"})\n            })\n            setData({})\n            setTimeout(()=>{\n               // window.location.reload()\n            },1500)\n            \n        }\n        if(e.requestType===\"eventCreated\"){\n    \n            let eventdata = data\n            eventdata.userId = userId\n            if(startTime !== \"Invalid Date\"){\n    \n                eventdata.startTime = startTime\n                eventdata.endTime = endTime\n                \n            }\n            console.log(data)\n            if(data.title == \"\" || data.title == undefined  ){\n                    notification.warning({message : \"Please provide a title\" })\n            }else{\n                console.log(eventdata)\n                \n                api.post('/calendar/create', eventdata).then((res)=>{\n                    console.log(res)\n                    fetchEventData()\n                    notification.success({message : \"Evented Added\"})\n                 }).catch((err)=>{\n                    console.log(err)\n                    notification.error({message : \"Failed!\"})\n                 })\n                 setData({})\n                 setTimeout(()=>{\n                    //window.location.reload()\n                },1500)\n    \n                 }\n              \n            }\n        \n    }\n    \n    \n    const setInit = (args) =>{\n    \n    \n        if(args.StartTime != undefined && args.StartTime != \"Invalid Date\"){\n            const props = args\n            startTime = props.StartTime\n            endTime = props.EndTime\n\n            let sdd = startTime.getDate()\n            let smm = startTime.getMonth()+1\n            let syyyy = startTime.getFullYear()\n            let shours = startTime.getHours()\n            let smins = startTime.getMinutes()\n            smins < 10 ? smins = \"0\"+smins : smins = smins\n\n          \n            let edd = endTime.getDate()\n            let emm = endTime.getMonth()+1\n            let eyyyy = endTime.getFullYear()\n            let ehours = endTime.getHours()\n            let emins = endTime.getMinutes()\n            emins < 10 ? emins = \"0\"+emins : emins = emins\n\n            \n            startTime = smm+'/'+sdd+'/'+syyyy+', '+shours+':'+smins+':00 '\n            endTime = emm+'/'+edd+'/'+eyyyy+', '+ehours+':'+emins+':00 '\n\n\n             /*\n             if((startTime.toLocaleString()).includes(\"AM\") || (startTime.toLocaleString()).includes(\"PM\")){\n                 console.log(\"Windows\")\n               \n                 \n                 console.log(\"Mac\")\n                if(startTime.getHours() > 12 || endTime.getHours() > 12){\n                    startTime.setHours(startTime.getHours()-12)\n                    startTime = startTime.toLocaleString() + \" AM\"\n                    endTime.setHours(endTime.getHours()-12)\n                    endTime = endTime.toLocaleString() + \" AM\"\n                 }else{\n                    startTime = startTime.toLocaleString() + \" PM\"\n                    endTime = endTime.toLocaleString() + \" PM\"\n                 }\n                \n                \n                \n                startTime = startTime.toLocaleString()\n                endTime = props.EndTime.toLocaleString()\n                \n             }else{\n                \n                let sdd = startTime.getDate()\n                let smm = startTime.getMonth()+1\n                let syyyy = startTime.getFullYear()\n                let sAMPM = \"AM\"\n                let shours = startTime.getHours()\n               // shours < 10 ? shours = \"0\"+shours : shours = shours\n               \n                if(shours > 12){\n                   shours = shours - 12\n                   sAMPM = \"AM\"\n               }else{\n                  shours = shours\n                  sAMPM = \"PM\"\n               }\n               \n                let smins = startTime.getMinutes()\n                smins < 10 ? smins = \"0\"+smins : smins = smins\n   \n              \n                let edd = endTime.getDate()\n                let emm = endTime.getMonth()+1\n                let eyyyy = endTime.getFullYear()\n                let eAMPM = \"\"\n                let ehours = endTime.getHours()\n               // ehours < 10 ? ehours = \"0\"+ehours : ehours = ehours\n               \n                if(ehours > 12){\n                    ehours = ehours - 12\n                    eAMPM = \"AM\"\n                    \n                }else{\n                   ehours = ehours\n                   eAMPM = \"PM\"\n                }\n                \n                let emins = endTime.getMinutes()\n                emins < 10 ? emins = \"0\"+emins : emins = emins\n   \n                \n                startTime = smm+'/'+sdd+'/'+syyyy+', '+shours+':'+smins+':00 '+sAMPM\n                endTime = emm+'/'+edd+'/'+eyyyy+', '+ehours+':'+emins+':00 '+eAMPM\n   \n                console.log(startTime)\n                console.log(endTime)\n   \n                 /*\n                 console.log(\"Mac\")\n                if(startTime.getHours() > 12 || endTime.getHours() > 12){\n                    startTime.setHours(startTime.getHours()-12)\n                    startTime = startTime.toLocaleString() + \" AM\"\n                    endTime.setHours(endTime.getHours()-12)\n                    endTime = endTime.toLocaleString() + \" AM\"\n                 }else{\n                    startTime = startTime.toLocaleString() + \" PM\"\n                    endTime = endTime.toLocaleString() + \" PM\"\n                 }\n                 \n                 \n             }\n             \n             \n             */\n        }      \n    }\n   const onClickButton2 = () =>{\n    notification.destroy()\n    let eventdata = data\n    eventdata.userId = userId\n    if(startTime !== \"Invalid Date\"){\n      \n        eventdata.startTime = startTime\n        eventdata.endTime = endTime             \n    }\n    console.log(eventdata)\n    if(eventdata.title === \"\"){\n            notification.warning({message : \"Please provide a title\" })\n    }else{\n       \n        api.post('/calendar/create', eventdata).then((res)=>{\n            console.log(res)\n            fetchEventData()\n            notification.success({message : \"Evented Added\"})\n            let eventData = {\n                Id: '',\n                Subject: '',\n                StartTime: '',\n                EndTime: ''\n            };\n            setData({})\n            SchedulerRef.current.openEditor(eventData, 'Add');\n         }).catch((err)=>{\n            console.log(err)\n            notification.error({message : \"Failed!\"})\n         })\n        \n        \n\n         }\n\n   }\n   \n    return (        \n        <div className=\"row\">\n            <div className=\"col-lg-8\">\n                <Card bodyStyle={{\"padding\" : \"0px\"}}>\n                    <ScheduleComponent height='550px' \n                        actionComplete={handleSubmit}  \n                        ref={cal=>SchedulerRef.current=cal }\n                        showQuickInfo={false} \n                        popupOpen={onPopupOpen}\n                        eventSettings={{dataSource : state.tableData}}\n                        \n                        editorTemplate={pr=><EditorTemplate {...pr} onClickButton2={onClickButton2} setInit = {setInit(pr)} userId={userId} setInit={setInit}  handleChange={handleChange} DateTimeChange={DateTimeChange} setRecurrenceRef={ref=>recurrenceRef.current=ref} />}>\n                        <ViewsDirective>\n                        <ViewDirective option='Day'/>\n                            <ViewDirective option='Week'/>\n                            <ViewDirective option='WorkWeek'/>\n                            <ViewDirective option='Month'/>\n                        </ViewsDirective>\n                        <Inject services={[Day, Week, WorkWeek, Month, Agenda]} currentView={\"Month\"}/>\n                    </ScheduleComponent>\n                 </Card>\n            </div>\n            <div className=\"col-lg-4\">\n                <Card title=\"Events\" style={{\"height\" : \"550px\"}} className=\"overflow-auto\" bodyStyle={{\"padding\" : \"15px\"}}>\n                    {listEvent.map((eventlist) => <div key={eventlist._id} style={{ \"border-bottom\" : \"1px solid #e5e5e5\"}} className=\"pb-2 mb-2\">\n                        <span style={{\"font-size\" : \"18px\" , \"color\": \"#3f51b5\"}}><b>{eventlist.title}</b></span>\n                        <div className=\"d-flex justify-content-between\">\n                            <span style={{ \"padding-right\" : \"5%\", \"border-right\" : \"1px solid #e5e5e5\"}}>\n                                <span><b>{eventlist.startTime}</b></span><br /> \n                                <span style={{\"font-size\" : \"11px\"}}>(Starting Date & Time)</span>\n                            </span>\n                            <span>\n                                <span><b>{eventlist.endTime}</b></span><br /> \n                                <span style={{\"font-size\" : \"11px\"}}>(Ending Date & Time)</span>\n                            </span>                            \n                        </div>\n                    </div> \n                    )}\n                </Card>\n            </div>\n        </div>\n    )\n}\n\nexport default CalendarContainer\n","import React, { Component } from 'react';\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport { Button } from 'antd';\n\nexport class ExportExcel extends Component {\n  constructor(props) {\n    super(props);\n    console.log('data in excel', props.dataSource);\n  }\n\n  render() {\n    return (\n      <div>\n        <table id=\"emp\" className=\"d-none\">\n          <thead>\n            <tr>\n              <th>Hours</th>\n              <th>Subject</th>\n              <th>Note</th>\n              <th>Date</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {this.props.dataSource.map((p, index) => {\n              \n              return (\n                <tr key={index}>\n                  <td>{p.hours}</td>\n                  <td>{p.subject}</td>\n                  <td>{p.notes}</td>\n                  <td>{p.date}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <ReactHTMLTableToExcel\n          className=\"btn btn-outline-primary btn-sm ml-auto\"\n          table=\"emp\"\n          filename=\"Notes\"\n          sheet=\"Sheet\"\n          buttonText=\"Export to Excel\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExportExcel;\n","import React, {useState, useEffect, useRef} from 'react';\nimport { Card, Button, Tabs, Table, Modal, notification, Space, Popconfirm , Spin  } from 'antd';\nimport { Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport api from '../../../../resources/api';\nimport ReactDOM from 'react-dom'\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport ExportExcel from './ExportExcel';\n\n\nconst Notes = (props) => {\n    const [visible, setVisible] = useState(false)\n    const [Loading, setLoading] = useState(true)\n    const [data, setdata] = useState({})\n    const [disable, setdisable] = useState(false)\n    const userId = useSelector((state) => state.user.token.user._id);\n    const [tableData, settableData] = useState([])\n    const [editMode, seteditMode] = useState(false)\n    const [record, setrecord] = useState({})\n    const [editModal, seteditModal] = useState(false)\n    const formRef = useRef(null)\n    let timeError = \"\"\n  \n    const fetchNotes = ( ) => {\n  \n        api.get('/notes/viewformatter/'+userId + '/' + props.id).then((res)=>{\n            console.log(res)\n            let notes = []\n            res.data.data.map((value , index)=>{\n                const temp = {\n                    _id : value._id,\n                    key : index,\n                    notes : value.notes,\n                    subject : value.subject,\n                    hours : value.hours ? value.hours : \"-\",\n                    date : value.date ? value.date.substring(0,10) : \"-\"\n                }\n                notes.push(temp)\n            })\n            settableData(notes)\n            setLoading(false)\n        })\n    }\n    useEffect(() => {\n        fetchNotes()\n    }, [])\n\n    const handleOk = (e) =>{\n        e.persist();\n        notification.destroy();\n        let valid = true\n        if (timeError !== '') {\n            valid = false\n            notification.error({ message: 'Invalid time, Please enter time in the format : HH:MM:SS' });\n          }else\n        if(data.subject === '' || data.subject === undefined ){\n          valid = false\n          notification.warning({\n            message: 'Please provide a Subject',\n          });\n        }else\n        if(data.notes === '' || data.notes === undefined ){\n            valid = false\n            notification.warning({\n              message: 'Please provide a Note',\n            });\n          }\n\n        if(valid){\n            setdisable(true)\n            let notess = data;\n            notess.userId = userId\n            notess.matter = props.id\n            if(editMode){\n                api.post('/notes/edit/' + record._id , notess).then((res)=>{\n                    console.log(res)\n                    fetchNotes()\n                    notification.success({message : \"Note Edited.\"})\n                }).catch((err)=>{\n                    notification.error({message : \"Failure\"})\n                }).then(() => {\n                    ReactDOM.findDOMNode(formRef.current).reset()\n                    seteditMode(false)\n                    seteditModal(false)\n                    setdata({})\n                    setrecord({})\n                    setdisable(false)\n                 });\n            }else{\n                api.post('/notes/create', notess).then((res)=>{\n                    console.log(res)\n                    fetchNotes()\n                    notification.success({message : \"Note created.\"})\n                }).catch((err)=>{\n                    notification.error({message : \"Failure\"})\n                }).then(() => {\n                    ReactDOM.findDOMNode(formRef.current).reset()\n                    setVisible(false)\n                    setdata({})\n                    setrecord({})\n                    setdisable(false)\n                 });\n            }\n\n        }\n    }\n\n    const handleCancel = (e) =>{\n        \n        seteditMode(false)\n        seteditModal(false)\n        setVisible(false);\n        ReactDOM.findDOMNode(formRef.current).reset()\n    }\n\n    const handleDelete = record => {\n        api.get('/notes/delete/' + record._id).then((res)=>{\n        console.log(res)\n          fetchNotes()\n          notification.success({message : \"Note Deleted !\"})\n        \n        }).catch((err)=>{\n\n          notification.error({message : \"Failed to delete\"})\n        })\n        \n      }\n\n      const handleEdit = (record) => {\n        seteditMode(true)\n        seteditModal(true)\n        setrecord(record)\n        setdata(record)\n        console.log(record)\n      };\n\n    const columnsNotes = [\n        {\n            title: 'Hours',\n            dataIndex: 'hours',\n            key: '1',\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            key: '2',\n        },\n        {\n            title: 'Subject',\n            dataIndex: 'subject',\n            key: '3',\n        },\n        {\n            title: 'Note',\n            dataIndex: 'notes',\n            key: '4',\n        },\n        {\n            title: 'Edit',\n            dataIndex: 'edit',\n            key: '5',\n            render:(_,record)=>{\n                return (\n                    <Button onClick = {()=>handleEdit(record)} >\n                        Edit\n                    </Button>\n                )\n            }\n        },\n        {\n            title: 'Delete',\n            dataIndex: 'delete',\n            key: '5',\n            render:(_,record)=>{\n                return (\n                  <Popconfirm\n                    title=\"Are you sure delete this Note?\"\n                    onConfirm={() => handleDelete(record)}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button danger>\n                        Delete\n                    </Button>\n                  </Popconfirm>\n                    \n                )\n            }\n        },\n    ]\n\n    const handleChange=(e)=>{\n        e.persist()\n        const { name, id, value , selectedIndex} = e.target\n        let newData = data\n        if (name === 'hours') {\n            timeError = '';\n            var timeValue = value;\n            if (timeValue == '' || timeValue.indexOf(':') < 0) {\n              timeError = 'Inavlid Time';\n              console.log(timeError);\n            } else {\n              var sHours = timeValue.split(':')[0];\n              var sMinutes = timeValue.split(':')[1];\n              var sSecs = timeValue.split(':')[2];\n              console.log(sSecs)\n              if (sHours == '' || isNaN(sHours) /*|| parseInt(sHours)>23 */) {\n                timeError = 'Inavlid Time';\n                console.log(timeError);\n              } else if (parseInt(sHours) == 0) sHours = '00';\n              //else if (sHours < 10) sHours = '0' + sHours;\n    \n              if (sMinutes == '' || isNaN(sMinutes) || parseInt(sMinutes) > 59) {\n                timeError = 'Inavlid Time';\n                console.log(timeError);\n              } else if (parseInt(sMinutes) == 0) sMinutes = '00';\n              //else if (sMinutes < 10) sMinutes = '0' + sMinutes;\n    \n              if (sSecs == '' || isNaN(sSecs) /*|| parseInt(sHours)>23 */) {\n                timeError = 'Inavlid Time';\n                console.log(timeError);\n              } else if (parseInt(sSecs) == 0) sSecs = '00';\n              //else if (sSecs < 10) sSecs = '0' + sSecs;\n              timeValue = sHours + ':' + sMinutes +':' + sSecs;\n            }\n            newData[name] = timeValue;\n            \n          }else{\n            newData[name] = value\n          }\n       \n        setdata(newData)\n        console.log(data)\n    }\n    \n    const exportPDF = () => {\n      if(tableData.length == 0 ){\n        notification.warning({message : \"Please add notes before exporting\"})\n      }else{\n      const unit = 'pt';\n      const size = 'A4'; // Use A1, A2, A3 or A4\n      const orientation = 'portrait'; // portrait or landscape\n  \n      const marginLeft = 40;\n      const doc = new jsPDF(orientation, unit, size);\n  \n      doc.setFontSize(15);\n  \n      const title = 'Notes';\n      const headers = [['Hours','Subject', 'Note', 'Date']];\n  \n      let data = [];\n      tableData.map((val, index) => {\n        const td = [val.hours, val.subject, val.notes , val.date];\n        data.push(td);\n      });\n  \n      let content = {\n        startY: 50,\n        head: headers,\n        body: data,\n      };\n  \n      doc.text(title, marginLeft, 40);\n      doc.autoTable(content);\n      doc.save('notes.pdf');\n    }\n  };\n\n    return(\n      <Spin spinning={Loading} size = \"large\">\n        <div>\n            <Card\n                title=\"Notes\"\n                className=\"mb-4\"\n                extra={\n                    <div className=\"d-flex justify-content-center\">\n                    <button\n                        className=\"ml-auto btn  btn-outline-primary   btn-sm\"\n                        onClick={exportPDF}\n                    >\n                        Export to Pdf\n                    </button>\n                    <ExportExcel dataSource={tableData || []} />\n                    <button\n                        className=\"ml-auto btn  btn-outline-primary   btn-sm\"\n                        onClick={()=> setVisible(true)}\n                    >\n                        Add Notes\n                    </button>\n                \n                    </div>\n                 \n                }\n            >\n                <Table className=\"table-responsive\"  dataSource={tableData}  columns={columnsNotes}/>\n            </Card>\n            <Modal\n                title=\"New Note\"\n                visible={visible}\n                onOk={handleOk}\n                onCancel={handleCancel}\n                footer={[\n                    <Button  onClick={handleCancel}>\n                      Cancel\n                    </Button>,\n                    <Button type=\"primary\" disabled = {disable} onClick={handleOk}>\n                      Create\n                    </Button>,\n                  ]}\n            >\n                <Form\n                 id='myForm'\n                 className=\"form\"\n                 ref={ formRef } \n                 className=\"form-details\">\n                     <Form.Group controlId=\"duration\">\n                        <Form.Label>Hours</Form.Label>\n                        <Form.Control \n                        type=\"text\" \n                        name=\"hours\" \n                        placeholder = \"hh:mm:ss\"\n                        //defaultValue = {this.state.data.time}\n                        onChange={handleChange}/>\n                     </Form.Group>   \n                    <Form.Group>\n                        <Form.Label>Subject</Form.Label>\n                        <Form.Control\n                         name=\"subject\" \n                         type=\"text\"\n                         placeholder = \"Subject\"\n                         onChange={handleChange}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Note</Form.Label>\n                        <Form.Control \n                        name=\"notes\" \n                        as=\"textarea\" \n                        rows=\"4\"\n                        placeholder = \"Note\"\n                        onChange={handleChange} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Date</Form.Label>\n                        <Form.Control \n                        name=\"date\" \n                        type=\"date\" \n                        onChange={handleChange} />\n                    </Form.Group>\n                </Form>\n            </Modal>\n            <Modal\n                title=\"Edit Note\"\n                visible={editModal}\n                onOk={handleOk}\n                onCancel={handleCancel}\n                footer={[\n                    <Button  onClick={handleCancel}>\n                      Cancel\n                    </Button>,\n                    <Button type=\"primary\" disabled = {disable} onClick={handleOk}>\n                      Save \n                    </Button>,\n                  ]}\n            >\n                <Form \n                  id='myForm'\n                  className=\"form\"\n                  ref={ formRef }\n                  className=\"form-details\">\n                      <Form.Group controlId=\"duration\">\n                        <Form.Label>Duration</Form.Label>\n                        <Form.Control \n                        type=\"text\" \n                        name=\"hours\" \n                        defaultValue = {record.hours}\n                        onChange={handleChange}/>\n                     </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Subject</Form.Label>\n                        <Form.Control \n                        name=\"subject\" \n                        type=\"text\" \n                        defaultValue = {record.subject} \n                        onChange={handleChange}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Note</Form.Label>\n                        <Form.Control name=\"notes\" as=\"textarea\" rows=\"4\" defaultValue = {record.notes} onChange={handleChange} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Date</Form.Label>\n                        <Form.Control name=\"date\" type=\"date\" defaultValue = {record.date} onChange={handleChange} />\n                    </Form.Group>\n                </Form>\n            </Modal>\n        </div>\n    \n      </Spin>\n        )\n}\nexport default Notes","import React, { useEffect, useState } from 'react';\r\nimport api from '../../../../resources/api';\r\nimport { Card, Tabs, Button, Modal, Table, Popconfirm, Upload, notification, Spin} from 'antd';\r\nimport { number } from 'prop-types';\r\nimport { Form, Row, Col } from 'react-bootstrap';\r\nimport Communication from './communnication';\r\nimport TaskFuntions from './Task';\r\nimport Activity from './Activity';\r\nimport 'jspdf-autotable';\r\nimport Bills from './Bills';\r\nimport Documents from './Documents';\r\nimport Calendar from './Calendar';\r\nimport Notes from './Notes';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction CompanyView(props) {\r\n  let response = {};\r\n  const [desc, setdesc] = useState('');\r\n  const [Active, setActive] = useState(\"1\")\r\n  const [TabKey, setTabKey] = useState(\"\")\r\n  const [Loading, setLoading] = useState(true)\r\n  const [total, settotal] = useState(\"0\")\r\n  const [Client, setClient] = useState('');\r\n  const [Amount, setAmount] = useState('0');\r\n  const [state, setState] = useState({ visible: false });\r\n  const [contact, setContact] = useState([]);\r\n  const [act, setAct] = useState([]);\r\n  const [address, setAddress] = useState();\r\n  const [events, setEvents] = useState();\r\n  const [firstName, setfirstName] = useState();\r\n  const [ID, setID] = useState();\r\n  const [Website, setWebsite] = useState();\r\n  const [Email, setEmail] = useState();\r\n  const [Number, setNumber] = useState();\r\n  const [BillAmount, setBillAmount] = useState(0)\r\n  console.log(props.location.state);\r\n    const fetchBills = ( ) =>{\r\n      api.get('/billing/bill/viewforuser/'+ props.location.state.userId + '/' + props.location.state.id).then((res)=>{\r\n        console.log(res)\r\n        let billamount = 0\r\n        res.data.data.map((value , index)=>{\r\n  \r\n          if(value.status === \"Unpaid\"){\r\n            billamount = billamount + parseFloat(value.balance).toFixed('2')\r\n          }\r\n          /*\r\n          if(value.status==\"draft\"){\r\n            draftBills.push(temp)\r\n          }\r\n          */\r\n        })\r\n        console.log(billamount)\r\n        setBillAmount(billamount)\r\n      })\r\n    }\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      await api.get('/matter/view/' + props.location.state.id).then((res) => {\r\n        response = res.data;\r\n        response.data.client =\r\n          response.data.client === null\r\n            ? {\r\n                _id: '',\r\n                updated_at: '',\r\n                created_at: '-',\r\n                userId: '-',\r\n                title: '-',\r\n                lastName: '-',\r\n                firstName: '',\r\n                __v: 0,\r\n                image: '',\r\n                customFields: [\r\n                  {\r\n                    Email: '-',\r\n                  },\r\n                ],\r\n                address: [],\r\n                website: [],\r\n                phone: [],\r\n                emailAddress: [],\r\n                company: ['-'],\r\n              }\r\n            : response.data.client;\r\n        setdesc(res.data.data.matterDescription);\r\n        setClient(\r\n          res.data.data.client.firstName + ' ' + res.data.data.client.lastName\r\n\r\n          // res.data.data.client\r\n        );\r\n      });\r\n      {\r\n        /*\r\n                calendar = await api.get('/calendar/viewforuser/'+props.location.state.id)\r\n               .then(()=>{\r\n               api.get('/activity/viewformatter/'+props.location.state.userId+props.location.state.id).then((res)=>{console.log(res)})\r\n           })*/\r\n      }\r\n      setValue();\r\n    }\r\n    fetchData();\r\n    fetchBills()\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    api\r\n      .get(\r\n        '/activity/viewformatter/' +\r\n          props.location.state.userId +\r\n          '/' +\r\n          props.location.state.id\r\n      )\r\n      .then((res) => {\r\n        let activity = [];\r\n        let total = 0\r\n        res.data.data.map((val, index) => {\r\n\r\n          let rate = val.rate\r\n          if(rate.includes(\"$\")){\r\n            rate = parseFloat(rate.substring(0, rate.length - 1))\r\n          }\r\n\r\n          if(val.type === \"time\" && val.time != undefined ){\r\n            console.log(rate)\r\n\r\n            const sHours = parseInt(val.time.split(':')[0]);\r\n            const sMinutes = parseInt(val.time.split(':')[1]);\r\n            const sSecs =  parseFloat(val.time.split(':')[2])\r\n            console.log(sHours + \"  \" + sMinutes)\r\n            total = total + rate * sHours + ((rate/60)*sMinutes) +  ((rate/3600)*sSecs)\r\n          }\r\n          if(val.type ===\"expense\"){ \r\n              total = total + rate * parseInt(val.qty)\r\n        }\r\n         \r\n          activity.push(val);\r\n          \r\n        });\r\n        console.log('activiviviviv', activity);\r\n        setAct(activity);\r\n        settotal(total)\r\n      });\r\n  }, []);\r\n\r\n  const setValue = () => {\r\n    const amnt = window.localStorage.getItem('total');\r\n    setAmount(amnt);\r\n\r\n    let data = [];\r\n    //  setRealatedContacts(rcntct)\r\n    \r\n    response.data.relatedContacts.map(async (value, index) => {\r\n      console.log(value.contact);\r\n      const cntct = await api.get('/contact/view/' + value.contact);\r\n      console.log(cntct.data);\r\n      const mail = response.data.client.emailAddress.map((value, index) => {\r\n        return (\r\n          <div className=\"table-span-light\" key={index}>\r\n            <p>{value.emailAddress}</p>\r\n          </div>\r\n        );\r\n      });\r\n      const Num = response.data.client.phone.map((value, index) => {\r\n        return (\r\n          <div className=\"table-span-light\" key={index}>\r\n            <p>{value.number}</p>\r\n          </div>\r\n        );\r\n      });\r\n      data.push(\r\n        <Card title=\"Related Contact\" className=\"form-width mb-4\">\r\n          <table class=\"table table-borderless table-responsive\">\r\n            <tbody>\r\n              <tr>\r\n                <td className=\"border-0 py-2\">\r\n                  <span className=\"table-span-dark\">Client</span>\r\n                </td>\r\n                <td className=\"border-0 py-2\">\r\n                  <span className=\"table-span-light\">\r\n                    {cntct.data.data.firstName + cntct.data.data.lastName}\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td className=\"border-0 py-2\">\r\n                  <span className=\"table-span-dark\">Phone</span>\r\n                </td>\r\n                <td className=\"border-0 py-2\">\r\n                  <span className=\"table-span-light\">{Num}</span>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td className=\"border-0 py-2\">\r\n                  <span className=\"table-span-dark\">Email</span>\r\n                </td>\r\n                <td className=\"border-0 py-2\">\r\n                  <span className=\"table-span-light\">{mail}</span>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </Card>\r\n      );\r\n      setContact(data);\r\n      console.log(contact)\r\n    });\r\n\r\n    // setEvents(evnt)\r\n    const adrs = response.data.client.address.map((value, index) => {\r\n      return (\r\n        <div className=\"table-span-light\" key={index}>\r\n          <p>{value.street}</p>\r\n          {console.log('data', response.data)}\r\n          <p>{value.city}</p>\r\n          <p>{value.state}</p>\r\n          <p>{value.zipCode}</p>\r\n          <p>{value.country}</p>\r\n          <p>{value.type}</p>\r\n        </div>\r\n      );\r\n    });\r\n    const mail = response.data.client.emailAddress.map((value, index) => {\r\n      return (\r\n        <div className=\"table-span-light\" key={index}>\r\n          <p>\r\n            {value.emailType} : {value.emailAddress}\r\n          </p>\r\n        </div>\r\n      );\r\n    });\r\n    const Num = response.data.client.phone.map((value, index) => {\r\n      return (\r\n        <div className=\"table-span-light\" key={index}>\r\n          <p>\r\n            {console.log(value)}\r\n            {value.phoneType} : {value.phone}\r\n          </p>\r\n        </div>\r\n      );\r\n    });\r\n    const fNAme =\r\n      response.data.client.firstName + ' ' + response.data.client.lastName;\r\n    const IDx = response.data.client._id;\r\n    setAddress(adrs);\r\n    setID(IDx);\r\n    setfirstName(fNAme);\r\n    setEmail(mail);\r\n    setNumber(Num);\r\n    setLoading(false)\r\n  };\r\n  function callback(key) {\r\n    console.log(key);\r\n    setActive(key)\r\n  }\r\n\r\n  const showModal = () => {\r\n    setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  const handleOk = (e) => {\r\n    console.log(e);\r\n    setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  const handleCancel = (e) => {\r\n    console.log(e);\r\n    setState({\r\n      visible: false,\r\n    });\r\n  };\r\n\r\n  const handleCreateBills = (e) =>{\r\n    console.log(props)\r\n    props.history.push('/create/bills')\r\n  }\r\n\r\n  const handleRecordPayment = ( ) => {\r\n    props.history.push('/manage/billing/record')\r\n  }\r\n\r\n  //data source for bills section\r\n  \r\n\r\n  const handleBills = () => {\r\n    console.log(props.location.state.id);\r\n    props.history.push('/view/matter/bills', props.location.state.id);\r\n  };\r\n  return (\r\n    <Spin size=\"large\" spinning = {Loading}>\r\n      <div>\r\n      <Card >\r\n        <Row>\r\n          <Col sm className=\"pb-2\">\r\n            <h4>{Client}</h4>\r\n            <p>{desc}</p>\r\n          </Col>\r\n          <Col sm>\r\n          <div>\r\n            <Button\r\n              className=\"mr-2\"\r\n              onClick={() =>\r\n                props.history.push('/edit/matter', props.location.state.id)\r\n              }\r\n            >\r\n              Edit\r\n            </Button>\r\n            <Popconfirm\r\n                    title=\"Are you sure you want to delete this Matter?\"\r\n                    onConfirm={() =>\r\n                      api\r\n                        .get('/matter/delete/' + props.location.state.id)\r\n                        .then(() => {\r\n                          notification.success({ message: 'Matter deleted.' });\r\n                          props.history.push(\r\n                            '/manage/matter',\r\n                            props.location.state.id\r\n                          );\r\n                        })\r\n                        .catch(() =>\r\n                          notification.error({ message: 'Failed to delete' })\r\n                        )}\r\n                    onCancel={()=>{}}\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                  >\r\n                    <Button  danger>\r\n                      Delete\r\n                  </Button>\r\n                  </Popconfirm>\r\n    \r\n          </div>\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n      <Tabs activeKey= { Active } onChange={callback} >\r\n        <TabPane tab=\"Dashboard\" key=\"1\" style={{ padding: '0px' }}>\r\n          <Card\r\n          bodyStyle={{padding : \"0px\"}}\r\n            title=\"Financial\"\r\n            extra={\r\n              <div>\r\n                <Button type=\"link\" onClick={()=>{setActive(\"2\")}}>Add expense/time entry</Button>\r\n\r\n                <Button type=\"link\" onClick={()=>{setActive(\"9\")}}>View Bills</Button>\r\n                <Button type=\"link\" onClick={handleBills}>\r\n                  Quick Bills\r\n                </Button>\r\n              </div>\r\n            }\r\n            className=\"form-width mb-4\"\r\n          >\r\n            <div className=\"text-center pt-2\">\r\n       \r\n              <div class=\"d-flex py-2 mt-2 matter-amount\">\r\n                <div style={{ flex: 1, 'border-right': '2px solid #B2E4D6' }}>\r\n                  <p style={{fontSize : \"13px\"}}>\r\n                    <b>Work in progress amount</b>\r\n                  </p>\r\n                     <span>{parseFloat(total).toFixed('2')}</span>\r\n                </div>\r\n              \r\n                <div style={{ flex: 1, 'border-right': '2px solid #B2E4D6' }}>\r\n                  <p style={{fontSize : \"13px\"}}>\r\n                    <b>Trust Funds</b>\r\n                  </p>\r\n                  <span>$0.00</span>\r\n                </div>\r\n                <div style={{ flex: 1 }}>\r\n                  <p style={{fontSize : \"13px\"}}>\r\n                    <b>Outstanding balance</b>\r\n                  </p>\r\n                  <span>${BillAmount}</span>\r\n                </div>\r\n                \r\n              </div>\r\n            </div>\r\n          </Card>\r\n          <Card\r\n            title=\"Details\"\r\n            extra={\r\n              <Button type=\"link\" onClick={() =>\r\n                props.history.push('/edit/matter', props.location.state.id)\r\n              }>\r\n                Add Contact\r\n              </Button>\r\n            }\r\n            className=\"form-width mb-4\"\r\n          >\r\n            <table class=\"table table-borderless table-responsive \">\r\n              <tbody>\r\n                <tr>\r\n                  <td className=\"border-0 py-2\">\r\n                    <span className=\"table-span-dark\">Client</span>\r\n                  </td>\r\n                  <td className=\"border-0 py-2\">\r\n                    <span className=\"table-span-light\">{firstName}</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td className=\"border-0 py-2\">\r\n                    <span className=\"table-span-dark\">Phone</span>\r\n                  </td>\r\n                  <td className=\"border-0 py-2\">\r\n                    <span className=\"table-span-light\">{Number}</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td className=\"border-0 py-2\">\r\n                    <span className=\"table-span-dark\">Email</span>\r\n                  </td>\r\n                  <td className=\"border-0 py-2\">\r\n                    <span className=\"table-span-light\">{Email}</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td className=\"border-0 py-2\">\r\n                    <span className=\"table-span-dark\">Address</span>\r\n                  </td>\r\n                  <td className=\"border-0 py-2\">\r\n                    <span className=\"table-span-light\">{address}</span>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </Card>\r\n\r\n          {contact.map((value, index) => {\r\n            return value;\r\n          })}\r\n          <Modal\r\n            title=\"Add Contact\"\r\n            visible={state.visible}\r\n            onOk={handleOk}\r\n            onCancel={handleCancel}\r\n          >\r\n            <Form>\r\n              <Row>\r\n                <Col sm>\r\n                  <Form.Group controlId=\"relationship\">\r\n                    <Form.Label>Relationship</Form.Label>\r\n                    <Form.Control\r\n                      name=\"relationship\"\r\n                      type=\"text\"\r\n                      placeholder=\"Relationship\"\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Group controlId=\"rcontact\">\r\n                    <Form.Label>Contact</Form.Label>\r\n                    <Form.Control as=\"select\" name=\"contact\">\r\n                      <option>1</option>\r\n                      <option>2</option>\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n              <Form.Group controlId=\"billThis\">\r\n                <Form.Check\r\n                  name=\"billThis\"\r\n                  type=\"checkbox\"\r\n                  label=\"Bill this contact\"\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n          </Modal>\r\n        </TabPane>\r\n        <TabPane tab=\"Activities\" key=\"2\">\r\n          <Activity id={props.location.state.id}></Activity>\r\n        </TabPane>\r\n        <TabPane tab=\"Calendar\" key=\"3\">\r\n          <Calendar\r\n            userId={props.location.state.userId}\r\n            matterId={props.location.state.id}\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Communication\" key=\"4\">\r\n          <Communication id={props.location.state.id}></Communication>\r\n        </TabPane>\r\n        {\r\n          /*\r\n          <TabPane tab=\"Phone Log\" key=\"5\">\r\n          <Card\r\n            title=\"Phone Log\"\r\n            extra={<a href=\"#\"></a>}\r\n            className=\"form-width mb-4\"\r\n          ></Card>\r\n             </TabPane>\r\n          */\r\n        }\r\n     \r\n        <TabPane tab=\"Notes\" key=\"6\">\r\n          <Notes id={props.location.state.id}></Notes>\r\n        </TabPane>\r\n        <TabPane tab=\"Document\" key=\"7\">\r\n          {console.log('matter in viw', props.location.state.matters)}\r\n          <Documents\r\n            matters={props.location.state.matters}\r\n            userId={props.location.state.userId}\r\n            matterId={props.location.state.id}\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Task\" key=\"8\">\r\n          <TaskFuntions id={props.location.state.id}></TaskFuntions>\r\n        </TabPane>\r\n        <TabPane tab=\"Bills\" key=\"9\">\r\n          <Bills \r\n          userId={props.location.state.userId}\r\n          matterId={props.location.state.id}\r\n          handleRecordPayment={handleRecordPayment} \r\n          handleBills = {handleCreateBills} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  \r\n    </Spin>\r\n    );\r\n}\r\n\r\nexport default CompanyView;\r\n"],"sourceRoot":""}