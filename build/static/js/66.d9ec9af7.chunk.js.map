{"version":3,"sources":["App/containers/ContactManagement/ExportExcel.js","App/containers/ContactManagement/index.jsx"],"names":["ExportExcel","Component","constructor","props","super","render","id","className","this","dataSource","map","p","index","key","firstName","emailAddress","value","table","filename","sheet","buttonText","ContactsManage","console","log","userId","useSelector","state","user","token","_id","useState","type","setType","useDispatch","ref","useRef","useEffect","current","usePrevious","location","companyData","setcompanyData","setValue","Loading","setLoading","contactData","setcontactData","showNameInput","setShowNameInput","showEmailInput","setShowEmailInput","response","company","tableData","setState","dataSrc","setDataSrc","Contact","contacts","a","api","get","setTable","fetchEventData","data","lastName","billingCustomRate","emailType","newtableData","push","name","window","localStorage","getItem","setItem","handleAddNew","history","setTableData","FilterByNameInput","SearchOutlined","style","onClick","paddingLeft","paddingTop","placeholder","onChange","e","filteredData","target","length","filter","item","toLowerCase","includes","columns","title","dataIndex","text","highlightStyle","backgroundColor","padding","searchWords","autoEscape","textToHighlight","toString","_","record","variant","handleView","handleEdit","onConfirm","then","notification","success","message","catch","error","setTimeout","reload","handleDelete","okText","cancelText","danger","i","size","spinning","doc","jsPDF","setFontSize","val","td","content","startY","head","body","autoTable","save","color","onRow","rowIndex","onDoubleClick","onContextMenu","event","onMouseEnter","onMouseLeave"],"mappings":"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","file":"static/js/66.d9ec9af7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport { Button } from 'antd';\n\nexport class ExportExcel extends Component {\n  constructor(props) {\n    super(props);\n  \n  }\n\n  render() {\n    return (\n      <div>\n        <table id=\"emp\" className=\"d-none\">\n          <thead>\n            <tr>\n              <th>S.No</th>\n              <th>Name</th>\n              <th>Email Address</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {this.props.dataSource.map((p, index) => {\n              \n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n\n                  <td>{p.firstName}</td>\n                  <td>{p.emailAddress.map((value) => {\n                \n                        return value;\n                      })}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <ReactHTMLTableToExcel\n          className=\"btn btn-outline-primary btn-sm excel-button\"\n          table=\"emp\"\n          filename=\"contacts\"\n          sheet=\"Sheet\"\n          buttonText=\"Export to Excel\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExportExcel;\n","import React, { useEffect, useState, useRef } from 'react';\nimport { Table, Button, Input, Space, notification, Card , Popconfirm , Spin} from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport 'antd/dist/antd.css';\nimport Highlighter from 'react-highlight-words';\nimport { useDispatch, useSelector } from 'react-redux';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport ExportExcel from './ExportExcel';\n\nimport api from '../../../resources/api';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  console.log(ref.current)\n  return ref.current;\n\n}\nconst ContactsManage = (props) => {\n  console.log(props)\n  const userId = useSelector((state) => state.user.token.user._id);\n  const [type, setType] = useState('contact');\n  const dispatch = useDispatch();\n  const prevLocation = usePrevious(props.location)\n  const [companyData, setcompanyData] = useState([]);\n  const [value, setValue] = useState('');\n  const [Loading, setLoading] = useState(true)\n  const [contactData, setcontactData] = useState([]);\n  const [showNameInput, setShowNameInput] = useState(false);\n  const [showEmailInput, setShowEmailInput] = useState(false);\n  let response = {};\n  let company = {};\n  //Search Related\n  const [state, setState] = useState({\n    tableData: [],\n  });\n  const [dataSrc, setDataSrc] = useState([]);\n  const contacts = useSelector((state) => {\n    return state.Contact.contacts;\n  });\n  const [searchInput, setSearchInput] = useState();\n  /*\n  useEffect(()=>{\n    setTableData(contacts)\n    console.log(contacts)\n  },[contacts])\n  useEffect(() => {\n    dispatch(getBlogs());\n  }, []); */\n  \n  async function fetchEventData() {\n    response = await api.get('/contact/viewforuser/' + userId);\n    company = await api.get('/company/viewforuser/' + userId);\n    \n    setTable();\n  }\n  useEffect(() => {\n    fetchEventData();\n  }, []);\n\n  const setTable = () => {\n    setLoading(false)\n    response.data.data.map((value, id) => {\n      let key = id;\n\n      const data = {\n        firstName: value.firstName + ' ' + value.lastName,\n        billingCustomRate: value.billingCustomRate,\n        _id: value._id,\n        emailAddress: value.emailAddress.map((value) => {\n          return value.emailType + ' : ' + value.emailAddress + ' ,\\n ';\n        }),\n      };\n      let newtableData = contactData;\n      newtableData.push(data);\n      setcontactData(newtableData);\n    });\n    console.log(company)\n    company.data.data.map((value, id) => {\n      let key = id;\n      const data = {\n        firstName: value.name,\n        _id: value._id,\n        billingCustomRate: value.billingCustomRate,\n        emailAddress: value.emailAddress.map((value) => {\n          if(value != null ){\n            return value.emailType + ' : ' + value.emailAddress + ' ,\\n '\n          }\n        }),\n      };\n      let newtableData = companyData;\n      newtableData.push(data);\n      setcompanyData(newtableData);\n    });\n    const nav = window.localStorage.getItem('company')\n    if(nav === \"true\"){\n      setState({ tableData: companyData });\n      setType('company')\n    }else{\n      setState({ tableData: contactData });\n      setType('contact')\n    }\n    \n    window.localStorage.setItem('company', \"false\")\n    \n  };\n\n  //   const handleciSelect = (record) => {\n  //     // dispatch(selectBlog(record))\n  //     // props.history.push('/lawyer/details')\n  //   }\n\n  const handleAddNew = (type) => {\n    //  dispatch(selectBlog())\n    if (type === 'Person') {\n      props.history.push('/manage/contacts/add/Person');\n    } else if (type === 'Company') {\n      props.history.push('/manage/contacts/add/Company');\n    }\n  };\n  const setTableData = (type) => {\n    //  dispatch(selectBlog())\n    if (company != {} && response != {}) {\n      if (type === 'Person') {\n        setState({ tableData: contactData });\n\n        setType('contact');\n      } else if (type === 'Company') {\n        setState({ tableData: companyData });\n        setType('company');\n      }\n    }\n  };\n\n  const handleEdit = (record) => {\n    //   dispatch(selectBlog(record))\n \n    if (type === 'contact') {\n      props.history.push('/edit/contact', record);\n    } else if (type === 'company') {\n      props.history.push('/edit/company', record);\n    }\n  };\n\n  const handleDelete = (record) => {\n\n    if (type === 'contact') {\n      api\n        .get('/contact/delete/' + record._id)\n        .then(() =>{\n          //fetchEventData()\n          notification.success({ message: 'Contact deleted.' })\n        }\n        )\n        .catch(() => notification.error({ message: 'Failed to delete' }));\n    } else if (type === 'company') {\n      api\n        .get('/company/delete/' + record._id)\n        .then(() => notification.success({ message: 'Company deleted.' }))\n        .catch(() => notification.error({ message: 'Failed to delete' }));\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1000);\n  };\n  const FilterByNameInput = (\n    <div>\n      <SearchOutlined\n      style={{\"vertical-align\": \"revert\"}}\n        onClick={() => {\n          var dump =\n            showNameInput === false\n              ? setShowNameInput(true)\n              : setShowNameInput(false);\n        }}\n      />\n      <span style={{paddingLeft : \"8px\"}}> Name </span>\n\n      {showNameInput && (\n        <div style={{paddingTop : \"10px\"}}>\n          <input\n            placeholder=\"Search\"\n            value={value}\n            onChange={(e) => {\n              let filteredData;\n              setValue(e.target.value);\n              if (e.target.value.length !== 0 || e.target.value === '') {\n                filteredData = state.tableData.filter((item) =>\n                  item.firstName\n                    .toLowerCase()\n                    .includes(e.target.value.toLowerCase())\n                );\n                setDataSrc(filteredData);\n              } else {\n                setDataSrc(state.tableData);\n              }\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n  const FilterByEmailInput = (\n    <div>\n      <SearchOutlined\n        onClick={() => {\n          showEmailInput === false\n            ? setShowEmailInput(true)\n            : setShowEmailInput(false);\n        }}\n      />\n      <span> Email </span>\n\n      {showEmailInput && (\n        <div>\n          <input\n            placeholder=\"Search Email\"\n            value={value}\n            onChange={(e) => {\n              let filteredData;\n              setValue(e.target.value);\n              if (e.target.value.length !== 0 || e.target.value === '') {\n                filteredData = state.tableData.filter(\n                  (item) =>\n                    item.emailAddress !== undefined &&\n                    item.emailAddress\n                      .toLowerCase()\n                      .includes(e.target.value.toLowerCase())\n                );\n                setDataSrc(filteredData);\n              } else {\n                setDataSrc(state.tableData);\n              }\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n  const columns = [\n    {\n      title: FilterByNameInput,\n      dataIndex: 'firstName',\n      key: '_id',\n\n      render: (text) => (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0}}\n          searchWords={[value]}\n          autoEscape\n          textToHighlight={text ? text.toString() : ''}\n        />\n      ),\n    },\n    {\n      title: 'Email',\n      dataIndex: 'emailAddress',\n      key: '_id',\n      // render: (_, record) => {\n      //   console.log(record);\n      //   return <div>hi{record.emailAddress[0].emailAddress}</div>;\n      // },\n      // render: (text) => (\n      //   <Highlighter\n      //     highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n      //     searchWords={[value]}\n      //     autoEscape\n      //     textToHighlight={text ? text.toString() : ''}\n      //   />\n      // ),\n    },\n    {\n      title: 'View',\n      dataIndex: 'view',\n      key: '_id',\n      render: (_, record) => {\n        return (\n          <Button variant=\"danger\" onClick={() => handleView(record)}>\n            View\n          </Button>\n        );\n      },\n    },\n    {\n      title: 'Edit',\n      dataIndex: 'edit',\n      key: '_id',\n      render: (_, record) => {\n        return (\n          <Button variant=\"danger\" onClick={() => handleEdit(record)}>\n            Edit\n          </Button>\n        );\n      },\n    },\n\n    {\n      title: 'Delete',\n      dataIndex: 'delete',\n      key: '_id',\n      render: (_, record) => {\n        return (\n          <Popconfirm\n          title=\"Are you sure delete this contact?\"\n          onConfirm={() => handleDelete(record)}\n          okText=\"Yes\"\n          cancelText=\"No\"\n        >\n          <Button danger>\n            Delete\n          </Button>\n        </Popconfirm>\n          \n        );\n      },\n    },\n  ];\n\n  const handleView = (i) => {\n    if (type === 'contact') {\n      props.history.push('/view/contact', i._id);\n    }\n    if (type === 'company') {\n      props.history.push('/view/company', i._id);\n    }\n  };\n  const exportPDF = () => {\n    const unit = 'pt';\n    const size = 'A4'; // Use A1, A2, A3 or A4\n    const orientation = 'portrait'; // portrait or landscape\n\n    const marginLeft = 40;\n    const doc = new jsPDF(orientation, unit, size);\n\n    doc.setFontSize(15);\n\n    const title = 'Contacts';\n    const headers = [['Name', 'Email']];\n\n    let data = [];\n    state.tableData.map((val, index) => {\n      const td = [val.firstName, val.emailAddress];\n      data.push(td);\n    });\n\n    let content = {\n      startY: 50,\n      head: headers,\n      body: data,\n    };\n\n    doc.text(title, marginLeft, 40);\n    doc.autoTable(content);\n    doc.save('contact.pdf');\n  };\n  return (\n    <Spin size = \"large\" spinning={Loading}>\n      \n      <div className=\"d-flex mb-2 title-component-header\">\n            <div className=\"title-header-name\">\n              <h5>Contacts</h5>\n            </div>\n            <div className=\"d-flex extra-iteam-div\">\n                <button\n                    className=\"btn  btn-outline-primary   btn-sm\"\n                    onClick={exportPDF}\n                >\n                    Export to Pdf\n                </button>\n                <ExportExcel dataSource={state.tableData || []} />\n            </div> \n      </div>\n      <Card>\n        <div className = \"d-flex justify-content-between give-box-direction\">\n          <div>\n          <Button\n            color=\"success\"\n            style={{\"margin\": \"0 10px 10px 0\"}}\n            onClick={() => setTableData('Person')}\n          >\n            Person\n          </Button>\n          <Button\n            color=\"success\"\n            style={{\"margin\": \"0 10px 10px 0\"}}\n            onClick={() => setTableData('Company')}\n          >\n            Company\n          </Button>\n          </div>\n          <div>\n            <Button\n              color=\"success\"\n              style={{\"margin\": \"0 10px 10px 0\"}}\n              onClick={() => handleAddNew('Person')}\n            >\n              Add Person\n            </Button>\n            <Button\n              color=\"success\"\n              style={{\"margin\": \"0 10px 10px 0\"}}\n              onClick={() => handleAddNew('Company')}\n            >\n              Add Company\n            </Button>\n          </div>\n        </div>\n      <Table\n        className = \"table-responsive\"\n        dataSource={\n          dataSrc.length === 0 && value === '' ? state.tableData : dataSrc\n        }\n        columns={columns}\n        onRow={(record, rowIndex) => {\n          return {\n            onDoubleClick: () => handleView(record), // double click row\n            onContextMenu: (event) => {}, // right button click row\n            onMouseEnter: (event) => {}, // mouse enter row\n            onMouseLeave: (event) => {}, // mouse leave row\n          };\n        }}\n      ></Table>\n    </Card>\n  \n    </Spin>\n    );\n};\n\nexport default ContactsManage;\n"],"sourceRoot":""}