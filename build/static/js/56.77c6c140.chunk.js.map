{"version":3,"sources":["App/components/AddEditAccount/EditAccount.js"],"names":["validNameRegex","RegExp","EditAccount","props","history","useHistory","userId","useSelector","state","user","token","_id","useState","setfirstTrue","type","accountName","accountHolder","accountNumber","institution","domicileBranch","swiftCode","transitNumber","currency","openingBalance","setState","error","setError","display","setDisplay","Disabled","setDisabled","useEffect","api","get","location","then","res","newState","defaultAccount","data","console","log","catch","err","handelChange","e","persist","target","name","value","errors","length","test","DomicileBranch","st","className","Group","controlId","Label","Control","as","onChange","placeholder","Row","sm","Check","defaultChecked","label","disabled","onClick","preventDefault","notification","destroy","valid","Object","values","forEach","val","validateForm","warning","message","keys","every","k","post","success","goBack","checkValidity"],"mappings":"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","file":"static/js/56.77c6c140.chunk.js","sourcesContent":["import React, { useState, useEffect } from  'react'\nimport { useSelector } from 'react-redux'\nimport { Form, Col, Button} from 'react-bootstrap'\nimport { Card, message, notification } from 'antd';\nimport { useHistory } from 'react-router-dom';\nimport api from '../../../resources/api'\n\nconst validNameRegex = RegExp(\n    /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u\n  );\n\nconst EditAccount = (props) =>{\n\n    const history = useHistory()\n    const userId = useSelector((state) => state.user.token.user._id);\n    const [firstTrue, setfirstTrue] = useState(false)\n    const [state, setState] = useState({\n        userId : userId,\n        type: \"\",\n        accountName: \"\",\n        accountHolder: \"\",\n        accountNumber: \"\",\n        institution: \"\",\n        domicileBranch: \"\",\n        swiftCode: \"\",\n        transitNumber: \"\",\n        currency: \"\",\n        openingBalance: \"\"\n    })\n    const [error, setError] = useState({})\n    const [display, setDisplay] = useState(false)\n    const [Disabled, setDisabled] = useState(false)\n    // get Account Data\n    useEffect(() => {\n        api\n        .get(\"/account/view/\"+props.location.state)\n        .then((res) => {\n            let newState = state\n            newState.defaultAccount = res.data.data.defaultAccount\n            if(newState.defaultAccount){\n                setfirstTrue(true)\n            }\n            setState(newState)\n            setState({...state, ...res.data.data})\n            console.log(state)\n        })\n        .catch((err) => {\n          console.log(err); \n        });\n      }, []);\n\n\n    // handel the change of form & set the error msg\n    const handelChange = e =>{\n        e.persist();\n        setDisplay(false)\n        const {name, value} = e.target;\n        console.log(\"chnage\")\n        if(name === \"defaultAccount\"){\n            let data = state\n            data.defaultAccount = data.defaultAccount ? false : true\n            setState(data)\n        }else{\n        let errors = error\n        switch (name) {\n            case \"type\":\n                errors.type = value === \"default\" ? \"Account Type is required!\" : \"\";\n                break;\n            case \"accountName\":\n                errors.accountName =\n                    value.length == 0\n                    ? \"Account Name is required!\"\n                    : !validNameRegex.test(value)\n                    ? \"Account Name must be in characters!\"\n                    : \"\";\n                break;\n            case \"accountHolder\":\n                errors.accountHolder =\n                    value.length == 0\n                    ? \"Account Holder is required!\"\n                    : !validNameRegex.test(value)\n                    ? \"Account Holder must be in characters!\"\n                    : \"\";\n                break;\n            case \"accountNumber\":\n                errors.accountNumber =\n                    value.length == 0\n                    ? \"Account Number is required!\"\n                    : \"\";\n                break;\n            case \"institution\":\n                errors.institution =\n                    value.length == 0\n                    ? \"Institution is required!\"\n                    : !validNameRegex.test(value)\n                    ? \"Institution must be in characters!\"\n                    : \"\";\n                break;\n            case \"domicileBranch\":\n                errors.DomicileBranch =\n                    value.length == 0\n                    ? \"Domicile Branch is required!\"\n                    : \"\";\n                break;\n            case \"swiftCode\":\n                errors.swiftCode =\n                    value.length == 0\n                    ? \"Swift Code is required!\"\n                    : \"\";\n                break;\n            case \"transitNumber\":\n                errors.transitNumber =\n                    value.length == 0\n                    ? \"Transit Number is required!\"\n                    : \"\";\n                break;\n            case \"currency\":\n                errors.currency = value === \"default\" ? \"Currency is required!\" : \"\";\n                break;\n            case \"openingBalance\":\n                errors.openingBalance =\n                    value.length == 0\n                    ? \"Opening Balance is required!\"\n                    : value > 0 \n                    ? \"\"\n                    : \"Opening Balance Greater than 0\"\n                    break;\n            default:\n                break;\n        }\n        setError( (st) => ({...st, ...errors }))\n        setState( (st) => ({...st, [name] : value }));\n        \n        }\n        console.log(state.defaultAccount)\n    }\n\n    // handel Submit of form \n    const handelSubmit = e =>{\n        e.preventDefault();\n        notification.destroy()\n        if(!display){\n          const validateForm = (error) => {\n            let valid = true;\n            Object.values(error).forEach((val) => val.length > 0 && (valid = false));\n            return valid;\n          };\n          if (validateForm(error)) {\n            checkValidity();\n          } else {\n            setDisplay(true)\n            return notification.warning({\n              message: \"Failed to Add New Account\",\n            });\n          }\n        }\n      };\n    \n      // Check the Fields are Empty \n      function checkValidity() {\n        if (!Object.keys(state).every((k) => state[k] !== \"\")) {\n          setDisplay(true)\n          return notification.warning({\n            message: \"Fields Should Not Be Empty\",\n          });\n        } else {\n            // if form is valid then do something\n            setDisabled(true)\n            /*\n            if(firstTrue){\n                let newState = state\n                newState.defaultAccount = !newState.defaultAccount\n                setState(newState)\n            }\n            */\n            api.post(\"/account/edit/\"+props.location.state, state)\n                .then((res) => {\n                    console.log(res)\n                    setDisabled(false)\n                    notification.success({message : \"Account Edited.\"})\n                    history.goBack();\n                }).catch((err) => {\n                    console.log(err); \n                    setDisabled(false)\n                    notification.error({message : \"Failed to edit account.\"})\n                  });\n        }\n        \n      }\n\n    return(\n        <>\n        <div className='form-width'>\n            <div className=\"form-header-container mb-4\">\n                <h3 className=\"form-header-text\">Edit Account</h3>\n            </div>\n            <Card className=\"mb-4\">\n                <Form className=\"form-details\">\n                    <Form.Group controlId=\"type\">\n                        <Form.Label>Account Type</Form.Label>\n                        <Form.Control\n                            as=\"select\"\n                            name=\"type\"\n                            onChange={handelChange}\n                            value={state[\"type\"]}\n                        >\n                            <option value=\"default\">Select Account Type</option>\n                            <option value=\"Operating Account\">Operating Account</option>\n                            <option value=\"Trust Account\">Trust Account</option>\n                        </Form.Control>\n                        <p className=\"help-block text-danger\">{error.type}</p>\n                    </Form.Group>\n                    \n\n                    <Form.Group controlId=\"accountName\">\n                        <Form.Label>Account Name</Form.Label>\n                        <Form.Control type=\"text\" name=\"accountName\" placeholder=\"Account name\" value={state[\"accountName\"]} onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.accountName}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"accountHolder\">\n                        <Form.Label>Account Holder</Form.Label>\n                        <Form.Control type=\"text\" name=\"accountHolder\" placeholder=\"Account Holder\" value={state[\"accountHolder\"]} onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.accountHolder}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"accountNumber\">\n                        <Form.Label>Account Number</Form.Label>\n                        <Form.Control type=\"number\" name=\"accountNumber\" placeholder=\"Account Number\" value={state[\"accountNumber\"]} onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.accountNumber}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"institution\">\n                        <Form.Label>Institution</Form.Label>\n                        <Form.Control type=\"text\" name=\"institution\" placeholder=\"Institution\" value={state[\"institution\"]} onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.institution}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"domicileBranch\">\n                        <Form.Label>Domicile Branch</Form.Label>\n                        <Form.Control type=\"text\" name=\"domicileBranch\" placeholder=\"Domicile Branch\" value={state[\"domicileBranch\"]} onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.domicileBranch}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"swiftCode\">\n                        <Form.Label>Swift Code</Form.Label>\n                        <Form.Control type=\"text\" name=\"swiftCode\" placeholder=\"Swift Code\" value={state[\"swiftCode\"]} onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.swiftCode}</p>\n                    </Form.Group>\n                    <Form.Row>\n                        <Col sm>\n                            <Form.Group controlId=\"transitNumber\">\n                                <Form.Label>Transit Number</Form.Label>\n                                <Form.Control type=\"text\" name=\"transitNumber\" placeholder=\"Transit Number\" value={state[\"transitNumber\"]} onChange={handelChange}/>\n                                <p className=\"help-block text-danger\">{error.transitNumber}</p>\n                            </Form.Group>\n                        </Col>\n                        <Col sm>\n                            <Form.Group controlId=\"currency\">\n                                <Form.Label>Currency</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"currency\"\n                                    onChange={handelChange}\n                                    value={state[\"currency\"]}\n                                >\n                                    <option value=\"default\">Select Currency</option>\n                                    <option value=\"USD $\">USD $</option>\n                                    <option value=\"EUR €\">EUR €</option>\n                                </Form.Control>\n                                <p className=\"help-block text-danger\">{error.currency}</p>\n                            </Form.Group>\n                        </Col>\n                    </Form.Row>\n\n                    <Form.Group controlId=\"openingBalance\">\n                        <Form.Label>Opening Balance</Form.Label>\n                        <Form.Control type=\"number\" name=\"openingBalance\" placeholder=\"Opening Balance\" value={state[\"openingBalance\"]} onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.openingBalance}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"defaultAccount\">\n                        <Form.Check defaultChecked = { state.defaultAccount } type=\"checkbox\" name=\"defaultAccount\" label=\"Set the account as default account\" onChange={handelChange} />\n                    </Form.Group>\n                    <br /><br />\n                    <Button disabled = {Disabled} onClick={handelSubmit}>Edit Bank Account</Button>\n                </Form>\n            </Card>\n        </div>          \n        </>\n    )\n}\n\nexport default EditAccount\n"],"sourceRoot":""}