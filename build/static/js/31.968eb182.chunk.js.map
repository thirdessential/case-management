{"version":3,"sources":["App/containers/Tasks/UpcomingTasks/upcomingTasks.js","App/containers/Tasks/CompletedTasks/CompletedTasks.js","App/containers/Tasks/EditForm.js","App/containers/Tasks/ExcelExport.js","App/containers/Tasks/List/editForm.js","App/containers/Tasks/List/List.js","App/containers/Tasks/Taskform.js","App/containers/Tasks/index.js"],"names":["TabPane","Tabs","UpcomingTasks","props","now","Date","start_of_week","end_of_week","getTime","getDay","tomorrow","setDate","getDate","yesterday","console","log","undefined","tableData","length","defaultActiveKey","tab","key","className","dataSource","columns","filter","item","date","parse","dueDate","getMonth","getFullYear","CompletedTask","useState","Option","Select","React","Component","ExportExcel","constructor","super","getISTDate","dateInUTC","toLocaleString","render","this","id","map","value","index","matter","taskName","description","matterDescription","substring","table","filename","sheet","buttonText","ListForm","state","name","record","componentWillReceiveProps","nextProps","setState","componentDidMount","Form","Group","controlId","Label","Control","type","placeholder","defaultValue","onChange","handleChange","as","practiseArea","user","JSON","window","localStorage","getItem","AddList","showModal","visible","handleOk","data","notification","warning","message","newstate","disabled","editMode","api","post","then","res","userId","token","_id","success","catch","err","error","ModalText","confirmLoading","ReactDOM","findDOMNode","messageForm","reset","setTimeout","handleCancel","spinning","get","temp","decription","push","title","dataIndex","_","variant","onClick","handleEdit","onConfirm","handleDelete","okText","cancelText","danger","e","persist","target","size","onOk","onCancel","footer","ref","form","onRow","rowIndex","onDoubleClick","handleView","onContextMenu","event","onMouseEnter","onMouseLeave","TaskForm","response","Tasks","exportPDF","doc","jsPDF","setFontSize","val","td","content","startY","head","body","text","autoTable","save","openNotificationWithFailure","openNotificationWithSucces","Data","priority","newState","selectedIndex","edit","delete","history","sortDirections","sorter","a","b","handelAction","cancel","Check","EditHandler","deleteHandler","destroy","valid","disable","matterId","status","handelNonAction","newcolumns","loading","selected","options","location","CompletedData","upcomingData","newdata","List","ListData","required","rows","connect"],"mappings":"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","file":"static/js/31.968eb182.chunk.js","sourcesContent":["import { Tabs, Table } from 'antd';\r\nimport React, { useState } from 'react';\r\nconst { TabPane } = Tabs;\r\n\r\nconst UpcomingTasks = (props) => {\r\n  var now = new Date();\r\n // var start_of_week = new Date(now.setDate(now.getDate() - now.getDay()));\r\n  var start_of_week= now\r\n  var end_of_week = new Date(\r\n    now.getTime() + (6 - now.getDay()) * 24 * 60 * 60 * 1000\r\n  );\r\n  const tomorrow = new Date(now);\r\n  tomorrow.setDate(tomorrow.getDate() + 1);\r\n  const yesterday = new Date()\r\n  yesterday.setDate(yesterday.getDate() - 1);\r\n  console.log( \" tommorow :\" + tomorrow )\r\n  console.log(  \" today : \" + now)\r\n  if (props.tableData !== undefined && props.tableData.length !== 0) {\r\n    return (\r\n      <Tabs defaultActiveKey=\"1\">\r\n        <TabPane tab=\"All\" key=\"1\">\r\n          <Table className=\"table-responsive\" dataSource={props.tableData} columns={props.columns} />\r\n        </TabPane>\r\n        <TabPane tab=\"Due Today\" key=\"3\">\r\n          <Table\r\n          className=\"table-responsive\"\r\n            dataSource={props.tableData.filter((item) => {\r\n              var date = new Date(Date.parse(item.dueDate));\r\n              return (\r\n                date.getDate() === now.getDate() &&\r\n                date.getMonth() === now.getMonth() &&\r\n                date.getFullYear() === now.getFullYear()\r\n              );\r\n            })}\r\n            columns={props.columns}\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Due this Week\" key=\"2\">\r\n          <Table\r\n          className=\"table-responsive\"\r\n            dataSource={props.tableData.filter((item) => {\r\n              var date = new Date(Date.parse(item.dueDate));\r\n              return date < end_of_week && date > start_of_week || (date.getDate() === now.getDate() &&\r\n              date.getMonth() === now.getMonth() &&\r\n              date.getFullYear() === now.getFullYear());\r\n            })}\r\n            columns={props.columns}\r\n          />\r\n        </TabPane>\r\n\r\n        <TabPane tab=\"Due Tomorow\" key=\"4\">\r\n          <Table\r\n          className=\"table-responsive\"\r\n            dataSource={props.tableData.filter((item) => {\r\n              var date = new Date(Date.parse(item.dueDate));\r\n              return (\r\n                date.getDate() === tomorrow.getDate() &&\r\n                date.getMonth() === tomorrow.getMonth() &&\r\n                date.getFullYear() === tomorrow.getFullYear()\r\n              );\r\n            })}\r\n            columns={props.columns}\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Overdue\" key=\"5\">\r\n          <Table\r\n            className=\"table-responsive\"\r\n            dataSource={props.tableData.filter((item) => {\r\n              var date = new Date(Date.parse(item.dueDate));\r\n              return date <= yesterday\r\n            })}\r\n            columns={props.columns}\r\n          />\r\n        </TabPane>\r\n      </Tabs>\r\n    );\r\n  }\r\n  return <div></div>;\r\n};\r\n\r\nexport default UpcomingTasks;\r\n","import React, {useState, useEffect} from 'react';\r\n//import Content from './Content/Content'\r\nimport { Table } from 'antd';\r\nimport api from '../../../../resources/api';\r\nfunction CompletedTask(props) {\r\n\r\n  const [state, setState] = useState([])\r\n /*\r\n  useEffect(() => {\r\n    api.get('/tasks/showall')\r\n    .then((res)=> {\r\n      console.log(res.data.data) \r\n      const newdata = res.data.data.filter(function( obj ) {\r\n          return obj.status == true;\r\n        });\r\n      setState([...state, ...newdata])\r\n    })\r\n  }, []);\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <Table className=\"table-responsive\" columns={props.columns} dataSource={props.tableData} />\r\n    </div>\r\n  );\r\n}\r\nexport default CompletedTask;\r\n","import React from 'react'\nimport { extend } from 'jquery'\nimport { Form, Row , Col , Button } from \"react-bootstrap\";\nimport { Input, Select } from 'antd';\nimport { InfoCircleOutlined, UserOutlined } from '@ant-design/icons';\nimport api from '../../../resources/api';\n\n\nconst { Option } = Select;\n\nconst selectBefore = (\n  <Select defaultValue=\"Firm User\" className=\"select-before\">\n    <Option value=\"FirmUser\">Firm User</Option>\n    <Option value=\"Contacts\">Contacts</Option>\n  </Select>\n);\n\nclass TaskForm extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      matter : \"\",\n      data : {\n        taskName : \"\",\n        matter : \"\"\n      }\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    \n      if (nextProps !== this.props) {\n        console.log(\"not equal\")\n        console.log(this.props)\n        console.log(nextProps)\n        this.setState({data : nextProps.data})\n      }\n    \n  }\n  componentDidMount(){\n    this.setState({data : this.props.data})\n      console.log(this.state.data.matter)\n\n        api.get('/matter/view/'+ this.props.data.matter).then((res)=>{\n          console.log(res)\n          const formData = <Form.Group controlId=\"matter\">\n                            <Form.Label>Matter</Form.Label>\n                            <Form.Control\n                              required\n                              as=\"select\"\n                              defaultValue={res.data.data != null ? res.data.data.matterDescription : \"s\"}\n                              onChange={this.props.handleChange}\n                              name=\"matter\"\n                            >\n                              <option>Select a matter</option>\n                              {this.props.options}\n                            </Form.Control>\n                          </Form.Group>\n          this.setState({matter : formData})\n        })\n\n  \n  }\n    render(){\n        console.log(this.props.data)\n      \n        return <Form className=\"form-details\">\n                  <Form.Group controlId=\"taskName\">\n                    <Form.Label>Task Name</Form.Label>\n                    <Form.Control\n                      required\n                      type=\"text\"\n                      defaultValue={this.state.data.taskName}\n                      onChange={this.props.handleChange}\n                    />\n                  </Form.Group>\n\n                  <Form.Group controlId=\"dueDate\">\n                    <Form.Label>Due Date</Form.Label>\n                    <Form.Control\n                      type=\"date\"\n                      defaultValue={this.state.data.dueDate ? this.state.data.dueDate.substring(0,10) : \"\"}\n                      onChange={this.props.handleChange}\n                    />\n                  </Form.Group>\n\n                  <Form.Group controlId=\"description\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                      required\n                      defaultValue={this.state.data.description}\n                      as=\"textarea\"\n                      rows=\"3\"\n                      onChange={this.props.handleChange}\n                    />\n                  </Form.Group>\n\n                {\n                  /*\n                    <Form.Group controlId=\"taskName\">\n                    <Form.Label>Assignee</Form.Label>\n                    <div>\n                      <Input addonBefore={selectBefore} size=\"large\" suffix={<UserOutlined className=\"site-form-item-icon\" />}  placeholder=\"Type a name...\" />\n                    </div>\n                  </Form.Group>\n                  */\n                }\n\n                  <Form.Group controlId=\"priority\">\n                    <Form.Label>Priority</Form.Label>\n                    <Form.Control\n                      as=\"select\"\n                    \n                      required\n                      defaultValue={this.state.data.priority}\n                      onChange={this.props.handleChange}\n                    >\n                      <option>Low</option>\n                      <option>Normal</option>\n                      <option>High</option>\n                    </Form.Control>\n                  </Form.Group>\n                  {this.state.matter}\n                  \n                  <br />\n                  {\n                    /* \n                    <Form.Group controlId=\"formBasicCheckbox\">\n                    <Form.Check type=\"checkbox\" label=\"Notify me when the task is completed\" />\n                  </Form.Group>\n                  <br />\n                  <Form.Group controlId=\"formBasicCheckbox\">\n                    <Form.Check type=\"checkbox\" label=\"Notify assignee via email\" />\n                  </Form.Group>\n                  <br />\n                    */\n                  }\n                </Form>\n    \n      \n    }\n}\n\nexport default TaskForm","import React, { Component } from 'react';\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\n\n\nexport class ExportExcel extends Component {\n  constructor(props) {\n    super(props);\n    console.log('data in excel', props.dataSource);\n  }\n  getISTDate(dateInUTC) {\n    var localDate = new Date(dateInUTC);\n    return localDate.toLocaleString();\n  }\n  render() {\n    console.log(this.props)\n    return (\n      <div>\n        <table id=\"matter\" className=\"d-none\">\n          <thead>\n            <tr>\n              <th>S.No</th>\n              <th>Task Name</th>\n              <th>Description</th>\n              <th>Matter</th>\n              <th>Due Date</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {this.props.dataSource.map((value, index) => {\n              if(value.matter){\n                return (\n                  <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td>{value.taskName}</td>\n                    <td>{value.description}</td>\n                    <td>{value.matter.matterDescription  ? value.matter.matterDescription  : value.matter}</td>\n                    <td>{value.dueDate.substring(0,10)}</td>\n                  </tr>\n                );\n              }\n            })}\n          </tbody>\n        </table>\n\n        <ReactHTMLTableToExcel\n          className=\"btn btn-outline-primary btn-sm excel-button\"\n          table=\"matter\"\n          filename=\"Task\"\n          sheet=\"Sheet\"\n          buttonText=\"Export to Excel\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExportExcel;\n","import React from 'react'\nimport { Form, Row, Col } from 'react-bootstrap';\n\n\nclass ListForm extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n     name : '',\n     record : {\n      \n     }\n    \n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    \n    if (nextProps !== this.props) {\n      console.log(\"not equal\")\n      console.log(this.props)\n      console.log(nextProps)\n      this.setState({record : nextProps.record})\n    }\n  \n}\n  componentDidMount(){\n    this.setState({record : this.props.record})\n      /*\n    this.setState({\n      name : \"\"\n    })\n      if(this.props.editMode){\n        this.setState({\n          name : this.props.record.name\n        })\n      }else{\n        this.setState({\n          name : \"\"\n        })\n      }\n      */\n  }\n    render(){\n        \n      console.log(this.state)\n      return  <Form>\n      <Form.Group controlId=\"formBasicEmail\">\n        <Form.Label>Name</Form.Label>\n        <Form.Control \n        type=\"text\" \n        placeholder=\"Name\"\n        name=\"name\"\n        defaultValue = {this.state.record.name}\n        onChange={this.props.handleChange} />\n      </Form.Group>\n  \n      <Form.Group controlId=\"formBasicPassword\">\n        <Form.Label>Descripton</Form.Label>\n        <Form.Control \n        type=\"text\" \n        placeholder=\"Description\" \n        defaultValue = {this.state.record.description}\n        onChange={this.props.handleChange}\n        name=\"decription\"/>\n      </Form.Group>\n      <Form.Group>\n        <Form.Label>Practice Area</Form.Label>\n        <Form.Control \n        as=\"select\"\n        name=\"practiseArea\"\n        onChange={this.props.handleChange}\n        value = {this.props.record.practiseArea}\n        \n       \n        >\n            <option>Select a practice area</option>\n            <option>Attorney</option>\n            <option>Administrative</option>\n            <option>Bankruptcy</option>\n            <option>Business</option>\n            <option>Builder's Liens</option>\n            <option>Civil Litigation</option>\n            <option>Commercial</option>\n            <option>Conveyance (Purchase)</option>\n            <option>Conveyance (Sale)</option>\n            <option>Corporate</option>\n            <option>Criminal</option>\n            <option>Employment</option>\n            <option>Estates</option>\n            <option>Family</option>\n            <option>Immigration</option>\n            <option>Insurance</option>\n            <option>Personal Injury</option>\n            <option>Tax</option>\n            <option>Wills</option>\n        </Form.Control>\n      </Form.Group>\n    </Form>\n     \n\n    }\n     \n}\nexport default ListForm","import { Modal, notification , Button, Popconfirm ,Table, Spin} from 'antd';\r\nimport React from 'react';\r\nimport { Form, Row, Col } from 'react-bootstrap';\r\nimport api from '../../../../resources/api';\r\nimport EditForm from './editForm'\r\nimport ReactDOM from 'react-dom'\r\nimport {connect} from 'react-redux'\r\n\r\nconst user = JSON.parse(window.localStorage.getItem('Case.user'))\r\nconsole.log(user)\r\nclass AddList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      data : {\r\n        userId : user.token.user._id,\r\n        name : ''\r\n      },\r\n      tableData : [],\r\n      ModalText: 'Content of the modal',\r\n      visible: false,\r\n      confirmLoading: false,\r\n      disabled : false,\r\n      editMode : false,\r\n      spinning : true\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    api.get('/tasks/list/viewforuser/'+ user.token.user._id).then((res)=>{\r\n      let tableData = []\r\n      console.log(res.data.data)\r\n      res.data.data.map((value,index)=>{\r\n        const temp = {\r\n          id : value._id,\r\n          key : index,\r\n          name : value.name,\r\n          description : value.decription,\r\n          practiseArea : value.practiseArea,\r\n        }\r\n    \r\n        tableData.push(temp)\r\n      })\r\n      this.setState({\r\n        tableData : tableData,\r\n        spinning : false\r\n      \r\n      })\r\n      console.log(this.state.tableData)\r\n    })\r\n    \r\n  }\r\n \r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n    console.log(\"show modal\" + this.state)\r\n    console.log(\"showModal \" + this.props)\r\n  };\r\n\r\n  handleOk = () => {\r\n    \r\n    if(this.state.data.name == ''){\r\n      notification.warning({message : \"Please provide name for the list\"})\r\n    }else{\r\n      let newstate = this.state\r\n      newstate.disabled = true\r\n      this.setState(newstate)\r\n      console.log(newstate)\r\n      console.log(this.state.disabled)\r\n      if(this.state.editMode){\r\n        const data = this.state.data\r\n        api.post('/tasks/list/edit/'+data.id,data).then((res)=>{\r\n  \r\n         this.setState({data :  {\r\n              userId : user.token.user._id\r\n            },\r\n            name : '',\r\n            editMode : false\r\n          })\r\n          this.componentDidMount()\r\n          notification.success({message : \"List Edited Successfully\"})\r\n        }).catch((err)=>{\r\n          notification.error({message : \"Failed\"})\r\n        })\r\n        this.setState({\r\n          ModalText: 'The modal will be closed after two seconds',\r\n          confirmLoading: true,\r\n    \r\n        });\r\n  \r\n      }else {\r\n\r\n        api.post('/tasks/list/create',this.state.data).then((res)=>{\r\n          this.setState({\r\n            data : {\r\n              userId : user.token.user._id,\r\n              name : '',\r\n            }\r\n          })\r\n          this.componentDidMount()\r\n          notification.success({message : \"List created Successfully\"})\r\n        }).catch((err)=>{\r\n          console.log(err)\r\n          notification.error({message : \"Failed\"})\r\n        }).then(()=>{\r\n          ReactDOM.findDOMNode(this.messageForm).reset()\r\n        })\r\n        this.setState({\r\n          ModalText: 'The modal will be closed after two seconds',\r\n          confirmLoading: true,\r\n        \r\n        });\r\n    \r\n      }\r\n      \r\n          setTimeout(() => {\r\n        //window.location.reload()\r\n        this.setState({\r\n          visible: false,\r\n          disabled : false,\r\n          confirmLoading: false,\r\n        });\r\n      }, 1200);\r\n      console.log(this.state.disabled)\r\n    }\r\n   \r\n  };\r\n\r\n  handleCancel = () => {\r\n    console.log('Clicked cancel button');\r\n    const newstate = this.state\r\n   \r\n    newstate.data = {\r\n      userId : user.token.user._id,\r\n      name : '',\r\n    }\r\n    newstate.visible = false\r\n    newstate.editMode = false\r\n    this.setState(newstate);\r\n    console.log(this.state.data)\r\n    \r\n    \r\n  };\r\n\r\n \r\n  render() {\r\n    \r\n    const columns = [\r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n  \r\n      },\r\n    \r\n      {\r\n        title: 'Practise Area',\r\n        dataIndex: 'practiseArea',\r\n        key: 'practiseArea',\r\n  \r\n      },\r\n      {\r\n        title: 'Description',\r\n        dataIndex: 'description',\r\n        key: 'description',\r\n  \r\n      },\r\n  \r\n      {\r\n        title: 'Edit',\r\n        dataIndex: 'edit',\r\n        key: '_id',\r\n        render: (_, record) => {\r\n          return (\r\n            <Button variant=\"danger\" onClick={() => handleEdit(record)}>\r\n              Edit\r\n            </Button>\r\n          );\r\n        },\r\n      },\r\n  \r\n      {\r\n        title: 'Delete',\r\n        dataIndex: 'delete',\r\n        key: '_id',\r\n        render: (_, record) => {\r\n          return (\r\n                <Popconfirm\r\n                    title=\"Are you sure delete this list?\"\r\n                    onConfirm={() => handleDelete(record)}\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                  >\r\n                    <Button danger >\r\n                              Delete\r\n                            </Button>\r\n                  </Popconfirm>\r\n            \r\n          );\r\n        },\r\n      },\r\n    ]\r\n    \r\n    const handleEdit = (record) => {\r\n\r\n      console.log(record)\r\n      this.setState({editMode : true, data : record })\r\n \r\n    };\r\n  \r\n    const handleDelete = (record) => {\r\n      api\r\n          .get('/tasks/list/delete/' + record.id)\r\n          .then((res) => {\r\n            this.componentDidMount()\r\n            notification.success({ message: 'List deleted.' })\r\n          \r\n          })\r\n          .catch(() => notification.error({ message: 'Failed to delete' }));\r\n          setTimeout(() => {\r\n            //window.location.reload();\r\n          }, 1000);\r\n     \r\n    };\r\n    const { visible, confirmLoading } = this.state;\r\n    const handleChange = (e) =>{\r\n      e.persist()\r\n      const { name , value} = e.target\r\n      let data = this.state.data\r\n      data[name] = value\r\n      this.setState({data : data})\r\n    }\r\n    \r\n\r\n    return (\r\n      <Spin size=\"large\" spinning = {this.state.spinning}>\r\n        <div >\r\n        <div>\r\n          <Button\r\n            onClick={this.showModal}\r\n            className=\"form-add-button\"\r\n          >\r\n            + Add List\r\n          </Button>\r\n          </div>\r\n        <Modal\r\n          title=\"Add List\"\r\n          visible={visible}\r\n          onOk={this.handleOk}\r\n          confirmLoading={confirmLoading}\r\n          onCancel={this.handleCancel}\r\n          footer={[\r\n            <Button  onClick={this.handleCancel}>\r\n              Cancel\r\n            </Button>,\r\n            <Button type=\"primary\" disabled={this.state.disabled} onClick={this.handleOk}>\r\n              Create List\r\n            </Button>,\r\n          ]}\r\n        >\r\n            <Form\r\n            id='myForm'\r\n            className=\"form\"\r\n            ref={ form => this.messageForm = form }>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                  <Form.Label>Name</Form.Label>\r\n                  <Form.Control \r\n                  type=\"text\" \r\n                  placeholder=\"Name\"\r\n                  name=\"name\"\r\n                  onChange={handleChange} />\r\n                </Form.Group>\r\n            \r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                  <Form.Label>Descripton</Form.Label>\r\n                  <Form.Control \r\n                  type=\"text\" \r\n                  placeholder=\"Description\" \r\n                  onChange={handleChange}\r\n                  name=\"decription\"/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                  <Form.Label>Practice Area</Form.Label>\r\n                  <Form.Control \r\n                  as=\"select\"\r\n                  onChange={handleChange}\r\n                  name=\"practiseArea\"\r\n                  >\r\n                      <option>Select a practice area</option>\r\n                      <option>Attorney</option>\r\n                      <option>Administrative</option>\r\n                      <option>Bankruptcy</option>\r\n                      <option>Business</option>\r\n                      <option>Builder's Liens</option>\r\n                      <option>Civil Litigation</option>\r\n                      <option>Commercial</option>\r\n                      <option>Conveyance (Purchase)</option>\r\n                      <option>Conveyance (Sale)</option>\r\n                      <option>Corporate</option>\r\n                      <option>Criminal</option>\r\n                      <option>Employment</option>\r\n                      <option>Estates</option>\r\n                      <option>Family</option>\r\n                      <option>Immigration</option>\r\n                      <option>Insurance</option>\r\n                      <option>Personal Injury</option>\r\n                      <option>Tax</option>\r\n                      <option>Wills</option>\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Form>\r\n        </Modal>\r\n        <Modal\r\n          title=\"Edit List\"\r\n          visible={this.state.editMode}\r\n          onOk={this.handleOk}\r\n          confirmLoading={confirmLoading}\r\n          onCancel={this.handleCancel}\r\n          footer={[\r\n            <Button  onClick={this.handleCancel}>\r\n              Cancel\r\n            </Button>,\r\n            <Button type=\"primary\" onClick={this.handleOk}>\r\n              Update List\r\n            </Button>,\r\n          ]}\r\n        >\r\n          <EditForm record = {this.state.data} handleChange = {handleChange}></EditForm>\r\n\r\n        </Modal>\r\n\r\n        <Table\r\n        dataSource={this.state.tableData}\r\n        columns={columns}\r\n        onRow={(record, rowIndex) => {\r\n          return {\r\n            onDoubleClick: () => this.props.handleView(record), // double click row\r\n            onContextMenu: (event) => {}, // right button click row\r\n            onMouseEnter: (event) => {}, // mouse enter row\r\n            onMouseLeave: (event) => {}, // mouse leave row\r\n          };\r\n        }}\r\n      ></Table>\r\n      </div>\r\n    \r\n      </Spin>\r\n      );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default AddList\r\n","\n\nimport React from 'react'\nimport { extend } from 'jquery'\nimport { Form, Row , Col , Button } from \"react-bootstrap\";\nimport { Input, Select } from 'antd';\nimport { InfoCircleOutlined, UserOutlined } from '@ant-design/icons';\nimport api from '../../../resources/api';\n\n\nconst { Option } = Select;\n\nconst selectBefore = (\n  <Select defaultValue=\"Firm User\" className=\"select-before\">\n    <Option value=\"FirmUser\">Firm User</Option>\n    <Option value=\"Contacts\">Contacts</Option>\n  </Select>\n);\n\n \nclass TaskForm extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      matter : \"\",\n      name : \"\"\n    }\n  \n  }\n  \n  componentDidMount(){\n    /*\n    if(this.props.editMode){\n      api.get('/matter/view/'+ this.props.data.matter).then((res)=>{\n        console.log(res)\n        const formData = <Form.Group controlId=\"matter\">\n                          <Form.Label>Matter</Form.Label>\n                          <Form.Control\n                            required\n                            as=\"select\"\n                            defaultValue={res.data.data.matterDescription}\n                            onChange={this.props.handleChange}\n                            name=\"matter\"\n                          >\n                            <option>Select a matter</option>\n                            {this.props.options}\n                          </Form.Control>\n                        </Form.Group>\n        this.setState({matter : formData})\n      })\n    }\n    */\n  }\n  \n    render(){\n      \n        return <Form className=\"form-details\">\n        <Form.Group controlId=\"taskName\">\n          <Form.Label>Task Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Task Name\"\n            defaultValue={this.state.name}\n            onChange={this.props.handleChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"dueDate\">\n          <Form.Label>Due Date</Form.Label>\n          <Form.Control\n            required\n            type=\"date\"\n            placeholder=\"Due Date\"\n            onChange={this.props.handleChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"description\">\n          <Form.Label>Description</Form.Label>\n          <Form.Control\n            required\n            as=\"textarea\"\n            rows=\"3\"\n            onChange={this.props.handleChange}\n          />\n        </Form.Group>\n\n      {/*\n        <Form.Group controlId=\"taskName\">\n          <Form.Label>Assignee</Form.Label>\n          <div>\n            <Input addonBefore={selectBefore} size=\"large\" suffix={<UserOutlined className=\"site-form-item-icon\" />}  placeholder=\"Type a name...\" />\n          </div>\n        </Form.Group>\n      */\n      }\n\n        <Form.Group controlId=\"priority\">\n          <Form.Label>Priority</Form.Label>\n          <Form.Control\n            as=\"select\"\n            defaultValue=\"Normal\"\n            required\n            onChange={this.props.handleChange}\n          >\n            <option>Low</option>\n            <option>Normal</option>\n            <option>High</option>\n          </Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"matter\">\n          <Form.Label>Matter</Form.Label>\n          <Form.Control\n            required\n            as=\"select\"\n            onChange={this.props.handleChange}\n            name=\"matter\"\n          >\n            <option>Select a matter</option>\n            {this.props.options}\n          </Form.Control>\n        </Form.Group>\n        <br />\n        {\n          /*\n            <Form.Group controlId=\"formBasicCheckbox\">\n          <Form.Check type=\"checkbox\" label=\"Notify me when the task is completed\" />\n        </Form.Group>\n        <br />\n        <Form.Group controlId=\"formBasicCheckbox\">\n          <Form.Check type=\"checkbox\" label=\"Notify assignee via email\" />\n        </Form.Group>\n        <br />\n          */\n\n        }\n       \n      </Form>\n    }\n}\n\nexport default TaskForm","import { Tabs } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport UpcomingTasks from './UpcomingTasks/upcomingTasks';\r\nimport CompletedTask from './CompletedTasks/CompletedTasks';\r\nimport List from './List/List';\r\nimport api from '../../../resources/api';\r\nimport { Button, Modal, notification, Popconfirm, message, Space, Spin } from 'antd';\r\nimport { Form } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport jsPDF from 'jspdf';\r\nimport TaskForm from './EditForm'\r\nimport TaskForm2 from './Taskform'\r\nimport { Input, Select } from 'antd';\r\nimport ExportExcel from './ExcelExport'\r\nimport ReactDOM from 'react-dom'\r\nimport { InfoCircleOutlined, UserOutlined } from '@ant-design/icons';\r\n\r\n\r\nimport 'jspdf-autotable';\r\nlet res = {};\r\nlet response = {};\r\nlet ListData = null;\r\nlet options = null;\r\n\r\n\r\n\r\nclass Tasks extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visible: false,\r\n      confirmLoading: false,\r\n      loading: false,\r\n      Data: { priority: 'Normal', matter: \"\" },\r\n      editMode: false,\r\n      res: '',\r\n      selected: null,\r\n      status: false,\r\n      disable : false,\r\n      spinning : true,\r\n      options : [],\r\n      index: 0\r\n    };\r\n  }\r\n  exportPDF = () => {\r\n    const unit = 'pt';\r\n    const size = 'A4'; // Use A1, A2, A3 or A4\r\n    const orientation = 'portrait'; // portrait or landscape\r\n    const marginLeft = 40;\r\n    const doc = new jsPDF(orientation, unit, size);\r\n    doc.setFontSize(15);\r\n    const title = 'Tasks';\r\n    const headers = [\r\n      ['S.No', 'Task Name', 'Description', 'Matter', 'Due Date'],\r\n    ];\r\n    let data = [];\r\n    let count = 0\r\n    this.state.tableData.map((val, index) => {\r\n        const td = [\r\n          index,\r\n          val.taskName,\r\n          val.description,\r\n          val.matter,\r\n          val.dueDate.substring(0,10),\r\n        ];\r\n        data.push(td);\r\n     \r\n    });\r\n    let content = {\r\n      startY: 50,\r\n      head: headers,\r\n      body: data,\r\n    };\r\n    doc.text(title, marginLeft, 40);\r\n    doc.autoTable(content);\r\n    doc.save('Tasks.pdf');\r\n  };\r\n\r\n  cancel(e) {\r\n    console.log(e);\r\n    message.error('Canceled');\r\n  }\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n  openNotificationWithFailure = (type) => {\r\n    notification[type]({\r\n      message: 'Failure',\r\n    });\r\n  };\r\n  openNotificationWithSucces = (type) => {\r\n    notification[type]({\r\n      message: 'Task Saved',\r\n    });\r\n  };\r\n\r\n\r\n  handleCancel = () => {\r\n    ReactDOM.findDOMNode(this.messageForm).reset()\r\n\r\n    this.setState({\r\n      visible: false,\r\n      editMode : false,\r\n      Data: { priority: 'Normal', matter: \"\" },\r\n    });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    e.persist();\r\n    let newState = this.state;\r\n    if (e.target.id === \"matter\" ) {\r\n    \r\n      if( e.target.selectedIndex > 0){\r\n        newState.index = e.target.selectedIndex \r\n        newState.Data[e.target.id] = e.target.value;\r\n      }\r\n      \r\n    } else {\r\n      newState.Data[e.target.id] = e.target.value;\r\n    }\r\n    this.setState(newState);\r\n    console.log(this.state);\r\n  };\r\n\r\n  \r\n\r\n \r\n  getISTDate(dateInUTC) {\r\n    var localDate = new Date(dateInUTC);\r\n    return localDate.toLocaleString();\r\n  }\r\n  handleView = (record) => {\r\n\r\n    delete record.edit\r\n    delete record.delete\r\n  \r\n    this.props.history.push('/tasks/view/list', record)\r\n  };\r\n  async componentDidMount() {\r\n    if(this.props.location.state === \"from dashboard\"){\r\n      this.showModal()\r\n    }else{\r\n      this.setState({\r\n        visible : false\r\n      })\r\n    }\r\n    let tableData = [];\r\n    let CompletedData = []\r\n    let upcomingData = []\r\n    let options = []\r\n    api\r\n      .get('/matter/viewforuser/' + this.props.userId)\r\n      .then((res) =>{\r\n        response = res.data.data\r\n        console.log(response);\r\n        response.map((value, index) => {\r\n        options.push( <option>{value.matterDescription}</option>)\r\n   \r\n      } );\r\n       \r\n    });\r\n    \r\n    await api.get('/tasks/viewforuser/' + this.props.userId).then((res) => {\r\n      console.log(res)\r\n      console.log(this.props.userId)\r\n      res.data.data.map((value, index)=>{\r\n        const newdata = value\r\n        newdata.matter = newdata.matter ? newdata.matter.matterDescription : \"nil\"\r\n        newdata.matterId = newdata.matter._id\r\n        newdata.key = index \r\n        newdata.dueDate = newdata.dueDate ? newdata.dueDate.substring(0,10)  : \"-\"\r\n        if(value.status == false){\r\n          \r\n          upcomingData.push(newdata)\r\n          tableData.push(newdata)\r\n        }\r\n        if(value.status == true){\r\n\r\n          CompletedData.push(newdata)\r\n        }\r\n       \r\n        \r\n      })\r\n      this.setState({ \r\n         CompletedData, \r\n         tableData,\r\n         options ,\r\n         upcomingData,\r\n        spinning: false\r\n       });\r\n      // res.data.data.map((item, index) => {\r\n      //   tableData = [\r\n      //     ...tableData,\r\n      //     {\r\n      //       ...item,\r\n      //       key: item._id,\r\n      //     },\r\n      //   ];\r\n      // });\r\n/*\r\n      ListData = res.data.data.map((value, index) => {\r\n        return (\r\n          <tr>\r\n            <th scope=\"row\">{value.dueDate}</th>\r\n            <td>{value.description}</td>\r\n            <td>{value.taskName}</td>\r\n            <td>{value.matter.matterDescription}</td>\r\n            <td>\r\n              <Button onClick={() => this.EditHandler(value, index)}>\r\n                Edit\r\n              </Button>\r\n            </td>\r\n            <td>\r\n              <Popconfirm\r\n                title=\"Are you sure delete this task?\"\r\n                onConfirm={() => this.deleteHandler(value, index)}\r\n                onCancel={this.cancel}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n              >\r\n                <Button danger>Delete</Button>\r\n              </Popconfirm>\r\n            </td>\r\n          </tr>\r\n        );\r\n      });*/\r\n    });\r\n    \r\n\r\n  }\r\n\r\n  columns = [\r\n    {\r\n      title: 'Task Name',\r\n      dataIndex: 'taskName',\r\n      key: '1',\r\n    },\r\n    {\r\n      title: 'Description',\r\n      dataIndex: 'description',\r\n      key: '2',\r\n    },\r\n    {\r\n      title: 'Matter',\r\n      dataIndex: 'matterDescription',\r\n      key: '3',\r\n      render: (_, record) => {\r\n        // console.log(record);\r\n        return record.matter;\r\n      },\r\n    },\r\n    {\r\n      title: 'Due Date',\r\n      dataIndex: 'dueDate',\r\n      key: '3',\r\n      sortDirections: ['descend', 'ascend'],\r\n      sorter: (a, b) => a.dueDate.length - b.dueDate.length,\r\n      \r\n    },\r\n    {\r\n      title: 'Action',\r\n      dataIndex: 'status',\r\n      key: '7',\r\n      render: (_, record) => {\r\n        return (\r\n          <Popconfirm\r\n            title=\"Mark as Complete\"\r\n            onConfirm={() => this.handelAction(record._id)}\r\n            onCancel={this.cancel}\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n          >\r\n            <Form.Check type=\"checkbox\"  />\r\n          </Popconfirm>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: 'Edit',\r\n      dataIndex: 'edit',\r\n      key: '6',\r\n      render: (_, record) => {\r\n        return (\r\n          <Button onClick={() => this.EditHandler(record)}>Edit</Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: 'Delete',\r\n      dataIndex: 'delete',\r\n      key: '7',\r\n      render: (_, record) => {\r\n        return (\r\n          <Popconfirm\r\n            title=\"Are you sure delete this task?\"\r\n            onConfirm={() => this.deleteHandler(record._id)}\r\n            onCancel={this.cancel}\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n          >\r\n            <Button danger>Delete</Button>\r\n          </Popconfirm>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n  deleteHandler(_id) {\r\n    api.get('tasks/delete/' + _id).then((res)=>{\r\n      console.log(res)\r\n      notification.success({message : \"Task Deleted\"})\r\n      this.componentDidMount()\r\n    })\r\n   \r\n  }\r\n  EditHandler(_id) {\r\n    this.setState({ editMode: true });\r\n    this.setState({ Data: _id });\r\n    console.log(this.state.Data)\r\n    this.setState({ selected: _id });\r\n  }\r\n  handleOk = (e) => {\r\n    e.persist();\r\n    notification.destroy();\r\n    let valid = true\r\n    console.log(this.state.Data.matter)\r\n    if(this.state.Data.taskName === '' || this.state.Data.taskName === undefined ){\r\n      valid = false\r\n      notification.warning({\r\n        message: 'Please provide a Task Name',\r\n      });\r\n    }else\r\n    if(this.state.Data.description === '' ||this.state.Data.description === undefined  ){\r\n      valid = false\r\n      notification.warning({\r\n        message: 'Please provide a description',\r\n      });\r\n    }else\r\n    if( this.state.Data.dueDate === '' || this.state.Data.dueDate === undefined  ){\r\n      valid = false\r\n      notification.warning({\r\n          message: 'Please select a due date',\r\n        });\r\n    }else\r\n    if( this.state.Data.matter === \"\" || this.state.Data.matter === undefined ){\r\n      valid = false\r\n      notification.warning({\r\n        message: 'Please select a matter',\r\n      });\r\n      \r\n    }else\r\n    if(valid){\r\n      this.setState({\r\n        confirmLoading: true,\r\n        disable : true\r\n      });\r\n      const data = this.state.Data;\r\n      data.userId = this.props.userId;\r\n      if(this.state.index != 0){\r\n        data.matter = response[this.state.index - 1]\r\n      }else{\r\n        data.matter = data.matterId\r\n      }\r\n      if (this.state.editMode) {\r\n        api\r\n          .post('tasks/edit/' + data._id, data)\r\n          .then((res) => {\r\n            console.log(res)\r\n            this.componentDidMount()\r\n            notification.success({message : \"Task Edited\"})\r\n          }\r\n          )\r\n          .catch(() => {\r\n            this.openNotificationWithFailure('error');\r\n          }).then(()=>{\r\n            this.setState({\r\n              visible: false,\r\n              editMode : false,\r\n              disable : false,\r\n              index : 0,\r\n              Data: { priority: 'Normal', matter: \"\" },\r\n              confirmLoading: false,\r\n            });\r\n            ReactDOM.findDOMNode(this.messageForm).reset()\r\n          })\r\n      } else {\r\n        api\r\n          .post('/tasks/create', data)\r\n          .then((res) => {\r\n            console.log(res)\r\n            this.openNotificationWithSucces('success')\r\n            \r\n            this.componentDidMount()\r\n          })\r\n          .catch(() => {\r\n            this.openNotificationWithFailure('error');\r\n          }).then(()=>{\r\n            this.setState({\r\n              visible: false,\r\n              editMode : false,\r\n              disable : false,\r\n              index : 0,\r\n              Data: { priority: 'Normal', matter: \"\" },\r\n              confirmLoading: false,\r\n            });\r\n            ReactDOM.findDOMNode(this.messageForm).reset()\r\n          })\r\n      }\r\n      \r\n      \r\n    }\r\n      \r\n  };\r\n\r\n  handelAction = (_id) =>{\r\n    this.setState({\r\n      status : true\r\n    })\r\n    const data = this.state.status;\r\n    console.log(data)\r\n    api.get('/tasks/updatetask/'+_id, data)\r\n    .then((res) => {\r\n      this.componentDidMount()\r\n      notification.success({message : \"Marked as completed\"})\r\n      console.log(res)\r\n    })\r\n    .catch((err) => {\r\n        console.log(err); \r\n      });\r\n   setTimeout(()=>{\r\n    //window.location.reload()\r\n   },600)\r\n  }\r\n  handelNonAction = (record) =>{\r\n    const data = record\r\n    data.status = false\r\n    console.log(data)\r\n    api.get('/tasks/setfalse/' + record._id, data)\r\n    .then((res) => {\r\n      console.log(res)\r\n      this.componentDidMount()\r\n      notification.success({message : \"Unmarked as completed\"})\r\n    })\r\n    .catch((err) => {\r\n        console.log(err); \r\n      });\r\n  }\r\n\r\n\r\n  newcolumns = [\r\n    {\r\n      title: 'Task Name',\r\n      dataIndex: 'taskName',\r\n      key: '1',\r\n    },\r\n    {\r\n      title: 'Description',\r\n      dataIndex: 'description',\r\n      key: '2',\r\n    },\r\n    // {\r\n    //   title: 'Matter',\r\n    //   dataIndex: 'matterDescription',\r\n    //   key: '3',\r\n    //   render: (_, record) => {\r\n    //     // console.log(record);\r\n    //     return record.matter;\r\n    //   },\r\n    // },\r\n    {\r\n      title: 'Due Date',\r\n      dataIndex: 'dueDate',\r\n      key: '3',\r\n      sortDirections: ['descend', 'ascend'],\r\n      sorter: (a, b) => a.dueDate.length - b.dueDate.length,\r\n      \r\n    },\r\n    {\r\n      title: 'Action',\r\n      dataIndex: 'status',\r\n      key: '7',\r\n      render: (_, record) => {\r\n        return (\r\n          <Popconfirm\r\n            title=\"Mark as Incomplete\"\r\n            onConfirm={() => this.handelNonAction(record)}\r\n            onCancel={this.cancel}\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n          >\r\n            <Form.Check type=\"checkbox\"  />\r\n          </Popconfirm>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: 'Edit',\r\n      dataIndex: 'edit',\r\n      key: '6',\r\n      render: (_, record) => {\r\n        return (\r\n          <Button onClick={() => this.EditHandler(record)}>Edit</Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: 'Delete',\r\n      dataIndex: 'delete',\r\n      key: '7',\r\n      render: (_, record) => {\r\n        return (\r\n          <Popconfirm\r\n            title=\"Are you sure delete this task?\"\r\n            onConfirm={() => this.deleteHandler(record._id)}\r\n            onCancel={this.cancel}\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n          >\r\n            <Button danger>Delete</Button>\r\n          </Popconfirm>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n  \r\n  render() {\r\n    console.log(this.state.tableData)\r\n    const { TabPane } = Tabs;\r\n    const callback = (key) =>{\r\n      console.log(key)\r\n      \r\n      if(key == 1){\r\n        console.log(\"Key == 1\")\r\n        this.setState({\r\n          tableData : this.state.upcomingData,\r\n      \r\n        })\r\n        console.log(this.state.tableData)\r\n      }else\r\n      if(key == 2){\r\n        console.log(\"Key == 2\")\r\n        this.setState({\r\n          tableData : this.state.CompletedData,\r\n      \r\n        })\r\n        console.log(this.state.tableData)\r\n      }\r\n      \r\n      \r\n    }\r\n\r\n    return (\r\n      <Spin size=\"large\" spinning={this.state.spinning} >\r\n        <div>\r\n          <div className=\"d-flex mb-2 title-component-header\">\r\n            <div className=\"title-header-name\">\r\n              <h5>Task</h5>\r\n            </div>\r\n            <div className=\"d-flex extra-iteam-div\">\r\n                <button\r\n                    className=\"btn  btn-outline-primary   btn-sm\"\r\n                    onClick={this.exportPDF}\r\n                >\r\n                    Export to Pdf\r\n                </button>\r\n                <ExportExcel dataSource={this.state.tableData || []} />\r\n                <button\r\n                    className=\"btn  btn-outline-primary   btn-sm\"\r\n                    onClick={this.showModal}\r\n                >\r\n                    ADD TASK\r\n                </button>\r\n            </div> \r\n          </div>\r\n        <Tabs\r\n          defaultActiveKey=\"1\"\r\n          onChange={callback}\r\n          className=\"card p-4 overflow-auto\"\r\n        >\r\n          <TabPane tab=\"Upcoming Tasks\" key=\"1\">\r\n            <UpcomingTasks\r\n              columns={this.columns}\r\n              tableData={this.state.upcomingData}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"Completed Tasks\" key=\"2\">\r\n            <CompletedTask\r\n              columns={this.newcolumns}\r\n              tableData={this.state.CompletedData}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab=\"List\" key=\"3\">\r\n            <List handleView={this.handleView} tableData={this.state.ListData}></List>\r\n          </TabPane>\r\n        </Tabs>\r\n        <Modal\r\n          title=\"Create New Task\"\r\n          visible={this.state.visible}\r\n          confirmLoading={this.state.confirmLoading}\r\n          onCancel={this.handleCancel}\r\n          onOk={this.handleOk}\r\n          footer={[\r\n            <Button  onClick={this.handleCancel}>\r\n              Cancel\r\n            </Button>,\r\n            <Button type=\"primary\" disabled = {this.state.disable} onClick={this.handleOk}>\r\n              Create Task\r\n            </Button>,\r\n          ]}\r\n        >\r\n       <Form \r\n       className=\"form-details\" \r\n       id='myForm'\r\n       className=\"form\"\r\n       ref={ form => this.messageForm = form }\r\n       >\r\n        <Form.Group controlId=\"taskName\">\r\n          <Form.Label>Task Name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Task Name\"\r\n            defaultValue={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"dueDate\">\r\n          <Form.Label>Due Date</Form.Label>\r\n          <Form.Control\r\n            required\r\n            type=\"date\"\r\n            placeholder=\"Due Date\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"description\">\r\n          <Form.Label>Description</Form.Label>\r\n          <Form.Control\r\n            required\r\n            as=\"textarea\"\r\n            rows=\"3\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </Form.Group>\r\n\r\n      {/*\r\n        <Form.Group controlId=\"taskName\">\r\n          <Form.Label>Assignee</Form.Label>\r\n          <div>\r\n            <Input addonBefore={selectBefore} size=\"large\" suffix={<UserOutlined className=\"site-form-item-icon\" />}  placeholder=\"Type a name...\" />\r\n          </div>\r\n        </Form.Group>\r\n      */\r\n      }\r\n\r\n        <Form.Group controlId=\"priority\">\r\n          <Form.Label>Priority</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            defaultValue=\"Normal\"\r\n            required\r\n            onChange={this.handleChange}\r\n          >\r\n            <option>Low</option>\r\n            <option>Normal</option>\r\n            <option>High</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"matter\">\r\n          <Form.Label>Matter</Form.Label>\r\n          <Form.Control\r\n            required\r\n            as=\"select\"\r\n            onChange={this.handleChange}\r\n            name=\"matter\"\r\n          >\r\n            <option>Select a matter</option>\r\n            {this.state.options.map((val)=>{\r\n              return val\r\n            })\r\n            }\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <br />\r\n        {\r\n          /*\r\n            <Form.Group controlId=\"formBasicCheckbox\">\r\n          <Form.Check type=\"checkbox\" label=\"Notify me when the task is completed\" />\r\n        </Form.Group>\r\n        <br />\r\n        <Form.Group controlId=\"formBasicCheckbox\">\r\n          <Form.Check type=\"checkbox\" label=\"Notify assignee via email\" />\r\n        </Form.Group>\r\n        <br />\r\n          */\r\n\r\n        }\r\n       \r\n      </Form>\r\n   \r\n        </Modal>\r\n        <Modal\r\n          title=\"Edit task\"\r\n          visible={this.state.editMode}\r\n          confirmLoading={this.state.confirmLoading}\r\n          onCancel={this.handleCancel}\r\n          onOk={this.handleOk}\r\n          footer={[\r\n            <Button  onClick={this.handleCancel}>\r\n              Cancel\r\n            </Button>,\r\n            <Button type=\"primary\" disabled = {this.state.disable} onClick={this.handleOk}>\r\n              Update Task\r\n            </Button>,\r\n          ]}\r\n        >\r\n          <Form \r\n           id='myForm'\r\n           className=\"form\"\r\n           ref={ form => this.messageForm = form }\r\n          className=\"form-details\">\r\n                  <Form.Group controlId=\"taskName\">\r\n                    <Form.Label>Task Name</Form.Label>\r\n                    <Form.Control\r\n                      required\r\n                      type=\"text\"\r\n                      defaultValue={this.state.Data.taskName}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId=\"dueDate\">\r\n                    <Form.Label>Due Date</Form.Label>\r\n                    <Form.Control\r\n                      type=\"date\"\r\n                      defaultValue={this.state.Data.dueDate ? this.state.Data.dueDate.substring(0,10) : \"\"}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control\r\n                      required\r\n                      defaultValue={this.state.Data.description}\r\n                      as=\"textarea\"\r\n                      rows=\"3\"\r\n                      onChange={this.handleChange}\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"matter\">\r\n                            <Form.Label>Matter</Form.Label>\r\n                            <Form.Control\r\n                              required\r\n                              as=\"select\"\r\n                              value={this.state.Data.matter}\r\n                              onChange={this.handleChange}\r\n                              name=\"matter\"\r\n                            >\r\n                              <option>Select a matter</option>\r\n                              {this.state.options.map((val)=>{\r\n                                  return val\r\n                                })\r\n                                }\r\n                            </Form.Control>\r\n                          </Form.Group>\r\n\r\n                {\r\n                  /*\r\n                    <Form.Group controlId=\"taskName\">\r\n                    <Form.Label>Assignee</Form.Label>\r\n                    <div>\r\n                      <Input addonBefore={selectBefore} size=\"large\" suffix={<UserOutlined className=\"site-form-item-icon\" />}  placeholder=\"Type a name...\" />\r\n                    </div>\r\n                  </Form.Group>\r\n                  */\r\n                }\r\n\r\n                  <Form.Group controlId=\"priority\">\r\n                    <Form.Label>Priority</Form.Label>\r\n                    <Form.Control\r\n                      as=\"select\"\r\n                    \r\n                      required\r\n                      defaultValue={this.state.Data.priority}\r\n                      onChange={this.handleChange}\r\n                    >\r\n                      <option>Low</option>\r\n                      <option>Normal</option>\r\n                      <option>High</option>\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                  \r\n                  <br />\r\n                  {\r\n                    /* \r\n                    <Form.Group controlId=\"formBasicCheckbox\">\r\n                    <Form.Check type=\"checkbox\" label=\"Notify me when the task is completed\" />\r\n                  </Form.Group>\r\n                  <br />\r\n                  <Form.Group controlId=\"formBasicCheckbox\">\r\n                    <Form.Check type=\"checkbox\" label=\"Notify assignee via email\" />\r\n                  </Form.Group>\r\n                  <br />\r\n                    */\r\n                  }\r\n                </Form>\r\n    \r\n        </Modal>\r\n      </div>\r\n    \r\n      </Spin>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  userId: state.user.token.user._id,\r\n});\r\nexport default connect(mapStateToProps)(Tasks);\r\n"],"sourceRoot":""}