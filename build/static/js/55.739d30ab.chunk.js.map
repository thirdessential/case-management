{"version":3,"sources":["App/components/AddEditAccount/AddAccount.js"],"names":["validNameRegex","RegExp","AddAccount","history","useHistory","userId","useSelector","state","user","token","_id","useState","type","accountName","accountHolder","accountNumber","institution","domicileBranch","swiftCode","transitNumber","currency","openingBalance","setState","error","setError","display","setDisplay","Disabled","setDisabled","handelChange","e","persist","target","name","value","errors","length","test","DomicileBranch","st","className","Group","controlId","Label","Control","as","onChange","placeholder","Row","sm","Check","label","disabled","onClick","preventDefault","notification","destroy","valid","Object","values","forEach","val","validateForm","warning","message","api","post","then","res","console","log","success","goBack","catch","err","checkValidity"],"mappings":"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","file":"static/js/55.739d30ab.chunk.js","sourcesContent":["import React, { useState } from  'react'\nimport { Form, Col, Button} from 'react-bootstrap'\nimport { Card, message, notification } from 'antd';\nimport { useHistory } from 'react-router-dom';\nimport api from '../../../resources/api'\nimport { useSelector } from 'react-redux'\n\nconst validNameRegex = RegExp(\n    /^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð ,.'-]+$/u\n  );\n\nconst AddAccount = () =>{\n\n    const history = useHistory()\n    const userId = useSelector((state) => state.user.token.user._id);\n    const [state, setState] = useState({\n        userId : userId,\n        type: \"\",\n        accountName: \"\",\n        accountHolder: \"\",\n        accountNumber: \"\",\n        institution: \"\",\n        domicileBranch: \"\",\n        swiftCode: \"\",\n        transitNumber: \"\",\n        currency: \"\",\n        openingBalance: \"\"\n    })\n    const [error, setError] = useState({})\n    const [display, setDisplay] = useState(false)\n    const [Disabled, setDisabled] = useState(false)\n\n    // handel the change of form & set the error msg\n    const handelChange = e =>{\n        e.persist();\n        setDisplay(false)\n        const {name, value} = e.target;\n        let errors = error\n        switch (name) {\n            case \"type\":\n                errors.type = value === \"default\" ? \"Account Type is required!\" : \"\";\n                break;\n            case \"accountName\":\n                errors.accountName =\n                    value.length == 0\n                    ? \"Account Name is required!\"\n                    : !validNameRegex.test(value)\n                    ? \"Account Name must be in characters!\"\n                    : \"\";\n                break;\n            case \"accountHolder\":\n                errors.accountHolder =\n                    value.length == 0\n                    ? \"Account Holder is required!\"\n                    : !validNameRegex.test(value)\n                    ? \"Account Holder must be in characters!\"\n                    : \"\";\n                break;\n            case \"accountNumber\":\n                errors.accountNumber =\n                    value.length == 0\n                    ? \"Account Number is required!\"\n                    : \"\";\n                break;\n            case \"institution\":\n                errors.institution =\n                    value.length == 0\n                    ? \"Institution is required!\"\n                    : !validNameRegex.test(value)\n                    ? \"Institution must be in characters!\"\n                    : \"\";\n                break;\n            case \"domicileBranch\":\n                errors.DomicileBranch =\n                    value.length == 0\n                    ? \"Domicile Branch is required!\"\n                    : \"\";\n                break;\n            case \"swiftCode\":\n                errors.swiftCode =\n                    value.length == 0\n                    ? \"Swift Code is required!\"\n                    : \"\";\n                break;\n            case \"transitNumber\":\n                errors.transitNumber =\n                    value.length == 0\n                    ? \"Transit Number is required!\"\n                    : \"\";\n                break;\n            case \"currency\":\n                errors.currency = value === \"default\" ? \"Currency is required!\" : \"\";\n                break;\n            case \"openingBalance\":\n                errors.openingBalance =\n                    value.length == 0\n                    ? \"Opening Balance is required!\"\n                    : value > 0 \n                    ? \"\"\n                    : \"Opening Balance Greater than 0\"\n                    break;\n            default:\n                break;\n        }\n        setError( (st) => ({...st, ...errors }))\n        setState( (st) => ({...st, [name] : value }));\n    }\n\n    // handel Submit of form \n    const handelSubmit = e =>{\n        e.preventDefault();\n        notification.destroy()\n        if(!display){\n          const validateForm = (error) => {\n            let valid = true;\n            Object.values(error).forEach((val) => val.length > 0 && (valid = false));\n            return valid;\n          };\n          if (validateForm(error)) {\n            checkValidity();\n          } else {\n            setDisplay(true)\n            return notification.warning({\n              message: \"Failed to Add New Account\",\n            });\n          }\n        }\n      };\n    \n      // Check the Fields are Empty \n      function checkValidity() {\n\n        if(state.type === \"\"){\n            return notification.warning({\n                message: \"Please select a type\" ,\n              });\n        }else\n        if(state.accountHolder === \"\"){\n            return notification.warning({\n                message: \"Please provide a Account holder\" ,\n              });\n        }else if(state.accountName === \"\"){\n            return notification.warning({\n                message: \"Please provide a Account Name\" ,\n              });\n        }else  if(state.accountNumber === \"\"){\n            return notification.warning({\n                message: \"Please provide a Account Number\" ,\n              });\n        }else if(state.currency === \"\"){\n            return notification.warning({\n                message: \"Please provide a currency\" ,\n              });\n        }else if(state.domicileBranch === \"\"){\n            return notification.warning({\n                message: \"Please provide a Domicile Branch\" ,\n              });\n        }else if(state.institution === \"\"){\n            return notification.warning({\n                message: \"Please provide a insitiution\" ,\n              });\n        }else  if(state.openingBalance === \"\"){\n            return notification.warning({\n                message: \"Please provide a opening balance\" ,\n              });\n        }else  if(state.swiftCode === \"\"){\n            return notification.warning({\n                message: \"Please provide a swift code\" ,\n              });\n        }else  if(state.transitNumber === \"\"){\n            return notification.warning({\n                message: \"Please provide a transit number\" ,\n              });\n        }\n        else {\n            // if form is valid then do something\n            setDisabled(true)\n            api\n            .post(\"/account/create\", state)\n            .then((res) => {\n                console.log(res)\n                notification.success({message : \"Account Added.\"})\n                history.goBack();\n                setDisabled(false)\n            })\n            .catch((err) => {\n                console.log(err); \n                setDisabled(false)\n                notification.error({message : \"Failed to add account.\"})\n              });\n        }\n        \n      }\n\n    return(\n        <>\n        <div className='form-width'>\n            <div className=\"form-header-container mb-4\">\n                <h3 className=\"form-header-text\">Add New Account</h3>\n            </div>\n            <Card className=\"mb-4\">\n                <Form className=\"form-details\">\n                    <Form.Group controlId=\"type\">\n                        <Form.Label>Account Type</Form.Label>\n                        <Form.Control\n                            as=\"select\"\n                            name=\"type\"\n                            onChange={handelChange}\n                        >\n                            <option value=\"default\">Select Account Type</option>\n                            <option value=\"Operating Account\">Operating Account</option>\n                            <option value=\"Trust Account\">Trust Account</option>\n                        </Form.Control>\n                        <p className=\"help-block text-danger\">{error.type}</p>\n                    </Form.Group>\n                    \n\n                    <Form.Group controlId=\"accountName\">\n                        <Form.Label>Account Name</Form.Label>\n                        <Form.Control type=\"text\" name=\"accountName\" placeholder=\"Account name\"  onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.accountName}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"accountHolder\">\n                        <Form.Label>Account Holder</Form.Label>\n                        <Form.Control type=\"text\" name=\"accountHolder\" placeholder=\"Account Holder\" onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.accountHolder}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"accountNumber\">\n                        <Form.Label>Account Number</Form.Label>\n                        <Form.Control type=\"number\" name=\"accountNumber\" placeholder=\"Account Number\" onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.accountNumber}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"institution\">\n                        <Form.Label>Institution</Form.Label>\n                        <Form.Control type=\"text\" name=\"institution\" placeholder=\"Institution\" onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.institution}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"domicileBranch\">\n                        <Form.Label>Domicile Branch</Form.Label>\n                        <Form.Control type=\"text\" name=\"domicileBranch\" placeholder=\"Domicile Branch\" onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.domicileBranch}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"swiftCode\">\n                        <Form.Label>Swift Code</Form.Label>\n                        <Form.Control type=\"text\" name=\"swiftCode\" placeholder=\"Swift Code\" onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.swiftCode}</p>\n                    </Form.Group>\n                    <Form.Row>\n                        <Col sm>\n                            <Form.Group controlId=\"transitNumber\">\n                                <Form.Label>Transit Number</Form.Label>\n                                <Form.Control type=\"text\" name=\"transitNumber\" placeholder=\"Transit Number\"  onChange={handelChange}/>\n                                <p className=\"help-block text-danger\">{error.transitNumber}</p>\n                            </Form.Group>\n                        </Col>\n                        <Col sm>\n                            <Form.Group controlId=\"currency\">\n                                <Form.Label>Currency</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    name=\"currency\"\n                                    onChange={handelChange}\n                                >\n                                    <option value=\"default\">Select Currency</option>\n                                    <option value=\"USD $\">USD $</option>\n                                    <option value=\"EUR €\">EUR €</option>\n                                </Form.Control>\n                                <p className=\"help-block text-danger\">{error.currency}</p>\n                            </Form.Group>\n                        </Col>\n                    </Form.Row>\n\n                    <Form.Group controlId=\"openingBalance\">\n                        <Form.Label>Opening Balance</Form.Label>\n                        <Form.Control type=\"number\" name=\"openingBalance\" placeholder=\"Opening Balance\" onChange={handelChange} />\n                        <p className=\"help-block text-danger\">{error.openingBalance}</p>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"defaultAccount\">\n                        <Form.Check type=\"checkbox\" name=\"defaultAccount\" label=\"Set the account as default account\" onChange={handelChange} />\n                    </Form.Group>\n                    <br /><br />\n                    <Button disabled = {Disabled}  onClick={handelSubmit}>Create New Bank Account</Button>\n                </Form>\n            </Card>\n        </div>          \n        </>\n    )\n}\n\nexport default AddAccount\n"],"sourceRoot":""}