{"version":3,"sources":["App/containers/Documents/ViewFolder.js"],"names":["Option","Select","TabPane","Tabs","Documents","props","useState","docs","setDocs","location","state","record","setrecord","Stack","setStack","userId","useSelector","user","token","_id","FolderModal","setFolderModal","FolderTable","setFolderTable","name","folder","documents","type","FolderData","setFolderData","tempDocxModal","settempDocxModal","document","matter","contact","category","tempDocx","settempDocx","value","setValue","dataSrc","setDataSrc","showNameInput","setShowNameInput","TemplateTable","setTemplateTable","Disable","setDisable","viewUpload","setViewUpload","Loading","setLoading","CatagoryData","setCatagoryData","CatagoryTable","setCatagoryTable","uploadData","setUploadData","modalFor","setModalFor","matters","setMatters","Category","setCategory","columnsForDocuments","title","dataIndex","key","style","onClick","paddingLeft","paddingTop","placeholder","onChange","e","filteredData","target","length","filter","item","toLowerCase","includes","render","text","highlightStyle","backgroundColor","padding","searchWords","autoEscape","textToHighlight","toString","sortDirections","sorter","a","b","receivedDate","lastEdit","_","className","editHandler","onConfirm","deleteHandler","onCancel","okText","cancelText","downloadHandler","icon","handleInput","console","log","files","getMatterById","api","get","then","res","data","getDocuments","tempDocs","map","index","matterDescription","getISTDate","template","undefined","push","tempMatter","client","updated_at","created_at","lastName","firstName","__v","image","customFields","Email","address","website","phone","emailAddress","company","handleSubmit","notification","warning","message","docFormData","FormData","set","post","headers","response","getFolder","success","catch","error","setTimeout","window","open","docId","handleEdit","formData","newUploadData","columnsForFolder","color","fontSize","fontWeight","r","stack","history","editFolder","deleteFolder","tempFolder","addFolder","folderData","EditFolder","SubmitViaTemplate","handleViaTemplate","layout","labelCol","span","wrapperCol","dateInUTC","Date","toLocaleString","matterId","useEffect","tempCatagory","getCategory","menu","Item","Divider","ButtonForDocument","overlay","trigger","preventDefault","operations","setoperations","size","spinning","defaultActiveKey","tabBarExtraContent","tab","visible","footer","htmlType","disabled","fields","label","rules","required","showSearch","width","optionFilterProp","filterOption","input","option","children","indexOf","uploadFolder","onRow","rowIndex","onDoubleClick","dataSource","columns","splice"],"mappings":"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","file":"static/js/67.2f18932e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  Button,\n  Table,\n  notification,\n  Modal,\n  Input,\n  Form,\n  Select,\n  Popconfirm,\n  Spin,\n  Tabs,\n  Menu,\n  Dropdown,\n  Space\n} from 'antd';\nimport { DownOutlined , FolderTwoTone, DownloadOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport { SearchOutlined } from '@ant-design/icons';\nimport Highlighter from 'react-highlight-words';\nimport api from '../../../resources/api';\nimport { findLast } from 'lodash';\nconst { Option } = Select;\nconst { TabPane } = Tabs;\n\n//matters={props.location.state.matters}\n// userId={props.location.state.userId}\n// matterId={props.location.state.id}\n\nconst Documents = (props) => {\n  const [docs, setDocs] = useState([]);\n  const [record, setrecord] = useState(props.location.state)\n  const [Stack, setStack] = useState([props.location.state])\n  const userId = useSelector((state) => state.user.token.user._id);\n  const [FolderModal, setFolderModal] = useState(false)\n  const [FolderTable, setFolderTable] = useState([])\n  const [FolderData, setFolderData] = useState({\n    name : \"\",\n    userId : \"\",\n    folder : [],\n    documents : [],\n    type : \"folder\"\n  })\n  const [tempDocxModal, settempDocxModal] = useState(false)\n  const [tempDocx, settempDocx] = useState({\n    document: '',\n    _id: '',\n    name: '',\n    matter: '',\n    contact: '',\n    category: '',\n    userId : userId,\n    type : \"folder\"\n  });\n  const [value, setValue] = useState('');\n  const [dataSrc, setDataSrc] = useState([]);\n  const [showNameInput, setShowNameInput] = useState(false);\n  \n  const [TemplateTable, setTemplateTable] = useState([])\n  const [TemplateModal, setTemplateModal] = useState(false)\n  const [TemplateData, setTemplateData] = useState({\n      name : \"\",\n      userId : userId,\n      document : \"\"\n  })\n  const [Disable, setDisable] = useState(false)\n  const [viewUpload, setViewUpload] = useState(false);\n  const [tabFor, settabFor] = useState(\"Document\")\n  const [Loading, setLoading] = useState(true)\n  const [CatagoryData, setCatagoryData] = useState({\n    name : '',\n    userId : userId\n  })\n  const [CatagoryTable, setCatagoryTable] = useState([])\n  const [cataoryModal, setcataoryModal] = useState(false)\n  const [uploadData, setUploadData] = useState({\n    document: '',\n    _id: '',\n    name: '',\n    matter: '',\n    contact: '',\n    category: '',\n  });\n  const [modalFor, setModalFor] = useState('Upload');\n  const [matters, setMatters] = useState([]);\n  const [Category, setCategory] = useState([])\n  //funtions for document\n  const FilterByNameInput = (\n    <div>\n      <SearchOutlined\n      style={{\"vertical-align\": \"revert\"}}\n        onClick={() => {\n          var dump =\n            showNameInput === false\n              ? setShowNameInput(true)\n              : setShowNameInput(false);\n        }}\n      />\n      <span style={{paddingLeft : \"8px\"}}> Name </span>\n\n      {showNameInput && (\n        <div style={{paddingTop : \"10px\"}}>\n          <input\n            placeholder=\"Search\"\n            value={value}\n            onChange={(e) => {\n              let filteredData;\n              setValue(e.target.value);\n              if (e.target.value.length !== 0 || e.target.value === '') {\n                filteredData = docs.filter((item) =>\n                  item.name\n                    .toLowerCase()\n                    .includes(e.target.value.toLowerCase())\n                );\n                setDataSrc(filteredData);\n              } else {\n                setDataSrc(docs);\n              }\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n  const columnsForDocuments = [\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      key: '0',\n    },\n    \n    {\n      title: FilterByNameInput,\n      dataIndex: 'name',\n      key: '1',\n      render: (text) => (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0}}\n          searchWords={[value]}\n          autoEscape\n          textToHighlight={text ? text.toString() : ''}\n        />\n      ),\n    },\n  \n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: '1',\n      sortDirections: ['descend', 'ascend'],\n      sorter: (a, b) => a.name.length - b.name.length,\n    },\n    /*\n    {\n      title: 'Matter',\n      dataIndex: 'matter',\n      key: '2',\n    },\n    */\n    {\n      title: 'Category',\n      dataIndex: 'category',\n      key: '3',\n    },\n    {\n      title: 'Received Date',\n      dataIndex: 'receivedDate',\n      key: '4',\n      sortDirections: ['descend', 'ascend'],\n      sorter: (a, b) => a.receivedDate > b.receivedDate,\n    },\n    {\n      title: 'Last Edit',\n      dataIndex: 'lastEdit',\n      key: '5',\n      sortDirections: ['descend', 'ascend'],\n      sorter: (a, b) => a.lastEdit > b.lastEdit,\n    },\n\n    {\n      title: 'Edit',\n      dataIndex: 'edit',\n      key: '6',\n      render: (_, record) => {\n        return (\n          <Button\n            className=\"btn-outline-info \"\n            onClick={() => {\n              editHandler(record._id);\n            }}\n          >\n            Edit\n          </Button>\n        );\n      },\n    },\n    {\n      title: 'Delete',\n      dataIndex: 'delete',\n      key: '7',\n      render: (_, record) => {\n        return (\n          <Popconfirm\n                    title=\"Are you sure delete this Document?\"\n                    onConfirm={()=>deleteHandler(record._id)}\n                    onCancel={()=>{}}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button\n                      className=\" btn-outline-danger \"\n                    >\n                      Delete\n                    </Button>\n                  </Popconfirm>\n          \n        );\n      },\n    },\n    {\n      title: 'Download',\n      dataIndex: 'download',\n      key: '8',\n      render: (_, record) => {\n        return (\n          <Button\n            className=\"btn-outline-primary \"\n            onClick={() => {\n              downloadHandler(record);\n            }}\n            icon={<DownloadOutlined />}\n          >\n            Download\n          </Button>\n        );\n      },\n    },\n  ];\n  const handleInput = (item) => (e) => {\n    console.log(item)\n    console.log(e)\n    if (item === 'document') {\n      setUploadData({ ...uploadData, document: e.target.files[0] });\n    } else\n    if(item === \"category\"){\n      uploadData[`${item}`] = e;\n      setUploadData({ ...uploadData });\n    }\n    else {\n      if (item === 'matter') {\n        if(modalFor === \"Upload\"){\n          console.log(\"from the uploads\")\n          uploadData[`${item}`] = e;\n          setUploadData({ ...uploadData });\n          getMatterById(e);\n        }else{\n          console.log(\"from the edits\")\n          api.get(`/matter/view/${e}`).then((res) => {\n            uploadData[`${item}`] = res.data.data ;\n            setUploadData({ ...uploadData });\n            getMatterById(e);\n            });\n        }\n      } else {\n        uploadData[`${item}`] = e.target.value;\n        setUploadData({ ...uploadData });\n      }\n    }\n    console.log(uploadData)\n  };\n\n  const getDocuments = async () => {\n\n    let tempDocs = [];\n    console.log(record)\n    api.get(`/document/folder/view/${record._id}`).then((res) => {\n      console.log(res)\n      res.data.data.documents.map((item, index) => {\n        tempDocs = [\n          ...tempDocs,\n          {\n            ...item,\n            type : \"File\",\n            key: item._id,\n            matter: item.matter !== null ? item.matter.matterDescription : '-',\n            receivedDate: getISTDate(item.receivedDate),\n            lastEdit: getISTDate(item.lastEdit),\n          },\n        ];\n      });\n      setDocs(tempDocs);\n    });\n    \n    let template = []\n    api.get(`/document/viewforuser/${userId}`).then((res) => {\n      console.log(res.data.data)\n      res.data.data.map((item, index) => {\n        if(item.matter == undefined ){\n          const data = {\n            _id : item._id,\n            key : index,\n            document : item.document,\n            category : item.category,\n            name : item.name,\n          }\n          template.push(data)\n        }\n        \n      });\n      setTemplateTable(template)\n    });\n    \n    let tempMatter = [];\n    await api.get(`/matter/viewforuser/${userId}`).then((res) => {\n      res.data.data.map((item) => {\n        tempMatter = [\n          ...tempMatter,\n          {\n            ...item,\n            key: item._id,\n            client:\n              item.client === null\n                ? {\n                    _id: '',\n                    updated_at: '',\n                    created_at: '-',\n                    userId: '-',\n                    title: '-',\n                    lastName: '-',\n                    firstName: '',\n                    __v: 0,\n                    image: '',\n                    customFields: [\n                      {\n                        Email: '-',\n                      },\n                    ],\n                    address: [],\n                    website: [],\n                    phone: [],\n                    emailAddress: [],\n                    company: ['-'],\n                  }\n                : item.client,\n          },\n        ];\n      });\n    });\n    setMatters(tempMatter);\n  };\n\n  const handleSubmit = async () => {\n    \n    if(uploadData.category === ''){\n      notification.warning({\n        message : \"Please provide a category.\"\n      })\n    }else\n    if(uploadData.contact === ''){\n      notification.warning({\n        message : \"Please provide a contact.\"\n      })\n    }else\n    if(uploadData.document === '' ){\n      notification.warning({\n        message : \"Please provide a document.\"\n      })\n    }else\n    if(uploadData.matter === '' ){\n      notification.warning({\n        message : \"Please provide a matter.\"\n      })\n    }else\n    if(uploadData.name === ''){\n      notification.warning({\n        message : \"Please provide a name.\"\n      })\n    }\n    else{\n      setDisable(true)\n      var docFormData = new FormData();\n    docFormData.set('document', uploadData.document);\n    docFormData.set('name', uploadData.name);\n    docFormData.set('type', \"folder\");\n    docFormData.set('matter', uploadData.matter);\n    docFormData.set('contact', uploadData.contact);\n    docFormData.set('category', uploadData.category);\n    docFormData.set('userId', userId);\n    api\n      .post('/document/upload/934894383948u43', docFormData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      })\n      .then(function (response) {\n          let docs = record\n          docs.documents.push(response.data.data._id)\n            api\n                .post('/document/folder/edit/' + docs._id , docs)\n                .then(function (response) {\n                    console.log(response)\n                    getFolder()\n                    notification.success({ message: 'Document Uploaded.' });\n                    getDocuments();\n\n                    //getDocuments();\n                })\n                .catch(function (response) {\n                    notification.error({ message: 'Failed.' });\n                });\n                setTimeout(() => {\n                setFolderModal(false)\n                setDisable(false)\n                console.log(CatagoryTable)\n                }, 600);\n\n        \n      })\n    setTimeout(() => {\n      setViewUpload(false);\n      setDisable(false)\n    }, 600);\n    }\n    \n  };\n\n  const downloadHandler = async (record) => {\n    window.open(record.document);\n  };\n\n  const deleteHandler = async (docId) => {\n    await api\n      .get(`/document/delete/${docId}`)\n      .then((res) => {\n        notification.success({ message: 'Document Deleted SuccessFully.' });\n        getDocuments();\n      })\n      .catch((res) => {\n        notification.error({ message: 'Document Deletion Failed.' });\n      });\n  };\n\n  const editHandler = async (docId) => {   \n      setModalFor('Edit');\n      setViewUpload(true);\n      await api.get(`/document/view/${docId}`).then((response) => {\n        setUploadData(response.data.data);\n        console.log(uploadData)\n      });\n  };\n\n  const handleEdit = async () => {\n    if(uploadData.category === ''){\n      notification.warning({\n        message : \"Please provide a category.\"\n      })\n    }else\n    if(uploadData.contact === ''){\n      notification.warning({\n        message : \"Please provide a contact.\"\n      })\n    }else\n    if(uploadData.document === '' ){\n      notification.warning({\n        message : \"Please provide a document.\"\n      })\n    }else\n    if(uploadData.matter === '' ){\n      notification.warning({\n        message : \"Please provide a matter.\"\n      })\n    }else\n    if(uploadData.name === ''){\n      notification.warning({\n        message : \"Please provide a name.\"\n      })\n    }\n    else{\n    setDisable(true)\n    var formData = new FormData();\n    formData.set('document', uploadData.document);\n    formData.set('userId', userId);\n    api\n      .post(`/document/edit/${uploadData._id}`, formData,{\n        headers: { 'Content-Type': 'multipart/form-data' },\n      }).then(res=>{\n        console.log(res)\n      })\n      const newUploadData = {\n        _id: uploadData._id,\n        name: uploadData.name,\n        matter: uploadData.matter,\n        contact: uploadData.contact,\n        category: uploadData.category,\n      }\n    await api\n      .post(`/document/edit/${uploadData._id}`, newUploadData)\n      .then(function (response) {\n        \n        console.log(response)\n        notification.success({ message: 'Document edited.' });\n        \n        getDocuments();\n      })\n      .catch(function (response) {\n         console.log(response)\n        notification.error({ message: 'Document Upload Failed.' });\n      });\n    setTimeout(() => {\n      setDisable(false)\n      setViewUpload(false);\n    }, 600);\n  }\n};\n\n  //funtions for template\n  {\n    /*\n    const columnsForTemplate = [\n    \n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: '1',\n      sortDirections: ['descend', 'ascend'],\n      sorter: (a, b) => a.name.length - b.name.length,\n    },\n    \n    {\n      title: 'Category',\n      dataIndex: 'category',\n      key: '3',\n    },\n    \n    {\n      title: 'Edit',\n      dataIndex: 'edit',\n      key: '6',\n      render: (_, record) => {\n        return (\n          <Button\n            className=\"btn-outline-info \"\n            onClick={() => {\n              editTemplate(record);\n            }}\n          >\n            Edit\n          </Button>\n        );\n      },\n    },\n    {\n      title: 'Delete',\n      dataIndex: 'delete',\n      key: '7',\n      render: (_, record) => {\n        return (\n          <Popconfirm\n                  title=\"Are you sure delete this Template?\"\n                  onConfirm={()=>deleteTemplate(record._id)}\n                  onCancel={()=>{}}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button\n                      className=\" btn-outline-danger \"\n                    >\n                      Delete\n                    </Button>\n                  </Popconfirm>\n          \n        );\n      },\n    },\n    {\n      title: 'Download',\n      dataIndex: 'download',\n      key: '8',\n      render: (_, record) => {\n        return (\n          <Button\n            className=\"btn-outline-primary \"\n            onClick={() => {\n              downloadHandler(record);\n            }}\n            icon={<DownloadOutlined />}\n          >\n            Download\n          </Button>\n        );\n      },\n    },\n  ];\n  const editTemplate = async (record) => {   \n    setModalFor('Edit');\n    setTemplateModal(true)\n    setTemplateData(record)\n};\n\nconst deleteTemplate = async (docId) => {\n  await api\n    .get(`/document/delete/${docId}`)\n    .then((res) => {\n      notification.success({ message: 'Template Deleted SuccessFully.' });\n      getDocuments();\n    })\n    .catch((res) => {\n      notification.error({ message: 'Template Deletion Failed.' });\n    });\n};\n const EditTemplate = async () => {\n      if(TemplateData.category === ''){\n        notification.warning({\n          message : \"Please provide a category.\"\n        })\n      }else\n      \n      if(TemplateData.document === '' ){\n        notification.warning({\n          message : \"Please provide a document.\"\n        })\n      \n      }\n      else{\n      setDisable(true)\n      await api\n        .post(`/document/edit/${TemplateData._id}`, TemplateData)\n        .then(function (response) {\n          notification.success({ message: 'Template edited.' });\n          setDisable(false)\n          getDocuments();\n        })\n        .catch(function (response) {\n          notification.error({ message: 'Template Upload Failed.' });\n        });\n      setTimeout(() => {\n        setTemplateModal(false);\n      }, 600);\n    }\n};\n  const handleTemplate = (item) => (e) => {\n    console.log(item)\n    console.log(e)\n    if (item === 'document') {\n      setTemplateData({ ...TemplateData, document: e.target.files[0] });\n    } else\n    if(item === \"category\"){\n      TemplateData[`${item}`] = e;\n      setTemplateData({ ...TemplateData });\n    }\n    \n    console.log(TemplateData)\n  };\n  const submitTemplate = async () => {\n    \n    if(TemplateData.category === ''){\n      notification.warning({\n        message : \"Please provide a category.\"\n      })\n    }else\n    if(TemplateData.document === '' ){\n      notification.warning({\n        message : \"Please provide a document.\"\n      })\n    }\n    else{\n      setDisable(true)\n      var docFormData = new FormData();\n    docFormData.set('document', TemplateData.document);\n    docFormData.set('category', TemplateData.category);\n    docFormData.set('userId', userId);\n    api\n      .post('/document/upload/934894383948u43', docFormData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      })\n      .then(function (response) {\n        notification.success({ message: 'Template Uploaded.' });\n        getDocuments();\n      })\n      .catch(function (response) {\n        notification.error({ message: 'Template Upload Failed.' });\n      });\n    setTimeout(() => {\n      setTemplateModal(false);\n      setDisable(false)\n    }, 600);\n    }\n    \n  };\n\n\n  //funtions for category\n  const columnsForCatagory = [\n    \n    {\n      title: 'Category Name',\n      dataIndex: 'name',\n      key: '1',\n    },\n    \n\n    {\n      title: 'Edit',\n      dataIndex: 'edit',\n      key: '6',\n      render: (_, record) => {\n        return (\n          <Button\n            className=\"btn-outline-info \"\n            onClick={() => {\n              editCategory(record);\n            }}\n          >\n            Edit\n          </Button>\n        );\n      },\n    },\n    {\n      title: 'Delete',\n      dataIndex: 'delete',\n      key: '7',\n      render: (_, record) => {\n        return (\n       \n                    title=\"Are you sure delete this Catagory?\"\n                    onConfirm={()=>deleteCategory(record._id)}\n                    onCancel={()=>{}}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button\n                      className=\" btn-outline-danger \"\n                    >\n                      Delete\n                    </Button>\n                  </Popconfirm>\n          \n        );\n      },\n    },\n    \n  ];\n  const handleCategory = (item) => (e) => {\n    console.log(\"chnage\")\n    console.log(item)\n    console.log(e)\n  \n        CatagoryData[`${item}`] = e.target.value;\n        setCatagoryData({ ...CatagoryData });\n  \n    console.log(CatagoryData)\n  };\n\n  const deleteCategory = async (docId) => {\n    await api\n      .get(`/document/category/delete/${docId}`)\n      .then((res) => {\n        notification.success({ message: 'Catagory Deleted SuccessFully.' });\n        getCategory();\n      })\n      .catch((res) => {\n        notification.error({ message: 'Catagory Deletion Failed.' });\n      });\n  };\n  \n  const editCategory =  (record) => {\n    \n    setModalFor('Edit');\n    setcataoryModal(true)\n    setCatagoryData(record)\n\n};\n  \n  \n\n  const getCategory = ( ) =>{\n    let tempCatagory = [];\n    api.get(`/document/category/viewforuser/${userId}`).then((res) => {\n        setCategory(res.data.data)\n      console.log(res)\n      res.data.data.map((item, index) => {\n        const data = {\n          name : item.name,\n          key : index,\n          _id : item._id,\n          userId :userId\n        }\n        tempCatagory.push(data)\n      });\n      setCatagoryTable(tempCatagory);\n    });\n  \n   \n    //setLoading(false)\n  }\n  const AddCategory = ( ) =>{\n    if(CatagoryData.name === ''){\n      notification.warning({\n        message : \"Please provide a name.\"\n      })\n    }\n    else{\n      setDisable(true)\n      console.log(CatagoryData)\n    api\n      .post('/document/category/create/' , CatagoryData)\n      .then(function (response) {\n        console.log(response)\n        getCategory()\n        notification.success({ message: 'Category created.' });\n\n        //getDocuments();\n      })\n      .catch(function (response) {\n        notification.error({ message: 'Failed.' });\n      });\n    setTimeout(() => {\n      setcataoryModal(false)\n      setDisable(false)\n    }, 600);\n    }\n    \n  }\n  const EditCategory = ( ) =>{\n    if(CatagoryData.name === ''){\n      notification.warning({\n        message : \"Please provide a name.\"\n      })\n    }\n    else{\n      setDisable(true)\n      console.log(CatagoryData)\n    api\n      .post('/document/category/edit/' + CatagoryData._id , CatagoryData)\n      .then(function (response) {\n        console.log(response)\n        getCategory()\n        notification.success({ message: 'Category Edited.' });\n\n        //getDocuments();\n      })\n      .catch(function (response) {\n        notification.error({ message: 'Failed.' });\n      });\n    setTimeout(() => {\n      setcataoryModal(false)\n      setDisable(false)\n      console.log(CatagoryTable)\n    }, 600);\n    }\n    \n  }\n\n  const CatagoryForm = () => (\n    <Modal\n      title={` ${modalFor} Catagory`}\n      visible={cataoryModal}\n      onCancel={() => setcataoryModal(false)}\n      footer={[\n        <Button key=\"back\" onClick={() => setcataoryModal(false)}>\n          Cancel\n        </Button>,\n        <Button\n          key=\"submit\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          disabled={Disable}\n          onClick={modalFor === 'Upload' ? AddCategory : EditCategory}\n        >\n          Submit\n        </Button>,\n      ]}\n    >\n      <Form\n        {...layout}\n        name=\"basic\"\n        fields={[\n          {\n            name: ['name'],\n            value: CatagoryData.name,\n          },\n          \n        ]}\n      >\n        <Form.Item\n          key=\"name\"\n          label=\"Name\"\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input name!',\n            },\n          ]}\n        >\n          <Input onChange={handleCategory('name')} value={CatagoryData.name} />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n\n  const ButtonForCatagory = (\n    <div className=\"d-flex justify-content-center\">\n           <Button\n            onClick={()=>setcataoryModal(true)}\n          >\n            Add Category\n          </Button>\n      </div>\n  \n  );\n  const ButtonForTemplate = (\n    <div className=\"d-flex justify-content-center\">\n          <Button\n            onClick={() => {\n              setTemplateData({\n                document: '',\n                userId : userId,\n                category: '',\n              }); //todo\n\n              setTemplateModal(true);\n              setModalFor('Upload');\n            }}\n          >\n            Upload \n          </Button>\n      </div>\n  \n  );\n  const uploadTemplate = () => (\n    <Modal\n      title={` ${modalFor} Template`}\n      visible={TemplateModal}\n      onCancel={() => setTemplateModal(false)}\n      footer={[\n        <Button key=\"back\" onClick={() => setTemplateModal(false)}>\n          Cancel\n        </Button>,\n        <Button\n          key=\"submit\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          disabled={Disable}\n          onClick={modalFor === 'Upload' ? submitTemplate : EditTemplate}\n        >\n          Submit\n        </Button>,\n      ]}\n    >\n      <Form\n        {...layout}\n        name=\"basic\"\n        fields={[\n        \n          {\n            name: ['category'],\n            value: TemplateData.category,\n          },\n         \n        ]}\n      >\n        <Form.Item\n          key=\"category\"\n          label=\"Category\"\n          name=\"category\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input category',\n            },\n          ]}\n        >\n          <Select\n            showSearch\n            style={{ width: 200 }}\n            placeholder=\"Select a Catagory\"\n            optionFilterProp=\"children\"\n            onChange={handleTemplate('category')}\n            filterOption={(input, option) =>\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {Category.map((item, index) => (\n              <Option key={index} value={item.name}>\n                {item.name}\n              </Option>\n            ))}\n          </Select>\n        \n        </Form.Item>\n        {modalFor === 'Upload' && (\n          <Form.Item\n            key=\"document\"\n            label=\"Document\"\n            name=\"document\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your File!',\n              },\n            ]}\n          >\n            <Input\n              type=\"file\"\n              onChange={handleTemplate('document')}\n             // value={uploadData.document}\n            />\n          </Form.Item>\n        )}\n      </Form>\n    </Modal>\n  );\n    */\n  }\n  const getCategory = ( ) =>{\n    let tempCatagory = [];\n    api.get(`/document/category/viewforuser/${userId}`).then((res) => {\n        setCategory(res.data.data)\n      console.log(res)\n      res.data.data.map((item, index) => {\n        const data = {\n          name : item.name,\n          key : index,\n          _id : item._id,\n          userId :userId\n        }\n        tempCatagory.push(data)\n      });\n      setCatagoryTable(tempCatagory);\n    });\n  \n   \n    //setLoading(false)\n  }\n  //funtions for folder\n  const columnsForFolder = [\n    {\n      title: 'Type',\n      dataIndex: 'type',\n      key: '1',\n    },\n    {\n      title: 'Folder Name',\n      dataIndex: 'name',\n      key: '1',\n      render: (_ , record) => {\n        return (\n          <Space>\n            <FolderTwoTone />\n            <a style={{color : \"skyblue\", fontSize : \"15px\" , fontWeight : \"600\"}} >{record.name}</a>\n          </Space>  \n        );\n      },\n    },\n    {\n      title: 'Open',\n      dataIndex: 'open',\n      key: '6',\n      render: (_, r) => {\n        return (\n          <Button\n            className=\"btn-outline-info \"\n            onClick={() => {\n              setLoading(true)\n              let stack = Stack\n              console.log(Stack)\n              stack.push(r)\n              setStack(stack)\n              setrecord(r)\n              console.log(Stack)\n              props.history.push('/documents/view' , r)\n              \n            }}\n          >\n            Open\n          </Button>\n        );\n      },\n    },\n\n    {\n      title: 'Edit',\n      dataIndex: 'edit',\n      key: '6',\n      render: (_, record) => {\n        return (\n          <Button\n            className=\"btn-outline-info \"\n            onClick={() => {\n              editFolder(record);\n            }}\n          >\n            Edit\n          </Button>\n        );\n      },\n    },\n    {\n      title: 'Delete',\n      dataIndex: 'delete',\n      key: '7',\n      render: (_, record) => {\n        return (\n          <Popconfirm\n                    title=\"Are you sure delete this Folder?\"\n                    onConfirm={()=>deleteFolder(record._id)}\n                    onCancel={()=>{}}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button\n                      className=\" btn-outline-danger \"\n                    >\n                      Delete\n                    </Button>\n                  </Popconfirm>\n          \n        );\n      },\n    },\n    {\n      title: 'Download',\n      dataIndex: 'download',\n      key: '8',\n      render: (_, record) => {\n        return (\n          <Button\n            className=\"btn-outline-primary \"\n            onClick={() => {\n              \n            }}\n            icon={<DownloadOutlined />}\n          >\n            Download\n          </Button>\n        );\n      },\n    }\n    \n    \n  ];\n\n  const deleteFolder = async (docId) => {\n    await api\n      .get(`/document/folder/delete/${docId}`)\n      .then((res) => {\n        notification.success({ message: 'Folder Deleted SuccessFully.' });\n        getFolder()\n      })\n      .catch((res) => {\n        notification.error({ message: 'Folder Deletion Failed.' });\n      });\n  };\n\n  const handleFolder = (item) => (e) => {\n    console.log(\"chnage\")\n    console.log(item)\n    console.log(e)\n  \n        FolderData[`${item}`] = e.target.value;\n        setCatagoryData({ ...FolderData });\n  \n    console.log(FolderData)\n  };\n\n  const getFolder = ( ) =>{\n    /*\n    let tempDocs = [];\n    await api.get(`/document/folder/view/${record._id}`).then((res) => {\n      console.log(res.data.data)\n      res.data.data.documents.map((item, index) => {\n        tempDocs = [\n          ...tempDocs,\n          {\n            ...item,\n            type : \"File\",\n            key: item._id,\n            matter: item.matter !== null ? item.matter.matterDescription : '-',\n            receivedDate: getISTDate(item.receivedDate),\n            lastEdit: getISTDate(item.lastEdit),\n          },\n        ];\n      });\n    });\n    setDocs(tempDocs);\n      */\n    let tempFolder = [];\n    api.get(`/document/folder/view/${record._id}`).then((res) => {\n      console.log(res)\n      \n      res.data.data.folder.map((item, index) => {\n        const data = {\n          type: \"Folder\",\n          folder : [],\n          name : item.name,\n          key : index,\n          documents : item.documents,\n          _id : item._id,\n          userId :userId\n        }\n        tempFolder.push(data)\n      });\n      setFolderTable(tempFolder);\n      console.log(FolderTable)\n      setLoading(false)\n      //getDocuments()\n    });\n  \n   \n    //setLoading(false)\n  \n  }\n\n  const addFolder = ( ) =>{\n    if(FolderData.name === ''){\n      notification.warning({\n        message : \"Please provide a name.\"\n      })\n    }\n    else{\n      setDisable(true)\n      console.log(FolderData)\n    api\n      .post('/document/folder/create' , FolderData)\n      .then(function (response) {\n        console.log(response)\n         let folderData = record\n         folderData.folder.push(response.data.data._id)\n         api\n            .post('/document/folder/edit/' + folderData._id , folderData)\n            .then(function (response) {\n              console.log(response)\n              getFolder()\n              setFolderModal(false)\n              setDisable(false)\n              notification.success({ message: 'Folder Created.' });\n\n              //getDocuments();\n            })\n            .catch(function (response) {\n              notification.error({ message: 'Failed.' });\n            });\n      })\n    setTimeout(() => {\n      \n    }, 600);\n    }\n    \n  }\n  const editFolder = async (record) => {   \n    setModalFor('Edit');\n    setFolderModal(true);\n    setFolderData(record)\n};\n  const EditFolder = ( ) =>{\n    if(FolderData.name === ''){\n      notification.warning({\n        message : \"Please provide a name.\"\n      })\n    }\n    else{\n      setDisable(true)\n      console.log(CatagoryData)\n    api\n      .post('/document/folder/edit/' + FolderData._id , FolderData)\n      .then(function (response) {\n        console.log(response)\n        getFolder()\n        notification.success({ message: 'Folder Edited.' });\n\n        //getDocuments();\n      })\n      .catch(function (response) {\n        notification.error({ message: 'Failed.' });\n      });\n    setTimeout(() => {\n      setFolderModal(false)\n      setDisable(false)\n      console.log(CatagoryTable)\n    }, 600);\n    }\n    \n  }\n  const SubmitViaTemplate = async () => {\n    \n    if(tempDocx.category === ''){\n      notification.warning({\n        message : \"Please provide a category.\"\n      })\n    }else\n    if(tempDocx.contact === ''){\n      notification.warning({\n        message : \"Please provide a contact.\"\n      })\n    }else\n    if(tempDocx.document === '' ){\n      notification.warning({\n        message : \"Please provide a document.\"\n      })\n    }else\n    if(tempDocx.matter === '' ){\n      notification.warning({\n        message : \"Please provide a matter.\"\n      })\n    }else\n    if(tempDocx.name === ''){\n      notification.warning({\n        message : \"Please provide a name.\"\n      })\n    }\n    else{\n      console.log(userId)\n      setDisable(true)\n    api\n      .post('/document/uploadtemplate/934894383948u43', tempDocx)\n      .then(function (response) {\n         let docs = record\n          docs.documents.push(response.data.data._id)\n        api\n                .post('/document/folder/edit/' + docs._id , docs)\n                .then(function (response) {\n                    console.log(response)\n                    notification.success({ message: 'Document Uploaded.' });\n                    getDocuments();\n\n                    //getDocuments();\n                })\n                .catch(function (response) {\n                    notification.error({ message: 'Failed.' });\n                });\n        \n      })\n      \n    setTimeout(() => {\n      settempDocxModal(false)\n      setViewUpload(false);\n      setDisable(false)\n    }, 600);\n    }\n    \n  };\n  const handleViaTemplate = (item) => (e) => {\n    console.log(item)\n    console.log(e)\n    if(item === \"category\" || item ===\"document\"){\n      tempDocx[`${item}`] = e;\n      settempDocx({ ...tempDocx });\n    }else\n    if(item === \"category\" || item ===\"document\"){\n      tempDocx[`${item}`] = e;\n      settempDocx({ ...tempDocx });\n    }\n    else {\n      if (item === 'matter') {\n        if(modalFor === \"Upload\"){\n          console.log(\"from the uploads\")\n          tempDocx[`${item}`] = e;\n          settempDocx({ ...tempDocx });\n          getMatterById(e);\n        }else{\n          console.log(\"from the edits\")\n          api.get(`/matter/view/${e}`).then((res) => {\n            tempDocx[`${item}`] = res.data.data ;\n            settempDocx({ ...tempDocx });\n            getMatterById(e);\n            });\n        }\n      } else {\n        tempDocx[`${item}`] = e.target.value;\n        settempDocx({ ...tempDocx });\n      }\n    }\n    console.log(tempDocx)\n  };\n\n  const uploadFolder = () => (\n  \n    <Modal\n      title={` ${modalFor === \"Upload\" ? \"Create\" : \"Update\"} Folder`}\n      visible={FolderModal}\n      onCancel={() => setFolderModal(false)}\n      footer={[\n        <Button key=\"back\" onClick={() => setFolderModal(false)}>\n          Cancel\n        </Button>,\n        <Button\n          key=\"submit\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          disabled={Disable}\n          onClick={modalFor === 'Upload' ? addFolder : EditFolder}\n        >\n          Submit\n        </Button>,\n      ]}\n    >\n      <Form\n        {...layout}\n        name=\"basic\"\n        fields={[\n          {\n            name: ['name'],\n            value: FolderData.name,\n          },\n        ]}\n      >\n        <Form.Item\n          key=\"name\"\n          label=\"Name\"\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input name!',\n            },\n          ]}\n        >\n          <Input onChange={handleFolder('name')} value={FolderData.name} />\n        </Form.Item>\n\n        </Form>\n    </Modal>\n  );\n  //common funtions\n  const layout = {\n    labelCol: {\n      span: 8,\n    },\n    wrapperCol: {\n      span: 16,\n    },\n  };\n  \n  \n  \n  const getISTDate = (dateInUTC) => {\n    var localDate = new Date(dateInUTC);\n    return localDate.toLocaleString();\n  };\n  const getMatterById = async (matterId) => {\n    await api.get(`/matter/view/${matterId}`).then((res) => {\n      let data = res.data.data.client !== null ? res.data.data.client._id : '-';\n      setUploadData({ ...uploadData, contact: data });\n    });\n  };\n  \n  \n  \n\n  useEffect(() => {\n    getDocuments();\n    getCategory()\n    getFolder()\n  }, [record._id]);\n\n  const uploadTempDoc = () => (\n    <Modal\n      title={` ${modalFor} Document`}\n      visible={tempDocxModal}\n      onCancel={() => settempDocxModal(false)}\n      footer={[\n        <Button key=\"back\" onClick={() => settempDocxModal(false)}>\n          Cancel\n        </Button>,\n        <Button\n          key=\"submit\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          disabled={Disable}\n          onClick={modalFor === 'Upload' ? SubmitViaTemplate : handleEdit}\n        >\n          Submit\n        </Button>,\n      ]}\n    >\n      <Form\n        {...layout}\n        name=\"basic\"\n        fields={[\n          {\n            name: ['name'],\n            value: tempDocx.name,\n          },\n          {\n            name: ['category'],\n            value: tempDocx.category,\n          },\n          {\n            name: ['matter'],\n            value:\n              modalFor === 'Edit' ? tempDocx.matter._id : tempDocx.matter,\n          }, //todo\n          {\n  \n            name: ['document'],\n            //value: uploadData.document,\n          }\n        ]}\n      >\n        <Form.Item\n          key=\"name\"\n          label=\"Name\"\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input name!',\n            },\n          ]}\n        >\n          <Input onChange={handleViaTemplate('name')} value={tempDocx.name} />\n        </Form.Item>\n\n        <Form.Item\n          key=\"matter\"\n          label=\"Matter\"\n          name=\"matter\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input matter',\n            },\n          ]}\n        >\n          <Select\n            showSearch\n            style={{ width: 200 }}\n            placeholder=\"Select a Matter\"\n            optionFilterProp=\"children\"\n            onChange={handleViaTemplate('matter')}\n            filterOption={(input, option) =>\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {matters.map((item, index) => (\n              <Option key={index} value={item._id}>\n                {item.matterDescription}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item\n          key=\"category\"\n          label=\"Category\"\n          name=\"category\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input category',\n            },\n          ]}\n        >\n          <Select\n            showSearch\n            style={{ width: 200 }}\n            placeholder=\"Select a Catagory\"\n            optionFilterProp=\"children\"\n            onChange={handleViaTemplate('category')}\n            filterOption={(input, option) =>\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {Category.map((item, index) => (\n              <Option key={index} value={item.name}>\n                {item.name}\n              </Option>\n            ))}\n          </Select>\n        \n        </Form.Item>\n      \n        <Form.Item\n          key=\"document\"\n          label=\"Document\"\n          name=\"document\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input document',\n            },\n          ]}\n        >\n          <Select\n            showSearch\n            style={{ width: 200 }}\n            placeholder=\"Select a document\"\n            optionFilterProp=\"children\"\n            onChange={handleViaTemplate('document')}\n            filterOption={(input, option) =>\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {TemplateTable.map((item, index) => (\n              <Option key={index} value={item.document}>\n                {item.name}\n              </Option>\n            ))}\n          </Select>\n        \n        </Form.Item>\n      \n      </Form>\n    </Modal>\n  );\n  const uploadForm = () => (\n    <Modal\n      title={` ${modalFor} Document`}\n      visible={viewUpload}\n      onCancel={() => setViewUpload(false)}\n      footer={[\n        <Button key=\"back\" onClick={() => setViewUpload(false)}>\n          Cancel\n        </Button>,\n        <Button\n          key=\"submit\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          disabled={Disable}\n          onClick={modalFor === 'Upload' ? handleSubmit : handleEdit}\n        >\n          Submit\n        </Button>,\n      ]}\n    >\n      <Form\n        {...layout}\n        name=\"basic\"\n        fields={[\n          {\n            name: ['name'],\n            value: uploadData.name,\n          },\n          {\n            name: ['category'],\n            value: uploadData.category,\n          },\n          {\n            name: ['matter'],\n            value:\n              modalFor === 'Edit' ? uploadData.matter._id : uploadData.matter,\n          }, //todo\n          {\n            name: ['document'],\n           // value: uploadData.document,\n          }\n        ]}\n      >\n        <Form.Item\n          key=\"name\"\n          label=\"Name\"\n          name=\"name\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input name!',\n            },\n          ]}\n        >\n          <Input onChange={handleInput('name')} value={uploadData.name} />\n        </Form.Item>\n\n        <Form.Item\n          key=\"matter\"\n          label=\"Matter\"\n          name=\"matter\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input matter',\n            },\n          ]}\n        >\n          <Select\n            showSearch\n            style={{ width: 200 }}\n            placeholder=\"Select a Matter\"\n            optionFilterProp=\"children\"\n            onChange={handleInput('matter')}\n            filterOption={(input, option) =>\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {matters.map((item, index) => (\n              <Option key={index} value={item._id}>\n                {item.matterDescription}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item\n          key=\"category\"\n          label=\"Category\"\n          name=\"category\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input category',\n            },\n          ]}\n        >\n          <Select\n            showSearch\n            style={{ width: 200 }}\n            placeholder=\"Select a Catagory\"\n            optionFilterProp=\"children\"\n            onChange={handleInput('category')}\n            filterOption={(input, option) =>\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {Category.map((item, index) => (\n              <Option key={index} value={item.name}>\n                {item.name}\n              </Option>\n            ))}\n          </Select>\n        \n        </Form.Item>\n \n          <Form.Item\n            key=\"document\"\n            label=\"Document\"\n            name=\"document\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your File!',\n              },\n            ]}\n          >\n            <Input\n              type=\"file\"\n              onChange={handleInput('document')}\n             // value={uploadData.document}\n            />\n          </Form.Item>\n  \n      </Form>\n    </Modal>\n  );\n\n \n  \n\n  \n  const menu = (\n    <Menu>\n      <Menu.Item \n        onClick={() => {\n          setUploadData({\n            document: '',\n            _id: '',\n            name: '',\n            matter: '',\n            category: '',\n            userId :userId\n          }); //todo\n\n          setViewUpload(true);\n          setModalFor('Upload');\n        }}\n        key=\"0\">\n        <span>Upload File</span>\n      </Menu.Item>\n\n      <Menu.Item\n      onClick = {()=>{\n        setFolderData({\n          name : \"\",\n          userId : userId,\n          folder : [],\n          documents : []\n        })\n        setFolderModal(true)\n        setModalFor('Upload');\n      }}\n       key=\"1\">\n        <span>Create Folder</span>\n      </Menu.Item>\n\n      <Menu.Divider />\n      <Menu.Item \n      onClick={() => {\n        settempDocx({\n          document: '',\n          _id: '',\n          name: '',\n          matter: '',\n          category: '',\n          userId : userId\n        }); //todo\n\n        settempDocxModal(true);\n        setModalFor('Upload');\n      }}\n      key=\"3\">Document from Template</Menu.Item>\n    </Menu>\n  );\n  \n  const ButtonForDocument = (\n    <div className=\"d-flex justify-content-center\">\n      <Dropdown overlay={menu} trigger={['click']}>\n        <Button className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\n          Upload <DownOutlined />\n        </Button>\n      </Dropdown>\n    </div>\n  \n  );\n  \n  \n  const [operations, setoperations] = useState(ButtonForDocument)\n  const callback = ( key ) => {\n    console.log(key);\n    setoperations(ButtonForDocument)\n    /*\n    if(key == 1){\n      setoperations(ButtonForDocument)\n    }else if(key == 2){\n      setoperations(ButtonForCatagory)\n    }if(key == 3){\n      setoperations(ButtonForTemplate)\n    }\n    */\n  }\n  const handleGOBACK = ( ) =>{\n    setLoading(true)\n    console.log(record)\n    let stack = Stack\n      console.log(stack.length)\n      stack.splice(stack.length - 1 , 1)\n      const r = stack[stack.length - 1]\n      setStack(stack)\n\n    if(Stack.length == 0){\n      props.history.push('/documents')\n    }else{  \n      setrecord(r)\n\n    }\n    console.log(record)\n  }\n  return (\n    <div>\n        <Spin size = \"large\" spinning={Loading}>\n\n        <Tabs\n            defaultActiveKey=\"1\"\n            tabBarExtraContent={operations}\n            onChange={callback}\n            className=\"card p-4 overflow-auto\"\n          >\n            <TabPane tab=\"Document\" key=\"1\">\n          \n              {\n                uploadForm()\n              }\n              {\n                uploadFolder()\n              }\n              {\n              uploadTempDoc()\n              }\n              <Table \n              onRow={(r, rowIndex) => {\n                return {\n                  onDoubleClick: () => { \n                    setLoading(true)\n                    let stack = Stack\n                    console.log(Stack)\n                    stack.push(r)\n                    setStack(stack)\n                    setrecord(r)\n                    console.log(Stack)\n                    props.history.push('/documents/view' , r)\n                  }, // double click row\n                };\n              }}\n              dataSource={FolderTable} \n              columns={columnsForFolder} />\n\n              <Table \n              dataSource={\n                dataSrc.length === 0 && value === '' ? docs : dataSrc\n              } \n              columns={columnsForDocuments} />\n            </TabPane>\n          {/*\n            <TabPane tab=\"Category\" key=\"2\">\n              \n              {CatagoryForm()}\n            <Table dataSource={CatagoryTable} columns={columnsForCatagory} />\n            </TabPane>\n            <TabPane tab=\"Template\" key=\"3\">\n            {uploadTemplate()}\n              <Table dataSource={TemplateTable} columns={columnsForTemplate} />\n          </TabPane>\n          */\n          }\n        </Tabs>\n\n\n        </Spin>\n        <Button type = \"primary\" onClick={handleGOBACK}>GO BACK</Button>\n\n    </div>\n     );\n};\n\nexport default Documents;\n"],"sourceRoot":""}