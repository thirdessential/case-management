{"version":3,"sources":["App/containers/Billings/ExcelExport.js","App/containers/Billings/billing.js"],"names":["ExportExcel","Component","constructor","props","super","console","log","dataSource","render","this","id","className","map","value","index","key","lastSeen","status","dueDate","client","matter","issueDate","balance","table","filename","sheet","buttonText","TabPane","Tabs","billing","React","handelBills","type","history","push","state","tableData","draftBills","unpaidBills","paidBills","loading","visible","disable","emailAddress","imageFile","cancel","e","message","error","componentDidMount","api","get","userId","then","res","data","testttt","temp","_id","substring","invoiceId","firstName","lastName","matterDescription","parseFloat","toFixed","setState","handelAction","record","post","newState","splice","notification","success","setTimeout","catch","err","handleDelete","columnsforDraft","title","dataIndex","_","onConfirm","onCancel","okText","cancelText","Check","onClick","danger","unpaidColumns","paidColumns","handleInvoice","destroy","warning","docFormData","FormData","set","headers","response","to","subject","text","date","Date","email","size","spinning","doc","jsPDF","setFontSize","val","td","content","startY","head","body","autoTable","save","defaultActiveKey","onChange","tab","columns","onOk","footer","disabled","Group","controlId","name","target","files","placeholder","connect","user","token"],"mappings":"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","file":"static/js/49.eae7cfcf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\n\nexport class ExportExcel extends Component {\n  constructor(props) {\n    super(props);\n    console.log('data in excel', props.dataSource);\n  }\n  \n  render() {\n    console.log(this.props)\n    return (\n      <div>\n        <table id=\"matter\" className=\"d-none\">\n          <thead>\n            <tr>\n              <th>S.No</th>\n              <th>Last Seen</th>\n              <th>Status</th>\n              <th>Due Date</th>\n              <th>ID</th>\n              <th>Client</th>\n              <th>Matter</th>\n              <th>Issue Date</th>\n              <th>Balance</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {this.props.dataSource.map((value, index) => {\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{value.lastSeen}</td>\n                  <td>{value.status}</td>\n                  <th>{value.dueDate}</th>\n                  <th>{ value.id }</th>\n                  <th>{value.client}</th>\n                  <th>{value.matter}</th>\n                  <th>{value.issueDate}</th>\n                  <th>{value.balance}</th>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <ReactHTMLTableToExcel\n          className=\"btn btn-outline-primary btn-sm excel-button\"\n          table=\"matter\"\n          filename=\"Bills\"\n          sheet=\"Sheet\"\n          buttonText=\"Export to Excel\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExportExcel;\n","import React from 'react';\nimport { Tabs, Card, Table, Button, Popconfirm, message, notification, Spin, Modal } from 'antd';\nimport { Form } from 'react-bootstrap';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport api from '../../../resources/api';\nimport { connect } from 'react-redux'\nimport ExportExcel from './ExcelExport'\nconst { TabPane } = Tabs;\n\nclass billing extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      tableData : [],\n      draftBills : [],\n      unpaidBills : [],\n      paidBills : [],\n      status : false,\n      loading : true,\n      visible : false,\n      disable : false,\n      emailAddress : \"\",\n      imageFile : {}\n    }\n  }\n  handelBills = (type) => {\n    if (type === 'record') {\n      this.props.history.push('/manage/billing/record');\n    }\n  };\n\n  cancel(e) {\n    message.error('Canceled');\n  }\n\n  \n\n  componentDidMount(){\n   \n    api.get('/billing/bill/viewforuser/'+this.props.userId).then((res)=>{\n      console.log(res.data.data)\n      let tableData = []\n      let paidBills = []\n      let unpaidBills = []\n      let draftBills = []\n      res.data.data.map((value , index)=>{\n     console.log({testttt: value.client})\n    //    const issueDate = today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear()\n        const temp = {\n          key : index ,\n          _id : value._id,\n          lastSeen : value.lastSeen ? value.lastSeen.substring(0,10) : \"-\",\n          status : value.status,\n          dueDate : value.dueDate.substring(0,10),\n          id : value.invoiceId ? value.invoiceId : '-' ,\n          client : value.client ? value.client.firstName + \" \" + value.client.lastName : \"-\",\n          matter : value.matter ? value.matter.matterDescription : \"-\",\n          emailAddress : value.client.emailAddress[0] ? value.client.emailAddress[0].emailAddress : \"\",\n          issueDate : value.issueDate.substring(0,10) ,\n          balance : parseFloat(value.balance).toFixed('2')\n        }\n        if(value.status==\"Paid\"){\n          paidBills.push(temp)\n        }\n        if(value.status==\"Unpaid\"){\n          unpaidBills.push(temp)\n        }\n        if(value.status==\"draft\"){\n          draftBills.push(temp)\n        }\n        tableData.push(temp)\n      })\n      this.setState({\n        tableData :  tableData,\n         paidBills : paidBills ,\n          unpaidBills : unpaidBills,\n           draftBills: draftBills,\n            loading : false})\n    })\n  }\n\n  render() {\n    const callback = () => {};\n    const handelAction = (record, type) => {\n      const data = record\n      delete data.matter\n      delete data.client\n      if(type === \"fromDraft\"){\n        data.status = \"Unpaid\"\n        \n      }else\n      if(type === \"fromUnpaid\"){\n        data.status = \"Paid\"\n      }\n      api.post('/billing/bill/edit/'+record._id , data).then((res)=>{\n        console.log(res)\n        if(type==\"fromDraft\"){\n          const newState = this.state\n          newState.draftBills.splice(record.key, 1)\n          newState.unpaidBills.push(res.data.data)\n        }\n        if(type==\"fromUnpaid\"){\n          const newState = this.state\n          newState.unpaidBills.splice(record.key, 1)\n          newState.paidBills.push(res.data.data)\n        }\n\n        notification.success({message : \"Success\"})\n        setTimeout(()=>{\n        //  window.location.reload()\n          this.componentDidMount()\n        },1000)\n\n      }).catch((err)=>{\n        console.log(err)\n        notification.error(\"Failed\")\n      })\n      \n    }\n    const handleDelete = (record) => {\n      api\n        .get('/billing/bill/delete/' + record._id)\n        .then((res) => {\n          console.log(res)\n          this.componentDidMount()\n          notification.success({ message: 'Bills Deleted !' });\n          setTimeout(() => {\n            //window.location.reload();\n          }, 1500);\n        })\n        .catch((err) => {\n          notification.error({ message: 'Failed to delete' });\n        });\n    };\n\n    const columnsforDraft = [\n      {\n        title: 'Action',\n        dataIndex: 'action',\n        key: 'action',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Approve this draft bill\"\n              onConfirm={() => handelAction(record, \"fromDraft\")}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Form.Check type=\"checkbox\"  />\n            </Popconfirm>\n          );\n        },\n      },\n      {\n        title: 'Last Seen',\n        dataIndex: 'lastSeen',\n        key: 'lastSeen',\n      },\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n      },\n      {\n        title: 'Due Date',\n        dataIndex: 'dueDate',\n        key: 'dueDate',\n      },\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n      },\n      {\n        title: 'Client',\n        dataIndex: 'client',\n        key: 'client',\n      },\n      {\n        title: 'Matter',\n        dataIndex: 'matter',\n        key: 'matter',\n      },\n      {\n        title: 'Issue Date',\n        dataIndex: 'issueDate',\n        key: 'issueDate',\n      },\n      {\n        title: 'Balance',\n        dataIndex: 'balance',\n        key: 'balance',\n      },\n      {\n      title: 'SendInvoice',\n      dataIndex: 'SendInvoice',\n      key: 'send',\n      render: (_, record) => {\n        return (\n          \n            <Button onClick={()=>{\n                this.setState({\n                  visible : true,\n                  emailAddress : record.emailAddress\n                })\n              }}>Send Invoice</Button>\n         \n        );\n      },\n    },\n      {\n        title: 'Delete',\n        dataIndex: 'Delete',\n        key: 'Delete',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Are you sure you want to delete this bill ?\"\n              onConfirm={() => handleDelete(record)}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button danger>\n                Delete\n              </Button>\n            </Popconfirm>\n          );\n        },\n      }\n    ];\n\n    const unpaidColumns= [\n      {\n        title: 'Action',\n        dataIndex: 'action',\n        key: 'action',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Mark as Paid\"\n              onConfirm={() => handelAction(record, \"fromUnpaid\")}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Form.Check type=\"checkbox\"  />\n            </Popconfirm>\n          );\n        },\n      },\n     \n      {\n        title: 'Last Seen',\n        dataIndex: 'lastSeen',\n        key: 'lastSeen',\n      },\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n      },\n      {\n        title: 'Due Date',\n        dataIndex: 'dueDate',\n        key: 'dueDate',\n      },\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n      },\n      {\n        title: 'Client',\n        dataIndex: 'client',\n        key: 'client',\n      },\n      {\n        title: 'Matter',\n        dataIndex: 'matter',\n        key: 'matter',\n      },\n      {\n        title: 'Issue Date',\n        dataIndex: 'issueDate',\n        key: 'issueDate',\n      },\n      {\n        title: 'Balance',\n        dataIndex: 'balance',\n        key: 'balance',\n      },\n      {\n        title: 'SendInvoice',\n        dataIndex: 'SendInvoice',\n        key: 'send',\n        render: (_, record) => {\n          return (\n            \n              <Button onClick={()=>{\n                  this.setState({\n                    visible : true,\n                    emailAddress : record.emailAddress\n                  })\n                }}>Send Invoice</Button>\n           \n          );\n        },\n      },\n      {\n        title: 'Delete',\n        dataIndex: 'Delete',\n        key: 'Delete',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Are you sure you want to delete this bill ?\"\n              onConfirm={() => handleDelete(record)}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button danger>\n                Delete\n              </Button>\n            </Popconfirm>\n          );\n        },\n      }\n     \n    ];\n    const paidColumns= [\n      \n      {\n        title: 'Last Seen',\n        dataIndex: 'lastSeen',\n        key: 'lastSeen',\n      },\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n      },\n      {\n        title: 'Due Date',\n        dataIndex: 'dueDate',\n        key: 'dueDate',\n      },\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n      },\n      {\n        title: 'Client',\n        dataIndex: 'client',\n        key: 'client',\n      },\n      {\n        title: 'Matter',\n        dataIndex: 'matter',\n        key: 'matter',\n      },\n      {\n        title: 'Issue Date',\n        dataIndex: 'issueDate',\n        key: 'issueDate',\n      },\n      {\n        title: 'Balance',\n        dataIndex: 'balance',\n        key: 'balance',\n      },\n      {\n        title: 'SendInvoice',\n        dataIndex: 'SendInvoice',\n        key: 'send',\n        render: (_, record) => {\n          return (\n            \n              <Button onClick={()=>{\n                  this.setState({\n                    visible : true,\n                    emailAddress : record.emailAddress\n                  })\n                }}>Send Invoice</Button>\n           \n          );\n        },\n      },\n      {\n        title: 'Delete',\n        dataIndex: 'Delete',\n        key: 'Delete',\n        render: (_, record) => {\n          return (\n            <Popconfirm\n              title=\"Are you sure you want to delete this bill ?\"\n              onConfirm={() => handleDelete(record)}\n              onCancel={this.cancel}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button danger>\n                Delete\n              </Button>\n            </Popconfirm>\n          );\n        },\n      }\n     \n    ];\n\n\n    const exportPDF = () => {\n      const unit = 'pt';\n      const size = 'A4'; // Use A1, A2, A3 or A4\n      const orientation = 'portrait'; // portrait or landscape\n\n      const marginLeft = 40;\n      const doc = new jsPDF(orientation, unit, size);\n\n      doc.setFontSize(15);\n\n      const title = 'Bills';\n      const headers = [\n        [\n          'Last Seen',\n          'Status',\n          'Due Date',\n          'ID',\n          'Client',\n          'Matter',\n          'Issue Date',\n          'Balance',\n        ],\n      ];\n    \n      let data = []\n            this.state.tableData.map((val, index)=>{\n              const td= [val.lastSeen, val.status , val.dueDate , val.id ,val.client , val.matter , val.issueDate , val.balance]\n              data.push(td)\n            })\n     \n\n      let content = {\n        startY: 50,\n        head: headers,\n        body: data,\n      };\n\n      doc.text(title, marginLeft, 40);\n      doc.autoTable(content);\n      doc.save('Bill.pdf');\n    };\n    const uploadImage = (e) => {\n      this.setState({\n        imageFile: e.target.files[0] \n      });\n    };\n\n    const handleInvoice = ( ) => {\n      notification.destroy()\n      if(this.state.imageFile === {} ){\n        notification.warning({message : \"Please upload a document\"})\n      }else{\n        this.setState({\n          disable : true\n        })\n        var docFormData = new FormData();\n            docFormData.set('image', this.state.imageFile)\n        api\n              .post('/footer/upload', docFormData, {\n                headers: { 'Content-Type': 'multipart/form-data' },\n              })\n              .then((response)=>{\n                console.log(response)\n               notification.success({ message: 'Sending Email...' });\n         //       console.log(response.data.message)\n                   let data = {\n                      to: this.state.emailAddress,\n                      subject : \"Invoice\",\n                      text : response.data.message,\n                      date  : new Date()\n                   }\n                   console.log(data)\n                   api.post(`/communication/sendemail`, data ).then((email)=>{\n                    console.log(email)\n                    this.setState({\n                      disable : false,\n                      visible : false\n                    })\n                    notification.success({\n                      message : \"Invoice sent\"\n                    })\n                  })\n                  \n              }).catch( (err)=>{\n                console.log(err)\n                this.setState({\n                  disable : false,\n                  visible : false\n                })\n              \n                notification.error({ message: 'Try again later.' });\n              })\n           \n            \n      }\n    }\n    return (\n      <Spin size= \"large\" spinning = {this.state.loading}>\n        <div className=\"p-2 \">\n          <div className=\"d-flex mb-2 title-component-header\">\n              <div className=\"title-header-name\">\n                <h5>Billing</h5>\n              </div>\n              <div className=\"d-flex extra-iteam-div\">\n                <button\n                    className=\"btn  btn-outline-primary   btn-sm\"\n                    onClick={exportPDF}\n                >\n                    Export to Pdf\n                </button>\n                <ExportExcel dataSource={this.state.tableData || []} />\n                <button\n                    className=\"btn  btn-outline-primary   btn-sm\"\n                    onClick={() => this.handelBills('record')}\n                >\n                    Record Payment\n                </button>\n                <button\n                    className=\"btn  btn-outline-primary   btn-sm\"\n                    onClick={() => this.props.history.push('/create/bills')}\n                >\n                    New Bills\n                </button>\n            </div> \n          </div>\n        <Card\n        >\n          <Tabs defaultActiveKey=\"4\" onChange={callback}>\n         \n            <TabPane tab=\"Draft\" key=\"1\">\n              <Table className=\"table-responsive\" dataSource={this.state.draftBills} columns={columnsforDraft} />\n            </TabPane>\n          \n           <TabPane tab=\"All\" key=\"4\">\n              <Table className=\"table-responsive\" dataSource={this.state.tableData} columns={paidColumns} />\n            </TabPane>\n            <TabPane tab=\"Unpaid\" key=\"3\">\n              <Table className=\"table-responsive\" dataSource={this.state.unpaidBills} columns={unpaidColumns} />\n            </TabPane>\n            <TabPane tab=\"Paid\" key=\"2\">\n              <Table className=\"table-responsive\" dataSource={this.state.paidBills} columns={paidColumns} />\n            </TabPane>\n          </Tabs>\n        </Card>\n        <Modal\n          title=\"Send Invoice\"\n          visible={this.state.visible}\n          onCancel={()=>{this.setState({visible : false})}}\n          onOk={handleInvoice}\n          footer={[\n            <Button  onClick={()=>{this.setState({visible : false})}}>\n              Cancel\n            </Button>,\n            <Button type=\"primary\" disabled = {this.state.disable} onClick={handleInvoice}>\n              Send\n            </Button>,\n          ]}\n        >\n          <Form \n           id='myForm'\n           className=\"form\"\n           className=\"form-details\">\n                  <Form.Group controlId=\"formGroupEmail\">\n                  <input\n                    type=\"file\"\n                    name=\"File\"\n                    onChange={uploadImage}\n                    placeholder=\"Upload Image\"\n                  />\n                </Form.Group>\n            </Form>\n    \n        </Modal>\n      \n      </div>\n    \n      </Spin>\n      );\n  }\n}\n\nconst mapStateToProps = state => ({\n  userId: state.user.token.user._id\n});\n\nexport default connect(mapStateToProps)(billing)"],"sourceRoot":""}