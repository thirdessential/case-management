{"version":3,"sources":["App/containers/Settings/CustomFeilds/CustomFeilds.js"],"names":["TabPane","Tabs","data","customFeilds","React","Component","constructor","props","super","this","state","default","required","disable","tableData","visible","editMode","componentDidMount","api","get","userId","then","res","console","log","customFields","map","value","index","temp","_id","type","key","name","push","setState","render","HandleChange","e","persist","target","newState","HandleOk","notification","destroy","newdata","undefined","warning","message","post","success","catch","error","ReactDOM","findDOMNode","messageForm","reset","setTimeout","handleEdit","record","handleCancel","handleDelete","splice","err","columns","title","dataIndex","text","checked","Check","id","size","onClick","onConfirm","onCancel","cancel","okText","cancelText","operations","tabBarExtraContent","tab","className","dataSource","centered","onOk","footer","disabled","ref","form","Group","controlId","Label","Control","placeholder","onChange","as","label","defaultValue","defaultChecked","connect","user","token"],"mappings":"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","file":"static/js/69.33bc81a2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Tabs, Button,Modal , Card, notification, Table, Popconfirm, Space } from 'antd';\r\nimport api from '../../../../resources/api'\r\nimport {connect} from 'react-redux'\r\nimport {Form} from 'react-bootstrap'\r\nimport ReactDOM from 'react-dom'\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nlet data = {}\r\nclass customFeilds extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      \r\n      data : {\r\n        default : false,\r\n        required : false,\r\n      },\r\n      disable : false,\r\n      tableData : [],\r\n      visible : false,\r\n      editMode : false\r\n    }\r\n  }\r\n\r\n  componentDidMount(){ \r\n    let tableData = []\r\n\r\n    api.get('/user/view/'+this.props.userId).then((res)=>{\r\n      data = res.data.data\r\n      console.log(res)\r\n      res.data.data.customFields.map((value,index)=>{\r\n        const temp = {\r\n          _id : value.type,\r\n          key: index,\r\n          name: value.name,\r\n          type : value.type,\r\n          default : value.default,\r\n          required : value.required\r\n        }\r\n        tableData.push(temp)\r\n      })\r\n      this.setState({\r\n        tableData : tableData\r\n      })\r\n    })\r\n\r\n    \r\n  }\r\n   \r\n \r\n\r\n \r\n  render() {\r\n    const HandleChange=(e)=>{\r\n      e.persist()\r\n      const { value , name } = e.target\r\n      let newState = this.state\r\n      if( e.target.name === \"required\" || e.target.name === \"default\"){\r\n       \r\n        newState.data[name] = !newState.data[name]\r\n        \r\n      }else{\r\n        newState.data[name] =  value\r\n      }\r\n      this.setState(newState)\r\n      console.log(this.state)\r\n    }\r\n    const HandleOk=()=>{\r\n      notification.destroy()\r\n     // api.post('/user/update/'+this.props.userId, data).then((res)=>{\r\n      const newdata = {\r\n        userId : this.props.userId,\r\n        name : this.state.data.name,\r\n        type : this.state.data.type,\r\n        default : this.state.data.default,\r\n        required : this.state.data.required\r\n      }\r\n      if ((newdata.name === \"\" || newdata.name === undefined)  ) {\r\n        return notification.warning({\r\n          message: \"Please select a name\",\r\n        });\r\n      }else\r\n      if ( newdata.type === \"\" ||newdata.type === undefined ) {\r\n        return notification.warning({\r\n          message: \"Please select a type\",\r\n        });\r\n      }else\r\n      if ( (newdata.required === true && newdata.default === true) || (newdata.required ===false && newdata.default ===false) ) {\r\n        return notification.warning({\r\n          message: \"Please select check either default or required\",\r\n        });\r\n      }else{\r\n        \r\n        this.setState({\r\n          disable : true\r\n        })\r\n        console.log(this.state)\r\n        if(this.state.editMode){\r\n          data.customFields[this.state.data.key] = newdata\r\n        }else{\r\n          data.customFields.push(newdata)\r\n        }\r\n        \r\n          \r\n        \r\n       api.post('/user/update/' + this.props.userId , data ).then((res)=>{\r\n        notification.success({message : \"Field Saved.\"})\r\n        this.componentDidMount()\r\n        this.setState({\r\n          visible : false,\r\n          disable : false,\r\n          editMode : false\r\n        })\r\n       }).catch(()=>{\r\n          notification.error({message : \"Failed to add\"})\r\n        }).then(()=>{\r\n          ReactDOM.findDOMNode(this.messageForm).reset()\r\n        })\r\n      \r\n      setTimeout(() => {\r\n       // window.location.reload()\r\n      }, 1000);\r\n      \r\n        \r\n      }\r\n\r\n    }\r\n    const handleEdit=(record)=>{\r\n      \r\n      this.setState({\r\n        data : record,\r\n        editMode : true\r\n      })\r\n      console.log(record)\r\n    }\r\n    const handleCancel = ( ) =>{\r\n      ReactDOM.findDOMNode(this.messageForm).reset()\r\n\r\n      this.setState({\r\n        visible : false,\r\n        editMode : false\r\n      })\r\n    }\r\n    const handleDelete=(record)=>{\r\n      data.customFields.splice(record.key, 1)\r\n      api.post('/user/update/'+this.props.userId, data).then((res)=>{\r\n        notification.success({message : \"Custom Feild Deleted\"})\r\n        this.componentDidMount()\r\n      }).catch((err)=>{\r\n        notification.error({message : \"Failed to delete\"})\r\n      })\r\n      setTimeout(() => {\r\n        //window.location.reload()\r\n      }, 1000);\r\n    }\r\n    const columns = [\r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        render: text => <a>{text}</a>,\r\n      },\r\n      {\r\n        title: 'Type',\r\n        dataIndex: 'type',\r\n        key: 'type',\r\n      },\r\n      {\r\n          title: 'Default',\r\n          dataIndex: 'default',\r\n          key: 'default',\r\n          render: checked => <Form.Check \r\n                            type=\"checkbox\"\r\n                            id={`default`}\r\n                            checked = {checked}  \r\n                        />,\r\n          \r\n        },\r\n        {\r\n          title: 'Required',\r\n          dataIndex: 'required',\r\n          key: 'required',\r\n          render: checked => <Form.Check \r\n                            type=\"checkbox\"\r\n                            id={`required`}\r\n                            checked = {checked}  \r\n                        />,\r\n        },\r\n      \r\n      {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n          <Space size=\"middle\">\r\n            <Button onClick={()=>handleEdit(record)} type=\"link\">Edit</Button>\r\n            <Popconfirm\r\n          title=\"Are you sure delete this Feild?\"\r\n          onConfirm={()=>handleDelete(record)}\r\n          onCancel={this.cancel}\r\n          okText=\"Yes\"\r\n          cancelText=\"No\"\r\n        >\r\n          <Button type=\"link\">Delete</Button>\r\n        </Popconfirm>\r\n            \r\n          </Space>\r\n        ),\r\n      },\r\n    ];\r\n    const operations = <Button onClick={() => this.setState({visible : true})}>Add</Button>\r\n    return (\r\n      <Card>\r\n      <Tabs tabBarExtraContent={operations}>\r\n             <TabPane tab=\"Custom Field\" key=\"1\">\r\n                <Table  className=\"table-responsive\" columns={columns} dataSource={this.state.tableData} />\r\n              </TabPane>\r\n              \r\n        </Tabs>\r\n        {/* \r\n        <Tabs>\r\n             <TabPane tab=\"Matter Custom Feild\" key=\"1\">\r\n                <Tabs tabBarExtraContent={operations}>\r\n                  <TabPane tab=\"Individual Feild\" key=\"1\">\r\n                          <Table columns={columns} dataSource={this.state.tableData} />\r\n\r\n                    </TabPane>\r\n                    <TabPane tab=\"Feild Sets\" key=\"2\">\r\n                          <Table columns={columns} dataSource={this.state.tableData} />\r\n\r\n                    </TabPane>\r\n                </Tabs>\r\n              </TabPane>\r\n              <TabPane tab=\"Contact Custom Feild\" key=\"2\">\r\n                <Tabs>\r\n                  <TabPane tab=\"Individual Feild\" key=\"1\">\r\n                          <Table columns={columns} dataSource={this.state.tableData} />\r\n\r\n                    </TabPane>\r\n                    <TabPane tab=\"Feild Sets\" key=\"2\">\r\n                          <Table columns={columns} dataSource={this.state.tableData} />\r\n\r\n                    </TabPane>\r\n                </Tabs>\r\n             </TabPane>\r\n        </Tabs>\r\n        */}\r\n        <Modal\r\n          title=\"Add Custom Field\"\r\n          centered\r\n          visible={this.state.visible}\r\n          onOk={HandleOk}\r\n          onCancel={handleCancel}\r\n          footer={[\r\n            <Button  onClick={handleCancel}>\r\n              Cancel\r\n            </Button>,\r\n            <Button type=\"primary\" disabled = {this.state.disable} onClick={HandleOk}>\r\n              Create Field\r\n            </Button>,\r\n          ]}\r\n        >\r\n          <Form\r\n            id='myForm'\r\n            className=\"form\"\r\n            ref={ form => this.messageForm = form }\r\n            >\r\n            <Form.Group controlId=\"Name\">\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control type=\"name\" placeholder=\"Name\" name=\"name\" onChange={HandleChange}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"Type\">\r\n                <Form.Label>Select Custom Field type</Form.Label>\r\n                <Form.Control as=\"select\" name=\"type\" onChange={HandleChange}>\r\n                <option>Checkbox</option>\r\n                <option>Date</option>\r\n                <option>password</option>\r\n                <option>Integer</option>\r\n                <option>Matter</option>\r\n                <option>number</option>\r\n                <option>Picklist</option>\r\n                <option>Text</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Form.Check \r\n                    type=\"checkbox\"\r\n                    id={`Default`}\r\n                    label={`Default`}\r\n                    name=\"default\"\r\n                    onChange={HandleChange}\r\n                /><br></br>\r\n                <Form.Check \r\n                    type=\"checkbox\"\r\n                    id={`Required`}\r\n                    label={`Required`}\r\n                    name=\"required\"\r\n                    onChange={HandleChange}\r\n                />\r\n            </Form.Group>\r\n            </Form>\r\n        </Modal>\r\n        <Modal\r\n          title=\"Edit Custom Feild\"\r\n          centered\r\n          visible={this.state.editMode}\r\n          onOk={HandleOk}\r\n          onCancel={handleCancel}\r\n          footer={[\r\n            <Button  onClick={handleCancel}>\r\n              Cancel\r\n            </Button>,\r\n            <Button type=\"primary\" disabled = {this.state.disable} onClick={HandleOk}>\r\n              Edit Feild\r\n            </Button>,\r\n          ]}\r\n        >\r\n          <Form\r\n          id='myForm'\r\n          className=\"form\"\r\n          ref={ form => this.messageForm = form }>\r\n            <Form.Group controlId=\"Name\">\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control \r\n                type=\"name\" \r\n                defaultValue = {this.state.data.name} \r\n                name=\"name\" \r\n                onChange={HandleChange}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"Type\">\r\n                <Form.Label>Select Custom Feild type</Form.Label>\r\n                <Form.Control \r\n                as=\"select\" \r\n                name=\"type\" \r\n                defaultValue = {this.state.data.type}\r\n                onChange={HandleChange}>\r\n                <option>Checkbox</option>\r\n                <option>Date</option>\r\n                <option>password</option>\r\n                <option>Integer</option>\r\n                <option>Matter</option>\r\n                <option>number</option>\r\n                <option>Picklist</option>\r\n                <option>Text</option>\r\n                </Form.Control>\r\n                <br></br>\r\n                <Form.Check \r\n                    type=\"checkbox\"\r\n                    id={`Default`}\r\n                    label={`Default`}\r\n                    name=\"default\"\r\n                    defaultChecked = {this.state.data.default}\r\n                    onChange={HandleChange}\r\n                /><br></br>\r\n                <Form.Check \r\n                    type=\"checkbox\"\r\n                    id={`Required`}\r\n                    label={`Required`}\r\n                    defaultChecked = {this.state.data.required}\r\n                    name=\"required\"\r\n                    onChange={HandleChange}\r\n                />\r\n\r\n            </Form.Group>\r\n            </Form>\r\n        </Modal>\r\n      \r\n        </Card>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  userId: state.user.token.user._id\r\n});\r\nexport default connect(mapStateToProps)(customFeilds)\r\n"],"sourceRoot":""}