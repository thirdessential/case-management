{"version":3,"sources":["App/components/Recordpayment/recordPayment.js"],"names":["optns","contacts","accounts","Record","React","Component","constructor","props","super","this","state","data","client","destination","paymentDate","source","userId","clientId","clientData","tableData","unpaidBills","payment","total","fromTotal","optionforAcoount","disabled","componentDidMount","api","get","then","res","map","value","index","id","firstName","lastName","setState","options","console","log","accountName","render","handlePayment","e","persist","target","newState","handleChange","name","newData","selectedIndex","_id","paidBills","status","pay","parseFloat","balance","temp","lastSeen","dueDate","invoiceID","invoiceId","dueIn","substring","matter","openBalace","issueDate","openBalance","md","Group","controlId","Control","style","height","type","key","placeholder","onChange","push","catch","err","title","className","fontWeight","toFixed","Label","required","invoiceTitle","textAlign","invoiceBody","bodyStyle","dataSource","columns","dataIndex","as","onClick","notification","destroy","error","message","Date","bal","post","success","history","goBack","connect","user","token"],"mappings":"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","file":"static/js/62.5dea0a47.chunk.js","sourcesContent":["import React from 'react'\nimport { Card , Space, Table, Button, notification } from 'antd'\nimport { Form , Col , Row } from 'react-bootstrap'\nimport api from '../../../resources/api'\nimport { connect } from 'react-redux'\n\nlet optns = null\nlet contacts = {}\nlet accounts = {}\nclass Record extends React.Component{\n   constructor(props){\n       super(props)\n       this.state = {\n           data : {\n               client : \"\",\n               destination : \"\",\n               paymentDate : \"\" , \n               source : \"\" ,\n               userId : this.props.userId\n\n           },\n           clientId : \"\",\n           clientData :\"\",\n           tableData : [],\n           unpaidBills : [],\n           payment :[],\n           total : 0,\n           fromTotal  : true,\n           optionforAcoount : null, \n           disabled : false\n\n       }\n   }\n   componentDidMount(){\n    let optionforAcoount = null\n     api.get('/contact/viewforuser/'+this.props.userId).then((res)=>{\n         contacts = res.data.data\n         optns = res.data.data.map((value, index)=>{\n          return <option id={index}>{value.firstName + \" \" + value.lastName}</option>\n           })\n     }).then(()=>{\n         this.setState({options : optns})\n        })\n        \n        api.get('/account/viewforuser/'+this.props.userId).then((res)=>{\n            console.log(res)\n            accounts = res.data.data\n            optionforAcoount = res.data.data.map((value, index)=>{\n             return <option id={index}>{value.accountName}</option>\n              })\n        }).then(()=>{\n            this.setState({ optionforAcoount : optionforAcoount})\n           })\n    \n   }\n    render(){\n        const handletotalBalance = (e) => {\n            e.persist()\n            const {id , value} = e.target\n            let newState = this.state\n            console.log(e.target)\n            newState.payment[0] = value\n            this.setState(newState)\n            this.setState({fromTotal : true})\n            console.log(this.state.payment)\n        }\n        const handlePayment = (e) => {\n            e.persist()\n            const {id , value} = e.target\n            let newState = this.state\n            console.log(e.target)\n            newState.payment[id] = value\n            this.setState(newState)\n            console.log(this.state.payment)\n        }\n        const handleChange = (e) => {\n            e.persist()\n            const { name, id, value} = e.target\n            let newData = this.state.data\n          \n            if(name === \"client\"){\n                newData[name] = contacts[e.target.selectedIndex]\n                if(e.target.selectedIndex !=0){\n                    this.setState({clientId : contacts[e.target.selectedIndex - 1]._id })\n                    console.log( contacts[e.target.selectedIndex - 1]._id)\n\n                    api.get('/billing/bill/viewforcontact/'+this.props.userId+'/'+ contacts[e.target.selectedIndex - 1]._id).then((res)=>{\n                        this.setState({clientData : res.data.data})\n                        console.log(res.data.data)\n                        console.log(\"foo foo \")\n                        let tableData = []\n                        let paidBills = []\n                        let unpaidBills = []\n                        res.data.data.map((value , index)=>{\n                               if(value.status == \"Unpaid\"){\n                                let pay = this.state.payment\n                                pay[index] = 0.00\n                                this.setState({payment : pay , total : this.state.total  + parseFloat(value.balance)})\n\n                               }\n                            //    const issueDate = today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear()\n                                const temp = {\n                                  id : value._id,\n                                  status : value.status,\n                                  lastSeen : value.lastSeen ? value.lastSeen : \"--\",\n                                  dueDate : value.dueDate,\n                                  invoiceID : value.invoiceId ? value.invoiceId : \"-\" ,\n                                  dueIn : value.dueDate.substring(0,10),\n                                  matter : value.matter,\n                                  openBalace : value.balance,\n                                  issueDate : value.issueDate.substring(0,10) ,\n                                  openBalance : value.balance,\n                                  payment : <Form>\n                                      <Row>\n                                          <Col md=\"10\">\n                                            <Form.Group controlId={index}>\n                                              \n                                                <Form.Control \n                                                style = {{height : \"60%\",}}\n                                                type=\"text\" \n                                                key={index}\n                                                name=\"payment\" \n                                                placeholder = \"$0.00\"\n                                                onChange={handlePayment}/>\n                                            </Form.Group>\n                                          </Col>\n                                      </Row>\n                                  </Form>\n                                  \n                                }\n                                if(value.status==\"Paid\"){\n                                  paidBills.push(temp)\n                                }\n                                if(value.status==\"Unpaid\"){\n                                  unpaidBills.push(temp)\n                                }\n                            \n                                tableData.push(temp)\n                              })\n                              this.setState({tableData :  tableData, paidBills : paidBills , unpaidBills : unpaidBills})\n                    }).catch((err)=>{\n                        console.log(err)\n                    })\n                }else{\n                    this.setState({clientId : \"\"})\n                }\n               \n            }else{\n                newData[name] = value\n            }\n            this.setState({data : newData})  \n             \n        }\n        const handleSubmit = (e) =>{\n            notification.destroy()\n            if(this.state.data.client === \"\" || this.state.data.source ===  \"Select a client\"){\n                notification.error({message : \"Please select a client\"})\n            }else if(this.state.data.source === \"\" || this.state.data.source ===  \"Select a Source\"){\n                notification.error({message : \"Please select a source\"})\n            }else if(this.state.data.destination === \"\" || this.state.data.destination === \"Select a Destination\"){\n                notification.error({message : \"Please select a destination\"})\n            }else if(this.state.data.paymentDate === \"\"){\n                notification.error({message : \"Please select a payment date\"})\n            }else{\n                this.setState({\n                    disabled: true\n                })\n                this.state.clientData.map((value,id)=>{\n        \n                    const data = value\n                    data.lastSeen = new Date()\n                    if(this.state.fromTotal){\n                        const bal = this.state.payment[0]\n                       if( parseFloat(data.balance) - parseFloat(bal) > 0){\n                        data.balance = parseFloat(data.balance) - parseFloat(bal)\n                       }\n                    }else {\n                        const bal = this.state.payment[id]\n                        data.balance = parseFloat(data.balance) - parseFloat(bal)\n                    }\n                   \n                    console.log(data)\n                    \n                    api.post('/billing/bill/edit/'+value._id, data ).then((res)=>{\n                        console.log(res)\n                        this.setState({\n                            disabled: false\n                        })\n                        notification.success({message : \"Bill Recorded\"})\n                    }).catch((err)=>{\n                        console.log(err)\n                        this.setState({\n                            disabled: false\n                        })\n                        notification.error({message : \"Failure \"})\n                   })\n                })\n               \n               api.post('/billing/create',this.state.data).then((res)=>{\n                   console.log(res)                 \n                   this.props.history.goBack()\n               }).catch((err)=>{\n            \n               })\n               \n            }\n        \n        }\n        \n          \n          const columns = [\n            {\n              title: 'Invoice ID',\n              dataIndex: 'invoiceID',\n              key: 'invoiceID',\n            },\n            {\n                title: 'Matter',\n                dataIndex: 'matter',\n                key: 'matter',\n              },\n              {\n                title: 'Issue Date',\n                dataIndex: 'issueDate',\n                key: 'issueDate',\n              },\n              {\n                title: 'Due In',\n                dataIndex: 'dueIn',\n                key: 'dueIn',\n              },\n            {\n              title: 'Status',\n              dataIndex: 'status',\n              key: 'status',\n            },\n           /*\n            {\n                title: 'Intrest',\n                dataIndex: 'intrest',\n                key: 'intrest',\n              },\n             \n            */\n             \n              {\n                title: 'Open Balance',\n                dataIndex: 'openBalance',\n                key: 'openBalance',\n              },\n              {\n                title: 'Payment',\n                 dataIndex: 'payment',\n                 key: 'payment',\n               }, \n          ];\n      \n\n        const title = <div style={{\"display\": \"flex\", \"flex-wrap\": \"wrap\" }}>\n                        <div className=\"mr-4\">\n                            <p style={{fontWeight : \"bold\"}}>Total open balance</p>\n        <p style={{fontWeight : \"bold\", \"float\": \"right\", \"font-size\": \"17px\"}}>${this.state.total.toFixed('2')}</p>\n                        </div>\n                        <div>\n                            <Form className=\"pt-0\">\n                                <Row>\n                                    <Col md=\"8\">\n                                    <Form.Group controlId=\"paymentAmount\">\n                                    <Form.Label style={{fontWeight : \"bold\"}}>Payment Amount</Form.Label>\n                                    <Form.Control\n                                    style={{height : \"38px\"}}\n                             \n                                    required\n                                    name=\"paymentAmount\"\n                                    type=\"text\"\n                                    onChange = { handletotalBalance }\n                                    placeholder=\"0.00\"\n                                //    onChange={handleChange}\n                                    />\n                            </Form.Group>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        </div>\n                      </div>\n\n        const invoiceTitle =  this.state.data.client===\"\"?  <h4 style={{textAlign:\"center\", fontWeight:\"bold\"}}>Select a client to record a payment.</h4> : title\n       \n        const invoiceBody = this.state.data.client===\"\"?\n                            null \n                            : \n                            <div>\n\n                                <Card bodyStyle={{\"padding\": \"0px\"}} className=\"overflow-auto\">\n                                    <Table dataSource={this.state.unpaidBills} columns={columns} />\n                                </Card> \n                                {\n                                    /* \n                                    <div className=\"mt-3\" style={{\"display\": \"flex\", \"flex-wrap\": \"wrap\", \"justify-content\": \"space-between\" }}>\n                                    <div style={{\"flex\" : \"1\"}} className=\"mr-3\">\n                                        <Form className=\"pt-0\">\n                                            <Form.Group controlId=\"formGroupMatter\">\n                                            <Form.Label style={{fontWeight : \"bold\"}}>Description</Form.Label>\n                                            <Form.Control \n                                                required name='description' \n                                                as=\"textarea\" \n                                                rows=\"3\" \n                                                type=\"text\"\n                                                placeholder=\"Description\"\n                                                onChange={handleChange} />\n                                            </Form.Group>\n                                        </Form>\n                                    </div>\n                                    <div style={{\"flex\" : \"1\"}} className=\"pt-4\">\n                                        <Card bodyStyle={{\"padding\": \"10px 20px\"}}>\n                                            <p style={{\"font-size\" : \"17px\"}}><b>Summary</b></p>\n                                            <p><b>Payment :</b></p>\n                                        </Card>\n                                    </div>\n                                </div>\n                           \n                                    */\n                                }\n\n                                 </div>\n\n        return <div>\n            <Card title=\"Record Payment\" bodyStyle={{\"padding\": \"0px 24px 0px\"}} className=\"mb-4\">\n             <Form className=\"form-details\">\n                 <Row>\n                     <Col md=\"3\">\n                        <Form.Group controlId=\"formGroupCompany\">\n                            <Form.Label>Client</Form.Label>\n                            <Form.Control \n                            name=\"client\" \n                            as=\"select\"\n                            onChange = { handleChange }>\n                                <option>Select a client</option>\n                                {this.state.options}\n                            </Form.Control>\n                        </Form.Group>\n                     </Col>\n                     <Col md=\"3\">\n                     <Form.Group controlId=\"source\">\n                            <Form.Label>Source</Form.Label>\n                            <Form.Control\n                             name=\"source\"\n                              as=\"select\"\n                              onChange = { handleChange }>\n                                <option>Select a Source</option>\n                                <option>Card Payment</option>\n                                <option>Cash Payment</option>\n                                <option>Net Banking</option>\n                                <option>Other</option>\n                            </Form.Control>\n                        </Form.Group>\n                     </Col>\n\n                 </Row>\n                 <Row>\n                    <Col md=\"3\">\n                       <Form.Group controlId=\"date\">\n                            <Form.Label>Payment Date</Form.Label>\n                            <Form.Control \n                            type=\"date\"  \n                            name=\"paymentDate\"\n                            onChange = { handleChange } />\n                        </Form.Group>\n                    </Col>\n                    <Col md=\"3\">\n                       <Form.Group controlId=\"destinaation\">\n                            <Form.Label>Destination</Form.Label>\n                            <Form.Control \n                            name=\"destination\" \n                            as=\"select\"\n                            onChange = { handleChange }>\n                                <option>Select a Destination</option>\n                                {this.state.optionforAcoount}\n                            </Form.Control>\n                        </Form.Group>\n                    </Col>\n                 </Row>\n                 <Row>\n                    <Col md=\"4\">\n                        <Form.Group controlId=\"formGroupLastName\">\n                            <Form.Label>Reference</Form.Label>\n                            <Form.Control\n                            required\n                            name=\"reference\"\n                            type=\"text\"\n                            placeholder=\"Enter a checking or reference # here\"\n                            onChange={handleChange}\n                            />\n                        </Form.Group>\n                    </Col>\n                 </Row>\n             </Form>\n            </Card>\n\n            <Card>\n                {invoiceTitle}\n            </Card>\n\n            {invoiceBody}\n\n            <div className=\"pt-3\">\n                <Button type=\"primary\" disabled={this.state.disabled} onClick={handleSubmit}>Record</Button>\n                <Button onClick={()=>{this.props.history.goBack()}}>Cancel</Button>\n            </div>\n    </div>\n    }\n}\n\nconst mapStateToProps = state => ({\n    userId: state.user.token.user._id\n  });\n  export default connect(mapStateToProps)(Record)\n"],"sourceRoot":""}