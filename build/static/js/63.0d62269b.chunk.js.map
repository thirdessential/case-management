{"version":3,"sources":["App/containers/Billings/CreateBills/CreateBill.js"],"names":["CreateBill","React","Component","constructor","super","this","state","data","billable","qty","date","rate","invoice","dates","issueDate","dueDate","tableData","record","name","Matter","LName","touched","selected","visible","disable","invoiceId","userData","componentDidMount","api","get","props","userId","then","res","console","log","setState","catch","error","length","sel","undefined","c","Object","keys","map","key","index","val","temp","total","type","hours","time","client","matter","firstName","lastName","clientId","_id","emailAddress","matterDescription","invoiceStatus","trustAmount","activity","i","push","sHours","sMinutes","sSecs","parseFloat","billed","parseInt","split","amount","toFixed","window","localStorage","getItem","Math","floor","minutes","render","handelAction","selectedActivities","column","title","dataIndex","_","Check","onChange","handleCancel","handleChange","e","target","value","uploadInvoice","canvas","document","getElementById","pdf","jsPDF","addHTML","save","handleSubmit","notification","destroy","valid","warning","message","billSelected","item","setTimeout","a","url","status","balance","post","disableExpense","disabletime","success","history","goBack","err","id","bodyStyle","className","style","fontWeight","class","scope","account","currencyFormat","widht","Header","onClick","Footer","dataSource","columns","onOk","onCancel","afterClose","footer","disabled","ref","form","messageForm","Group","controlId","Label","Control","required","defaultValue","placeholder","connect","user","token"],"mappings":"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","file":"static/js/63.0d62269b.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, Form } from 'react-bootstrap'\nimport {Button , Table , notification, Popconfirm, Modal} from 'antd'\nimport {connect} from 'react-redux'\nimport api from '../../../../resources/api';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport html2canvas from 'html2canvas'\n\nlet activity = {}\nclass CreateBill extends React.Component{\n  constructor(){\n    super()\n  //  this.divRef = React.createRef();\n    this.state = {     \n            data : { \n                billable : false,\n                qty : \"1.0\",\n                date : \"\",\n                rate : \"\",\n                invoice : \"Unbilled\",\n            },\n            dates : {\n                issueDate : \"\",\n                dueDate : \"\"\n            },\n            tableData : [],\n            record : \"\",\n            name : \"\",\n            Matter : \"\",\n            LName : \"\",\n            touched : true,\n            selected : [],\n            visible : false,\n            disable : false,\n            invoice : {},\n            invoiceId : 0,\n            userData:\"\"\n    }\n  }\n    componentDidMount(){\n\n      api.get('/user/view/' + this.props.userId).then((res)=>{\n        console.log({res})\n        this.setState({userData:res.data.data})}).catch(error => {\n          console.log({error})\n        })\n\nconsole.log({\"mounted\":this.state.userData})\n      let invoiceId = 0\n      api.get('/billing/bill/showall').then((res)=>{\n        console.log(res)\n        invoiceId  = res.data.data.length + 1\n        this.setState({invoiceId : res.data.data.length + 1})\n\n        api.get('/activity/viewforbill/' + this.props.userId).then((res) => {\n          console.log(res)\n          let tableData = []\n          let selected = []\n          let sel = 0\n          if(res.data.c !== undefined){\n            Object.keys(res.data.c).map(function(key, index) {\n              let val = res.data.c[key][0]\n              \n              let temp = {\n                key: sel,\n                total : 0,\n                index : index,\n                type: val.type,\n                invoiceId : invoiceId + 1 ,\n                hours : val.type === 'time' ? val.time : val.qty,\n                client : val.matter ? val.matter.client.firstName + \" \" + val.matter.client.lastName : \"-\" ,\n                clientId :  val.matter ? val.matter.client._id : \"\" ,\n                emailAddress : val.matter.client.emailAddress[0]? val.matter.client.emailAddress[0].emailAddress : \"\",\n                matter : val.matter._id,\n                matterDescription : val.matter.matterDescription,\n                rate: val.rate,\n                billable: val.billable ? 'Yes' : 'No',\n                invoiceStatus: 'Unbilled',\n                trustAmount : \"$0.00\",\n                activity : []\n              }\n             \n              \n              res.data.c[key].map((activity , i)=>{\n                temp.activity.push(activity._id)\n                let sHours = \"\"\n                let sMinutes = \"\"\n                let sSecs = \"\"\n                let rate = parseFloat(activity.rate)\n                if(activity.billed == false && activity.billable == true){\n                     \n                    \n                      if(activity.type === \"time\" && activity.time != undefined ){ \n                        sHours = parseInt(activity.time.split(':')[0])\n                        sMinutes = parseInt(activity.time.split(':')[1])\n                        sSecs = parseInt(activity.time.split(':')[2])\n                      }\n                      let amount =  activity.type === 'time' ? rate * sHours + ((rate/60)*sMinutes) + ((rate/3600)*sSecs): rate * parseInt(activity.qty)\n                      temp.total = parseFloat(temp.total) + parseFloat(amount)\n                      temp.total = temp.total.toFixed('2')\n                   }\n   \n              })\n              if(temp.total != 0){\n                selected.push(false)\n                invoiceId++\n                sel++\n                tableData.push(temp)\n              }   \n          })\n          }\n          this.setState({\n            tableData\n          })\n          console.log(tableData)\n        })\n        \n      })\n      \n      const time = window.localStorage.getItem('timer');\n      let hours = Math.floor(time / 3600);\n      let minutes = Math.floor(time / 60);\n      if (minutes >= 59) {\n        minutes = minutes % 60;\n      }\n  \n      //   const Seconds = time % 60;\n      const data = this.state.data;\n      data.time = hours + ':' + minutes;\n      this.setState({ data: data, touched: true });\n      console.log(this.state);\n    }\n    render(){\n      \n        const handelAction = (record) => {\n          console.log(record.key)\n          let selectedActivities = this.state.selected\n          selectedActivities[record.key] = !selectedActivities[record.key]\n          this.setState({\n            selected : selectedActivities\n          })\n          console.log(this.state.selected)\n        }\n\n        const column = [\n            {\n                title: 'Action',\n                dataIndex: 'action',\n                key: 'action',\n                render: (_, record) => {\n                  return (\n                    <Form.Check type=\"checkbox\" onChange={()=>handelAction(record)}  />\n                   \n                  );\n                },\n              },\n            {\n                title : \"Client\",\n                dataIndex : \"client\",\n                key :\"client\"\n            },\n            {\n                title : \"Unbilled hours\",\n                dataIndex : \"hours\",\n                key :\"hours\"\n            },\n            {\n                title : \"Amount Due\",\n                dataIndex : \"total\",\n                key :\"total\"\n            },\n            /*\n            {\n                title : \"Amount in trust\",\n                dataIndex : \"trustAmount\",\n                key :\"trustAmount\"\n            }\n            */\n        ]\n\n        const handleCancel = ( ) =>{\n          this.setState({visible: false})\n        }\n\n        const handleChange = (e) =>{\n          const { value, name } = e.target\n          let dates = this.state.dates\n          dates[name] = value\n          this.setState({\n            dates : dates\n          })\n\n        }\n        const handleModal = ( ) => {\n          notification.destroy()\n          let billSelected = []\n            this.state.tableData.map((item, index)=>{\n             if( this.state.selected[index] ){\n                billSelected.push(item)\n             }\n            })\n\n          if(billSelected.length == 0){\n            notification.warning({message : \"Please select a activity to bill\"})\n          }else{\n            this.setState({visible: true})\n          }\n        }\n        \n        const uploadInvoice = () => {\n        console.log(\"pdf\")\n        var canvas = document.getElementById('canvas');\n        var pdf = new jsPDF('p', 'mm', 'a4');\n        pdf.addHTML(\n          canvas,\n          function () {\n            pdf.save('invoice.pdf')\n            }\n        );\n         /*\n            const input = document.getElementById('divToPrint');\n            html2canvas(input)\n            .then((canvas) => {\n              const imgData = canvas.toDataURL('image/png');\n              const pdf = new jsPDF();\n            //  const imgProps= pdf.getImageProperties(imgData);\n           //   const pdfWidth = pdf.internal.pageSize.getWidth() ;\n            //  const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;\n              pdf.addImage(imgData, 'PNG', 0, 0);\n              pdf.save('Invoice.pdf');\n         \n              var docFormData = new FormData();\n              docFormData.set('image', pdf);\n              api\n              .post('/footer/upload', docFormData, {\n                headers: { 'Content-Type': 'multipart/form-data' },\n              })\n              .then((response)=>{\n                console.log(response)\n                notification.success({message : \"Invoice uploaded\"})\n                return response.data.message\n              }).catch((err)=>{\n                console.log(err)\n                notification.warning({message : \"Cannot upload invoice, Please try again later\"})\n                return \"\"\n              })\n\n            });\n            */\n        }\n        const handleSubmit = ( ) =>{\n          \n         notification.destroy()\n          let valid = true\n          \n          if(this.state.dates.issueDate === \"\"){\n            valid = false\n            notification.warning({message : \"Please select a issue date.\"})\n          }else\n          if(this.state.dates.dueDate === \"\"){\n            valid = false\n            notification.warning({message : \"Please select a due date.\"})\n          }\n\n          if(valid){\n            this.setState({\n              disable : true\n            })\n            \n            let billSelected = []\n            this.state.tableData.map((item, index)=>{\n             if( this.state.selected[index] ){\n                billSelected.push(item)\n             }\n            })\n\n           billSelected.map((value, index)=>{\n            this.setState({\n              invoice : value\n            })\n            setTimeout(async() => {\n              const url = await uploadInvoice()\n            console.log(url)\n            const data = {\n              userId : this.props.userId,\n              status : \"draft\",\n              invoiceId: value.invoiceId,\n              name : value.client,\n              client : value.clientId,\n            //  billUrl : url,\n              matter : value.matter ,\n              issueDate : this.state.dates.issueDate,\n              dueDate : this.state.dates.dueDate,\n              balance : value.total,\n            //  from : thisMatter.data.data.client ,\n            //  to : this.state.to         \n            }\n            console.log(data)\n            api.post('/billing/bill/create', data).then((res=>{\n              value.billed = true\n              console.log(res)\n               \n             value.activity.map((item)=>{\n              api\n              .post('/activity/edit/' + item, value )\n              .then((activity) => {\n                console.log(activity)\n                this.setState({\n                  disableExpense : false,\n                  disabletime : false\n                })\n               \n              })\n             })\n              \n              notification.success({message : \"Bill Generated!\"})\n              this.setState({\n                visible : false,\n                disable: false\n              })\n              this.props.history.goBack()\n            })).catch((err)=>{\n              notification.error({message : \"Failure\"})\n            })\n            }, 1000);\n           })          \n          }\n        }\nconsole.log({\"render\":this.state})\n\n        return <div>\n          <Card id = \"canvas\" bodyStyle={{\"padding\": \"100px\"}} className=\"mb-3\">\n                <div id=\"divToPrint\"  className=\"text-center P-3\">\n                  <div className=\"text-right\">\n                    {\n                      console.log(\"invoice\", this.state.invoice)\n                    }\n                    <h5 className=\"font-weight-bold\">INVOICE</h5>\n                    <div>\n                      <div>Invoice #{this.state.invoice.invoiceId}</div>\n                      <div>Date : {this.state.dates.issueDate}</div>\n                    </div>\n                  </div>\n                  <div className=\"float-left text-left\">\n                    <div><h3 style={{fontWeight : \"bold\"}}>{this.state.invoice.client} </h3></div>              \n                    <div>\n                      <span style={{fontWeight : \"bold\"}}>{this.state.invoice.emailAddress}</span><br></br>\n                    </div>             \n                    <br></br>\n                  <br></br>\n                  </div>\n                  <div className=\"my-5 py-5\">\n                    <table class=\"table\">\n                      <thead class=\"thead-light\">\n                        <tr>\n                          <th scope=\"col\">Issue Date</th>\n                          <th scope=\"col\">Due Date</th>\n                          <th scope=\"col\">Amount</th>\n                          <th scope=\"col\">Currency</th>\n                          <th scope=\"col\">Matter</th>\n                        </tr>\n                      </thead>\n                      <tbody>        \n                          <tr >\n                            <th scope=\"row\">{this.state.dates.issueDate}</th>\n                            <td>{this.state.dates.dueDate}</td>\n                            <td>{this.state.invoice.total}</td>\n                            <td>{this.state.userData.account ? this.state.userData.account.currencyFormat:\"$\"}</td>\n                            <td>{this.state.invoice.matterDescription}</td>\n                          </tr>            \n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n            </Card>\n                <Card style={{widht : \"110%\"}}>\n                    <Card.Header>\n                        <Button type=\"link\" onClick={()=>{this.props.history.goBack()}}>Back to bills</Button>\n                    </Card.Header>\n                </Card>\n                <Card>\n                    <Card.Header>\n                        <h4>\n                        Select billable clients to generate new bills\n                        </h4>\n                    </Card.Header>\n                    \n                    <Card.Footer>\n                         <Table className=\"table-responsive\" dataSource={this.state.tableData} columns={column}></Table>\n                    </Card.Footer>\n                </Card>\n                <Button type=\"primary\" onClick={handleModal}>Generate</Button>\n                <Modal\n                  title=\"Add details\"\n                  visible={this.state.visible}\n                  onOk={handleSubmit}\n                  onCancel={handleCancel}\n                  afterClose={handleCancel}\n                  footer={[\n                    <Button  onClick={handleCancel}>\n                      Cancel\n                    </Button>,\n                    <Button type=\"primary\" \n                    disabled = {this.state.disable} \n                    onClick={handleSubmit}>\n                      Submit\n                    </Button>,\n                  ]}\n                >\n                      <Form \n                      id='myForm'\n                      className=\"form\"\n                      ref={ form => this.messageForm = form } >\n                         <Form.Group controlId=\"issueDate\">\n                              <Form.Label>Issue Date</Form.Label>\n                              <Form.Control \n                              required\n                              type=\"date\" \n                              name=\"issueDate\" \n                              defaultValue = {this.state.dates.issueDate}\n                              onChange={handleChange}/>\n                          </Form.Group>\n                        <Form.Group controlId=\"dueDate\">\n                              <Form.Label>Due Date</Form.Label>\n                              <Form.Control \n                              required\n                              type=\"date\" \n                              name=\"dueDate\" \n                              placeholder = \"Select a date\" \n                              onChange={handleChange}/>\n                          </Form.Group>\n                    </Form>\n\n                </Modal>\n\n            </div>\n    }\n}\n\nconst mapStateToProps = state => ({\n  userId: state.user.token.user._id\n});\n\nexport default connect(mapStateToProps)(CreateBill)"],"sourceRoot":""}