{"version":3,"sources":["Demo/Authentication/SignIn/SignIn1.js"],"names":["validEmailRegex","RegExp","AdminLogin","props","dispatch","useDispatch","useState","Display","setDisplay","spinner","setSpinner","state","setState","emailAddress","password","errors","setErrors","handleChange","e","persist","target","name","value","st","err","test","length","handleLogin","notification","destroy","error","valid","Object","values","forEach","val","validateForm","warning","message","checkValidity","loginUser","type","response","success","className","onChange","placeholder","onKeyPress","event","console","log","code","keyCode","which","onClick"],"mappings":"yOAUA,MAAMA,EAAkBC,OACtB,0HAwKaC,UArKKC,IAClB,MAAMC,EAAWC,cADW,EAEEC,oBAAS,GAFX,mBAErBC,EAFqB,KAEZC,EAFY,OAGEF,oBAAS,GAHX,mBAGrBG,EAHqB,KAGZC,EAHY,OAIEJ,oBAAS,GAJX,gCAKFA,mBAAS,KALP,mBAKrBK,EALqB,KAKdC,EALc,OAMAN,mBAAS,CACnCO,aAAc,GACdC,SAAU,KARgB,mBAMrBC,EANqB,KAMbC,EANa,KAWtBC,EAAgBC,IACpBA,EAAEC,UACFX,GAAW,GAFe,QAGFU,EAAEE,OAAlBC,EAHkB,EAGlBA,KAAMC,EAHY,EAGZA,MACdV,EAAUW,GAAD,YAAC,eAAaA,GAAd,IAAkB,CAACF,GAAOC,KACnC,IAAIE,EAAMT,EACV,OAAQM,GACN,IAAK,eACHG,EAAIX,aAAeb,EAAgByB,KAAKH,GACpC,GACA,sBACJ,MACF,IAAK,WACHE,EAAIV,SACFQ,EAAMI,OAAS,EAAI,yCAA2C,GAKpEV,EAAU,eAAKQ,KAGXG,EAAeT,IAGnB,GADAU,IAAaC,WACTtB,EAAQ,CACVG,GAAW,GAMb,IALsBoB,KACpB,IAAIC,GAAQ,EAEZ,OADAC,OAAOC,OAAOH,GAAOI,QAASC,GAAQA,EAAIT,OAAS,IAAMK,GAAQ,IAC1DA,GAELK,CAAarB,GAKf,OAFAL,GAAW,GACXF,GAAW,GACJoB,IAAaS,QAAQ,CAC1BC,QAAS,wBALXC,MAWEA,EAAgB,KACpB,GAA8B,KAA1B5B,EAAK,cAAiD,KAAtBA,EAAK,SAEvC,OADAH,GAAW,GACJoB,IAAaS,QAAQ,CAC1BC,QAAS,+BAGXlC,EACEoC,YAAU,2BAAK7B,GAAN,IAAa8B,KAAM,UAAW,CAACjB,EAAKkB,KACvClB,GACFI,IAAaE,MAAMN,GACnBhB,GAAW,IAEXoB,IAAae,QAAQD,GAEvBhC,GAAW,OAcnB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,yBAAKkC,UAAU,gBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,WACb,0BAAMA,UAAU,MAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,QAChB,0BAAMA,UAAU,OAElB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,mCAEf,wBAAIA,UAAU,QAAd,SACA,yBAAKA,UAAU,oBACb,2BACEvB,KAAK,eACLC,MAAOX,EAAK,aACZkC,SAAU5B,EACVwB,KAAK,QACLG,UAAU,eACVE,YAAY,WAGhB,uBAAGF,UAAU,0BAA0B7B,EAAOF,cAE9C,yBAAK+B,UAAU,oBACb,2BACEG,WAxCKC,IACnBC,QAAQC,IAAIF,GACZ,IAAIG,EAAOH,EAAMI,SAAWJ,EAAMK,MAClCJ,QAAQC,IAAIC,GACA,KAATA,GAECxB,KAmCUN,KAAK,WACLC,MAAOX,EAAK,SACZkC,SAAU5B,EACVwB,KAAK,WACLG,UAAU,eACVE,YAAY,cAGfrC,GAAW,kBAAC,IAAD,MAkBZ,4BACE6C,QAAS3B,EACTiB,UAAU,iCAFZ","file":"static/js/76.1546e0c0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport \"./../../../assets/scss/style.scss\";\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport Breadcrumb from \"../../../App/layout/AdminLayout/Breadcrumb\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loginUser } from \"../../../store/Actions\";\r\nimport { notification, Spin } from \"antd\";\r\n\r\nconst validEmailRegex = RegExp(\r\n  /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\r\n);\r\n\r\nconst AdminLogin = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [Display, setDisplay] = useState(false);\r\n  const [spinner, setSpinner] = useState(false);\r\n  const [checked, setChecked] = useState(true);\r\n  const [state, setState] = useState({});\r\n  const [errors, setErrors] = useState({\r\n    emailAddress: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    e.persist();\r\n    setDisplay(false)\r\n    const { name, value } = e.target;\r\n    setState((st) => ({ ...st, [name]: value }));\r\n    var err = errors;\r\n    switch (name) {\r\n      case \"emailAddress\":\r\n        err.emailAddress = validEmailRegex.test(value)\r\n          ? \"\"\r\n          : \"Email is not valid!\";\r\n        break;\r\n      case \"password\":\r\n        err.password =\r\n          value.length < 6 ? \"Password must be at least 6 characters\" : \"\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setErrors({ ...err });\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n   // e.preventDefault();\r\n    notification.destroy()\r\n    if(!Display){\r\n      setSpinner(true);\r\n    const validateForm = (error) => {\r\n      let valid = true;\r\n      Object.values(error).forEach((val) => val.length > 0 && (valid = false));\r\n      return valid;\r\n    };\r\n    if (validateForm(errors)) {\r\n      checkValidity();\r\n    } else {\r\n      setSpinner(false);\r\n      setDisplay(true)\r\n      return notification.warning({\r\n        message: \"Failed to Register.\",\r\n      });\r\n    }\r\n    }\r\n  };\r\n\r\n  const checkValidity = () => {\r\n    if (state[\"emailAddress\"] === \"\" || state[\"password\"] === \"\") {\r\n      setDisplay(true)\r\n      return notification.warning({\r\n        message: \"Fields Should Not Be Empty\",\r\n      });\r\n    } else {\r\n      dispatch(\r\n        loginUser({ ...state, type: \"admin\" }, (err, response) => {\r\n          if (err) {\r\n            notification.error(err);\r\n            setDisplay(true)\r\n          } else {\r\n            notification.success(response);\r\n          }\r\n          setSpinner(false);\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const enterPressed =(event)=>{\r\n    console.log(event)\r\n    var code = event.keyCode || event.which;\r\n    console.log(code)\r\n    if(code === 13) { //13 is the enter keycode\r\n        //Do stuff in here\r\n        handleLogin()\r\n    } \r\n}\r\n  return (\r\n    <Aux>\r\n      <Breadcrumb />\r\n      <div className=\"auth-wrapper\">\r\n        <div className=\"auth-content\">\r\n          <div className=\"auth-bg\">\r\n            <span className=\"r\" />\r\n            <span className=\"r s\" />\r\n            <span className=\"r s\" />\r\n            <span className=\"r\" />\r\n          </div>\r\n          <div className=\"card\">\r\n            <div className=\"card-body text-center\">\r\n              <div className=\"mb-4\">\r\n                <i className=\"feather icon-unlock auth-icon\" />\r\n              </div>\r\n              <h3 className=\"mb-4\">Login</h3>\r\n              <div className=\"input-group mb-3\">\r\n                <input\r\n                  name=\"emailAddress\"\r\n                  value={state[\"emailAddress\"]}\r\n                  onChange={handleChange}\r\n                  type=\"email\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Email\"\r\n                />\r\n              </div>\r\n              <p className=\"help-block text-danger\">{errors.emailAddress}</p>\r\n\r\n              <div className=\"input-group mb-4\">\r\n                <input\r\n                  onKeyPress = {enterPressed}\r\n                  name=\"password\"\r\n                  value={state[\"password\"]}\r\n                  onChange={handleChange}\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"password\"\r\n                />\r\n              </div>\r\n              {spinner && <Spin />}\r\n              {/*\r\n              <div className=\"form-group text-left\">\r\n                  \r\n                  <p className=\"help-block text-danger\">{errors.password}</p>\r\n\r\n                  <label>\r\n                    Remember me \r\n                    <input type=\"checkbox\"\r\n                    name=\"checkbox-fill-1\"\r\n                    id=\"checkbox-fill-a1\"\r\n                      checked={checked}\r\n                      onChange={() => setChecked(!checked)}\r\n                    />\r\n                  </label><br></br>\r\n               \r\n              </div>\r\n              */}\r\n              <button\r\n                onClick={handleLogin}\r\n                className=\"btn btn-primary shadow-2 mb-4\"\r\n              >\r\n                Login\r\n              </button>\r\n              {/*\r\n              <p className=\"mb-2 text-muted\">\r\n                Forgot password? <NavLink to=\"/forgot\">Reset</NavLink>\r\n              </p>\r\n              <p className=\"mb-0 text-muted\">\r\n                Donâ€™t have an account?{\" \"}\r\n                <NavLink to=\"/admin/register\">Signup</NavLink>\r\n              </p>\r\n              */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Aux>\r\n  );\r\n};\r\n\r\nexport default AdminLogin;\r\n"],"sourceRoot":""}